Mathematica:
General System of Equations for targeting time when acceleration limits are reached (7 segment spline):

t01 := (a1 - a0)/j01
v01 := j01*t01^2/2 + a0*t01
v1 := v0 + v01
q01 := j01*t01^3/6 + a0*t01^2/2 + v0*t01
t23 := (a3 - a2)/j23
v23 := j23*t23^2/2 + a2*t23
v2 := v3 - v23
q23 := j23*t23^3/6 + a2*t23^2/2 + v2*t23
v12 := v2 - v1
t12 := v12/a1
q12 := a1*t12^2/2 + v1*t12
q03 := q01 + q12 + q23
t03 := t01 + t12 + t23
t67 := (a7 - a6)/j67
v67 := j67*t67^2/2 + a6*t67
v6 := v7 - v67
q67 := j67*t67^3/6 + a6*t67^2/2 + v6*t67
t45 := (a5 - a4)/j45
v45 := j45*t45^2/2 + a4*t45
v4 := v3
v5 := v4 + v45
q45 := j45*t45^3/6 + a4*t45^2/2 + v4*t45
v56 := v6 - v5
t56 := v56/a5
q56 := a5*t56^2/2 + v5*t56
q47 := q45 + q56 + q67
t47 := t45 + t56 + t67
q34 := q7 - q0 - q03 - q47
t34 := t7 - t0 - t03 - t47
FullSimplify[Solve[v3 == q34/t34, v3]]

v3 -> (3 (a0 - a1)^2 a5 j01 j23^2 j45^2 j67^2 +
   3 j01^2 j23^2 j45^2 j67 (-2 a5 j67 v0 +
      a1 (a6^2 - a7^2 + 2 a5 (-a6 + a7 + j67 t0 - j67 t7) +
         2 j67 v7)) +
   Sqrt[3] \[Sqrt](j01^2 j23^2 j45^2 j67^2 (3 j23^2 j45^2 (a1^2 a5 \
j67 + a5 j67 (a0^2 - 2 j01 v0) +
            a1 (-2 a5 (a0 j67 + j01 (a6 - a7 - j67 t0 + j67 t7)) +
               j01 (a6^2 - a7^2 + 2 j67 v7)))^2 - (a1 -
            a5) (a1^4 a5 j23^2 j45^2 j67^2 -
            6 a1^2 a5 j23^2 j45^2 j67^2 (a0^2 - 2 j01 v0) +
            3 a5 j45^2 j67^2 (a2^4 j01^2 -
               j23^2 (a0^2 - 2 j01 v0)^2) +
            a1 (-6 a4^2 a5^2 j01^2 j23^2 j67^2 +
               a5^4 j01^2 j23^2 j67^2 -
               4 a5 (a6^3 j01^2 j23^2 j45^2 +
                  2 a7^3 j01^2 j23^2 j45^2 +
                  j67^2 (-2 a4^3 j01^2 j23^2 +
                    j45^2 (a2^3 j01^2 -
                    2 j23^2 (a0^3 + 3 j01^2 (q0 - q7) -
                    3 a0 j01 v0))) - 6 a7 j01^2 j23^2 j45^2 j67 v7 -
                  3 a6 j01^2 j23^2 j45^2 (a7^2 - 2 j67 v7)) +
               3 j01^2 j23^2 (-a4^2 j67 +
                  j45 (a6^2 - a7^2 + 2 j67 v7)) (a4^2 j67 +
                  j45 (a6^2 - a7^2 + 2 j67 v7)))))))/(6 (a1 -
     a5) j01^2 j23^2 j45^2 j67^2)

v3 -> (3 (a0 - a1)^2 a5 j01 j23^2 j45^2 j67^2 +
   3 j01^2 j23^2 j45^2 j67 (-2 a5 j67 v0 +
      a1 (a6^2 - a7^2 + 2 a5 (-a6 + a7 + j67 t0 - j67 t7) +
         2 j67 v7)) -
   Sqrt[3] \[Sqrt](j01^2 j23^2 j45^2 j67^2 (3 j23^2 j45^2 (a1^2 a5 \
j67 + a5 j67 (a0^2 - 2 j01 v0) +
            a1 (-2 a5 (a0 j67 + j01 (a6 - a7 - j67 t0 + j67 t7)) +
               j01 (a6^2 - a7^2 + 2 j67 v7)))^2 - (a1 -
            a5) (a1^4 a5 j23^2 j45^2 j67^2 -
            6 a1^2 a5 j23^2 j45^2 j67^2 (a0^2 - 2 j01 v0) +
            3 a5 j45^2 j67^2 (a2^4 j01^2 -
               j23^2 (a0^2 - 2 j01 v0)^2) +
            a1 (-6 a4^2 a5^2 j01^2 j23^2 j67^2 +
               a5^4 j01^2 j23^2 j67^2 -
               4 a5 (a6^3 j01^2 j23^2 j45^2 +
                  2 a7^3 j01^2 j23^2 j45^2 +
                  j67^2 (-2 a4^3 j01^2 j23^2 +
                    j45^2 (a2^3 j01^2 -
                    2 j23^2 (a0^3 + 3 j01^2 (q0 - q7) -
                    3 a0 j01 v0))) - 6 a7 j01^2 j23^2 j45^2 j67 v7 -
                  3 a6 j01^2 j23^2 j45^2 (a7^2 - 2 j67 v7)) +
               3 j01^2 j23^2 (-a4^2 j67 +
                  j45 (a6^2 - a7^2 + 2 j67 v7)) (a4^2 j67 +
                  j45 (a6^2 - a7^2 + 2 j67 v7)))))))/(6 (a1 -
     a5) j01^2 j23^2 j45^2 j67^2)

Python: (Unoptimized)
numerator_a = 3*(a[0]-a[1])**2*a[5]*j[0]*j_sq[2]*j_sq[4]*j_sq[6]+3*j_sq[0]*j_sq[2]*j_sq[4]*j[6]*(-2*a[5]*j[6]*v[0]+a[1]*(a_sq[6]-a_sq[7]+2*a[5]*(-a[6]+a[7]+j[6]*t[0]-j[6]*t[7])+2*j[6]*v[7]))
numerator_b = math.sqrt(3)*math.sqrt(j_sq[0]*j_sq[2]*j_sq[4]*j_sq[6]*(3*j_sq[2]*j_sq[4]*(a_sq[1]*a[5]*j[6]+a[5]*j[6]*(a_sq[0]-2*j[0]*v[0])+a[1]*(-2*a[5]*(a[0]*j[6]+j[0]*(a[6]-a[7]-j[6]*t[0]+j[6]*t[7]))+j[0]*(a_sq[6]-a_sq[7]+2*j[6]*v[7])))**2-(a[1]-a[5])*(a_sq[1]*a_sq[1]*a[5]*j_sq[2]*j_sq[4]*j_sq[6]-6*a_sq[1]*a[5]*j_sq[2]*j_sq[4]*j_sq[6]*(a_sq[0]-2*j[0]*v[0])+3*a[5]*j_sq[4]*j_sq[6]*(a_sq[2]*a_sq[2]*j_sq[0]-j_sq[2]*(a_sq[0]-2*j[0]*v[0])**2)+a[1]*(-6*a_sq[4]*a_sq[5]*j_sq[0]*j_sq[2]*j_sq[6]+a_sq[5]*a_sq[5]*j_sq[0]*j_sq[2]*j_sq[6]-4*a[5]*(a_sq[6]*a[6]*j_sq[0]*j_sq[2]*j_sq[4]+2*a_sq[7]*a[7]*j_sq[0]*j_sq[2]*j_sq[4]+j_sq[6]*(-2*a_sq[4]*a[4]*j_sq[0]*j_sq[2]+j_sq[4]*(a_sq[2]*a[2]*j_sq[0]-2*j_sq[2]*(a_sq[0]*a[0]+3*j_sq[0]*(q[0]-q[7])-3*a[0]*j[0]*v[0])))-6*a[7]*j_sq[0]*j_sq[2]*j_sq[4]*j[6]*v[7]-3*a[6]*j_sq[0]*j_sq[2]*j_sq[4]*(a_sq[7]-2*j[6]*v[7]))+3*j_sq[0]*j_sq[2]*(-a_sq[4]*j[6]+j[4]*(a_sq[6]-a_sq[7]+2*j[6]*v[7]))*(a_sq[4]*j[6]+j[4]*(a_sq[6]-a_sq[7]+2*j[6]*v[7]))))))
denominator = (6*(a[1]-a[5])*j_sq[0]*j_sq[2]*j_sq[4]*j_sq[6])

v3_soln_1 = (numerator_a + numerator_b) / denominator
v3_soln_2 = (numerator_a - numerator_b) / denominator

v3_opt_1 = (3*(a0-a1)**2*a5*j01*j23**2*j45**2*j67**2+3*j01**2*j23**2*j45**2*j67*(-2*a5*j67*v0+a1*(a6**2-a7**2+2*a5*(-a6+a7+j67*t0-j67*t7)+2*j67*v7))+math.sqrt(3)*math.sqrt(j01**2*j23**2*j45**2*j67**2*(3*j23**2*j45**2*(a1**2*a5*j67+a5*j67*(a0**2-2*j01*v0)+a1*(-2*a5*(a0*j67+j01*(a6-a7-j67*t0+j67*t7))+j01*(a6**2-a7**2+2*j67*v7)))**2-(a1-a5)*(a1**4*a5*j23**2*j45**2*j67**2-6*a1**2*a5*j23**2*j45**2*j67**2*(a0**2-2*j01*v0)+3*a5*j45**2*j67**2*(a2**4*j01**2-j23**2*(a0**2-2*j01*v0)**2)+a1*(-6*a4**2*a5**2*j01**2*j23**2*j67**2+a5**4*j01**2*j23**2*j67**2-4*a5*(a6**3*j01**2*j23**2*j45**2+2*a7**3*j01**2*j23**2*j45**2+j67**2*(-2*a4**3*j01**2*j23**2+j45**2*(a2**3*j01**2-2*j23**2*(a0**3+3*j01**2*(q0-q7)-3*a0*j01*v0)))-6*a7*j01**2*j23**2*j45**2*j67*v7-3*a6*j01**2*j23**2*j45**2*(a7**2-2*j67*v7))+3*j01**2*j23**2*(-a4**2*j67+j45*(a6**2-a7**2+2*j67*v7))*(a4**2*j67+j45*(a6**2-a7**2+2*j67*v7)))))))/(6*(a1-a5)*j01**2*j23**2*j45**2*j67**2)
or
v3_opt_2 = (3 (a0-a1)^2 a5 j01 j23^2 j45^2 j67^2+3 j01^2 j23^2 j45^2 j67 (-2 a5 j67 v0+a1 (a6^2-a7^2+2 a5 (-a6+a7+j67 t0-j67 t7)+2 j67 v7))-Sqrt[3] \[Sqrt](j01^2 j23^2 j45^2 j67^2 (3 j23^2 j45^2 (a1^2 a5 j67+a5 j67 (a0^2-2 j01 v0)+a1 (-2 a5 (a0 j67+j01 (a6-a7-j67 t0+j67 t7))+j01 (a6^2-a7^2+2 j67 v7)))^2-(a1-a5) (a1^4 a5 j23^2 j45^2 j67^2-6 a1^2 a5 j23^2 j45^2 j67^2 (a0^2-2 j01 v0)+3 a5 j45^2 j67^2 (a2^4 j01^2-j23^2 (a0^2-2 j01 v0)^2)+a1 (-6 a4^2 a5^2 j01^2 j23^2 j67^2+a5^4 j01^2 j23^2 j67^2-4 a5 (a6^3 j01^2 j23^2 j45^2+2 a7^3 j01^2 j23^2 j45^2+j67^2 (-2 a4^3 j01^2 j23^2+j45^2 (a2^3 j01^2-2 j23^2 (a0^3+3 j01^2 (q0-q7)-3 a0 j01 v0)))-6 a7 j01^2 j23^2 j45^2 j67 v7-3 a6 j01^2 j23^2 j45^2 (a7^2-2 j67 v7))+3 j01^2 j23^2 (-a4^2 j67+j45 (a6^2-a7^2+2 j67 v7)) (a4^2 j67+j45 (a6^2-a7^2+2 j67 v7)))))))/(6 (a1-a5) j01^2 j23^2 j45^2 j67^2)
##############

Use above equations and assume that the spline should have an acceleration profile of:
         ____
        /    \
       /      \
      /        \______
                      \          /
                       \        /
                        \______/

     t0 t1  t2 t3    t4 t5    t6 t7

j01 = jx
j23 = jn
j45 = jn
j67 = jx
a1 = ax
a2 = ax
a3 = 0
a4 = 0
a5 = an
a6 = an

Results:
{vx -> (1/(
  6 (an - ax) jn^2 jx^2))(3 an^2 ax jn^2 jx -
    3 an jn^2 jx (a0^2 - 2 a0 ax +
       ax (2 a7 + ax + 2 jx t0 - 2 jx t7) - 2 jx v0) +
    3 ax jn^2 jx (a7^2 - 2 jx v7) -
    Sqrt[3] \[Sqrt](jn^2 jx^2 (3 jn^2 (-a7^2 ax +
             an (a0^2 - 2 a0 ax +
                ax (2 a7 - an + ax + 2 jx t0 - 2 jx t7) - 2 jx v0) +
             2 ax jx v7)^2 - (an - ax) (3 a0^4 an jn^2 -
             3 a7^4 ax jn^2 - 8 a0^3 an ax jn^2 + 8 a7^3 an ax jn^2 -
             6 a7^2 an^2 ax jn^2 + an^4 ax jn^2 - an ax^4 jn^2 -
             an^4 ax jx^2 + an ax^4 jx^2 - 24 an ax jn^2 jx^2 q0 +
             24 an ax jn^2 jx^2 q7 + 24 a0 an ax jn^2 jx v0 -
             12 an ax^2 jn^2 jx v0 + 12 an jn^2 jx^2 v0^2 +
             6 a0^2 an jn^2 (ax^2 - 2 jx v0) +
             12 (a7 - an)^2 ax jn^2 jx v7 -
             12 ax jn^2 jx^2 v7^2))))}, {vx -> (1/(
  6 (an - ax) jn^2 jx^2))(3 an^2 ax jn^2 jx -
    3 an jn^2 jx (a0^2 - 2 a0 ax +
       ax (2 a7 + ax + 2 jx t0 - 2 jx t7) - 2 jx v0) +
    3 ax jn^2 jx (a7^2 - 2 jx v7) +
    Sqrt[3] \[Sqrt](jn^2 jx^2 (3 jn^2 (-a7^2 ax +
             an (a0^2 - 2 a0 ax +
                ax (2 a7 - an + ax + 2 jx t0 - 2 jx t7) - 2 jx v0) +
             2 ax jx v7)^2 - (an - ax) (3 a0^4 an jn^2 -
             3 a7^4 ax jn^2 - 8 a0^3 an ax jn^2 + 8 a7^3 an ax jn^2 -
             6 a7^2 an^2 ax jn^2 + an^4 ax jn^2 - an ax^4 jn^2 -
             an^4 ax jx^2 + an ax^4 jx^2 - 24 an ax jn^2 jx^2 q0 +
             24 an ax jn^2 jx^2 q7 + 24 a0 an ax jn^2 jx v0 -
             12 an ax^2 jn^2 jx v0 + 12 an jn^2 jx^2 v0^2 +
             6 a0^2 an jn^2 (ax^2 - 2 jx v0) +
             12 (a7 - an)^2 ax jn^2 jx v7 - 12 ax jn^2 jx^2 v7^2))))}

In Python:
vx = (1/(6*(an - ax)*jn_2*jx_2))(3*an_2*ax*jn_2*jx - 3*an*jn_2*jx*(ai_2 - 2*ai*ax + ax*(2*af + ax + 2*jx*ti - 2*jx*tf) - 2*jx*vi) + 3*ax*jn_2*jx*(af_2 - 2*jx*vf) - math.sqrt(3)*math.sqrt(jn_2*jx_2*(3*jn_2*( - af_2*ax + an*(ai_2 - 2*ai*ax + ax*(2*af - an + ax + 2*jx*ti - 2*jx*tf) - 2*jx*vi) + 2*ax*jx*vf)**2 - (an - ax)*(3*ai_4*an*jn_2 - 3*af_4*ax*jn_2 - 8*ai_3*an*ax*jn_2 + 8*af_3*an*ax*jn_2 - 6*af_2*an_2*ax*jn_2 + an_4*ax*jn_2 - an*ax_4*jn_2 - an_4*ax*jx_2 + an*ax_4*jx_2 - 24*an*ax*jn_2*jx_2*qi + 24*an*ax*jn_2*jx_2*qf + 24*ai*an*ax*jn_2*jx*vi - 12*an*ax_2*jn_2*jx*vi + 12*an*jn_2*jx_2*vi_2 + 6*ai_2*an*jn_2*(ax_2 - 2*jx*vi) + 12*(af - an)_2*ax*jn_2*jx*vf - 12*ax*jn_2*jx_2*vf_2))))


#############################################################
Mathematica:

Use above equations and assume that the spline should have an acceleration profile of:
         ____            ______
        /    \          /      \
       /      \        /        \
      /        \______/          \

     t0 t1  t2 t3    t4 t5    t6 t7

	 This is required when the vehicle is starting from 0 velocity
	 and is ending with some velocity greater than the 'cruising
	 velocity' dictated by the target time. Common when accelerating
	 out of a station and intending to hit a merge point at full line
	 speed.

j01 = jx
j23 = jn
j45 = jx
j67 = jn
a1 = ax
a2 = ax
a3 = 0
a4 = 0
a5 = ax
a6 = ax

Results:
vx -> (-3 a0^4 jn^2 + 8 a0^3 ax jn^2 + 2 ax^4 (jn - jx) (jn + jx) -
    24 a0 ax jn^2 jx v0 - 6 a0^2 jn^2 (ax^2 - 2 jx v0) -
    8 ax jx^2 (a7^3 + 3 jn^2 (-q0 + q7) - 3 a7 jn v7) +
    6 ax^2 jx (a7^2 jx + 2 jn^2 v0 - 2 jn jx v7) +
    3 jx^2 (a7^2 + 2 jn v0 - 2 jn v7) (a7^2 -
       2 jn (v0 + v7)))/(12 jn jx (a0^2 jn - 2 a0 ax jn +
      ax^2 (jn - jx) + 2 ax jx (a7 + jn t0 - jn t7) -
      jx (a7^2 + 2 jn v0 - 2 jn v7)))

Plain text:
vx=(-3 a0^4 jn^2+8 a0^3 ax jn^2+2 ax^4 (jn-jx) (jn+jx)-24 a0 ax jn^2 jx v0-6 a0^2 jn^2 (ax^2-2 jx v0)-8 ax jx^2 (a7^3+3 jn^2 (-q0+q7)-3 a7 jn v7)+6 ax^2 jx (a7^2 jx+2 jn^2 v0-2 jn jx v7)+3 jx^2 (a7^2+2 jn v0-2 jn v7) (a7^2-2 jn (v0+v7)))/(12 jn jx (a0^2 jn-2 a0 ax jn+ax^2 (jn-jx)+2 ax jx (a7+jn t0-jn t7)-jx (a7^2+2 jn v0-2 jn v7)))

Python:
vx=(-3*a_sq[0]*a_sq[0]*j_sq[6]+8*a_sq[0]*a[0]*a[1]*j_sq[6]+2*a_sq[1]*a_sq[1]*(j[6]-j[4])*(j[6]+j[4])-24*a[0]*a[1]*j_sq[6]*j[4]*v[0]-6*a_sq[0]*j_sq[6]*(a_sq[1]-2*j[4]*v[0])-8*a[1]*j_sq[4]*(a[7]*a_sq[7]+3*j_sq[6]*(-q[0]+q[7])-3*a[7]*j[6]*v[7])+6*a_sq[1]*j[4]*(a_sq[7]*j[4]+2*j_sq[6]*v[0]-2*j[6]*j[4]*v[7])+3*j_sq[4]*(a_sq[7]+2*j[6]*v[0]-2*j[6]*v[7])*(a_sq[7]-2*j[6]*(v[0]+v[7])))/(12*j[6]*j[4]*(a_sq[0]*j[6]-2*a[0]*a[1]*j[6]+a_sq[1]*(j[6]-j[4])+2*a[1]*j[4]*(a[7]+j[6]*t[0]-j[6]*t[7])-j[4]*(a_sq[7]+2*j[6]*v[0]-2*j[6]*v[7])))

#############################################################
Mathmatica:

Delta v is small. Acceleration limits aren't reached.

	/\
   /  \
  /    \_____
		     \    /
		      \  /
		       \/

 0  1   2    3  4  5

a2 = 0
a3 = 0

t01 = (a1-a0)/j01
v01 = j01*t01^2/2 + a0*t01
q01 = j01*t01^3/6 + a0*t01^2/2 + v0*t01

t12 = (a2-a1)/j12
t21 = -t12
v21 = j12*t21^2/2 + a2*t21
q21 = j12*t21^3/6 + a2*t21^2/2 + v2*t12

t34 = (a4-a3)/j34
v34 = j34*t34^2/2 + a3*t34
q34 = j34*t34^3/6 + a3*t34^2/2 + v3*t34

t45 = (a5-a4)/j45
t54 = -t45
v54 = j45*t54^2/2 + a5*t54
q54 = j45*t54^3/6 + a5*t54^2/2 + v5*t45

t2 = t0 + t01 + t12
t3 = t5 - t45 - t34

Solve[{v1 == v0 + v01,
       v1 == v2 + v21,
       q1 == q0 + q01,
       q1 == q2 + q21,
       v4 == v3 + v34,
       v4 == v5 + v54,
       q4 == q3 + q34,
       q4 == q5 + q54,
	   v3 == v2,
	   (q3-q2)/(t3-t2) == v2},
	   v2]


#######################################
##### A version that pre-calculates t1, v1, t6 and v6 to simplify the final equation. ######

a2 = ax
v2 = vx - v23
q23 = jn*t23^3/6 + a2*t23^2/2 + v2*t23
v12 = v2 - v1
a1 = ax

t12 = v12/a1
q12 = a1*t12^2/2 + v1*t12
q13 = q1 + q12 + q23
t13 = t1 + t12 + t23

a6 = an
a4 = 0
a5 = an

v5 = vx + v45
q45 = jn*t45^3/6 + a4*t45^2/2 + vx*t45
v56 = v6 - v5
t56 = v56/an
q56 = an*t56^2/2 + v5*t56
q46 = q45 + q56 + q6
t46 = t45 + t56 + t6
q34 = q6 - q1 - q13 - q46
t34 = t6 - t1 - t13 - t46

FullSimplify[Solve[vx == q34/t34, vx]]

# Full format answer
vx -> -(1/(3 (an - ax)))(6 an ax t1 - 3 an v1 + 3 ax v6 +
      1/2 \[Sqrt]((12 an ax t1 - 6 an v1 + 6 ax v6)^2 +
          12 (an - ax) (an (ax (12 q1 + 3 ax t23^2 + jn (t23^3 + t45^3)) -
                3 v1^2 - 6 ax t23 v23 + 3 v23^2) + 3 ax (-v45^2 + v6^2))))

vx -> (1/(3 (an - ax)))(-6 an ax t1 + 3 an v1 - 3 ax v6 +
     1/2 \[Sqrt]((12 an ax t1 - 6 an v1 + 6 ax v6)^2 +
         12 (an - ax) (an (ax (12 q1 + 3 ax t23^2 + jn (t23^3 + t45^3)) -
               3 v1^2 - 6 ax t23 v23 + 3 v23^2) + 3 ax (-v45^2 + v6^2))))


# Python formatted answer
vx = -(1/(3*(an - ax)))*(6*an*ax*t1 - 3*an*v1 + 3*ax*v6 + math.sqrt((12*an*ax*t1 - 6*an*v1 + 6*ax*v6)**2 + 12*(an - ax)*(an*(ax*(12*q1 + 3*ax*t23_2 + jn*(t23_3 + t45_3)) - 3*v1_2 - 6*ax*t23*v23 + 3*v23_2) + 3*ax*(v6_2 - v45_2)))/2 )

############################

Attempt #2
	/\
   /  \
  /    \_____
		     \    /
		      \  /
		       \/

 0  1   2    3  4  5

qi = 0
vi = 0
ai = 0

qf = 100
vf = 0
af = 0

j0 = 1
j1 = -1
j2 = 0
j3 = -1
j4 = 1
j5 = 1

Solve[{q0 + v0*t1 + a0/2*t1^2 + j0/6*t1^3 == q1 + v1*t1 + a1/2*t1^2 + j1/6*t1^3,
       q1 + v1*t2 + a1/2*t2^2 + j1/6*t2^3 == q2 + v2*t2 + a2/2*t2^2 + j2/6*t2^3,
	   q2 + v2*t3 + a2/2*t3^2 + j2/6*t3^3 == q3 + v3*t3 + a3/2*t3^2 + j3/6*t3^3,
	   q3 + v3*t4 + a3/2*t4^2 + j3/6*t4^3 == q4 + v4*t4 + a4/2*t4^2 + j4/6*t4^3,
	   q4 + v4*t5 + a4/2*t5^2 + j4/6*t5^3 == q5 + v5*t5 + a5/2*t5^2 + j5/6*t5^3,
       v0 + a0*t1 + j0/2*t1^2 == v1 + a1*t1 + j1/2*t1^2,
	   v1 + a1*t2 + j1/2*t2^2 == v2 + a2*t2 + j2/2*t2^2,
	   v2 + a2*t3 + j2/2*t3^2 == v3 + a3*t3 + j3/2*t3^2,
	   v3 + a3*t4 + j3/2*t4^2 == v4 + a4*t4 + j4/2*t4^2,
	   v4 + a4*t5 + j4/2*t5^2 == v5 + a5*t5 + j5/2*t5^2,
	   a0 + j0*t1 == a1 + j1*t1,
	   a1 + j1*t2 == a2 + j2*t2,
	   a2 + j2*t3 == a3 + j3*t3,
	   a3 + j3*t4 == a4 + j4*t4,
	   a4 + j4*t5 == a5 + j5*t5,

	   a2 + j2*t2 == 0,
	   a3 + j3*t3 == 0,
	   v2 + a2*t2 + j2/2*t2^2 == v3 + a3*t3 + j3/2*t3^2,

	   q0 + v0*t0 + a0/2*t0^2 + j0/6*t0^3 == qi,
	   v0 + a0*t0 + j0/2*t0^3 == vi,
	   a0 + j0*t0 == ai,

	   q5 + v5*t5 + a5/2*t5^2 + j5/6*t5^3 == qf,
	   v5 + a5*t5 + j5/2*t5^2 == vf,
	   a5 + j5*t5 == af
	   }]



##############################################################
## General equations for a spline that targets pos, vel, and accel. Does not assume a constraint on
## Velocity, or Accelerations.
         ____
        /    \
       /      \
      /        \.
                 \          /
                  \        /
                   \______/

     0 1   2  3,4  4     5  6


a01 := j01*t01
v01 := j01*t01^2/2 + a0*t01
q01 := j01*t01^3/6 + a0*t01^2/2 + v0*t01

a1 := a0 + a01
v1 := v0 + v01
q1 := q0 + q01

a12 := j12*t12
v12 := j12*t12^2/2 + a1*t12
q12 := j12*t12^3/6 + a1*t12^2/ + v1*t12




