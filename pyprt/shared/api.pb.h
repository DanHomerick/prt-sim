// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_api_2eproto__INCLUDED
#define PROTOBUF_api_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace prt {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_api_2eproto();
void protobuf_AssignDesc_api_2eproto();
void protobuf_ShutdownFile_api_2eproto();

class PolyCoeffs;
class Spline;
class CtrlCmdVehicleTrajectory;
class CtrlCmdVehicleItinerary;
class CtrlCmdPassengersEmbark;
class CtrlCmdPassengersDisembark;
class CtrlCmdPassengerWalk;
class CtrlCmdStorageEnter;
class CtrlCmdStorageExit;
class CtrlCmdSwitch;
class CtrlRequestVehicleStatus;
class CtrlRequestStationStatus;
class CtrlRequestPassengerStatus;
class CtrlRequestSwitchStatus;
class CtrlRequestTrackSegmentStatus;
class CtrlRequestTotalStatus;
class CtrlSetnotifyVehiclePosition;
class CtrlSetnotifyTime;
class CtrlResume;
class CtrlScenarioError;
class SimGreeting;
class SimStart;
class SimEnd;
class SimUnimplemented;
class SimCompletePassengersEmbark;
class SimCompletePassengersDisembark;
class SimCompletePassengerWalk;
class SimCompleteSwitch;
class SimCompleteStorageEnter;
class SimCompleteStorageExit;
class SimResponseVehicleStatus;
class SimResponseStationStatus;
class SimResponsePassengerStatus;
class SimResponseSwitchStatus;
class SimResponseTrackStatus;
class SimResponseTotalStatus;
class SimNotifyVehiclePosition;
class SimNotifyTime;
class SimNotifyVehicleArrive;
class SimNotifyVehicleExit;
class SimNotifyVehicleStopped;
class SimNotifyVehicleSpeeding;
class SimNotifyVehicleCollision;
class SimNotifyVehicleCrash;
class SimNotifyPassengerEmbarkStart;
class SimNotifyPassengerEmbarkEnd;
class SimNotifyPassengerDisembarkStart;
class SimNotifyPassengerDisembarkEnd;
class SimEventTrackDisabled;
class SimEventTrackReenabled;
class SimEventSwitchDisabled;
class SimEventSwitchReenabled;
class SimEventStationDisabled;
class SimEventStationReenabled;
class SimEventVehicleDisabled;
class SimEventVehicleReenabled;
class SimEventPassengerCreated;
class SimEventPassengerChangedest;
class SimMsgHdrInvalidSeparator;
class SimMsgHdrInvalidType;
class SimMsgHdrInvalidId;
class SimMsgHdrInvalidTime;
class SimMsgHdrInvalidSize;
class SimMsgBodyInvalid;
class SimMsgBodyInvalidTime;
class SimMsgBodyInvalidId;
class VehicleStatus;
class StationStatus;
class PlatformStatus;
class BerthStatus;
class PassengerStatus;
class RoutingEntry;
class SwitchStatus;
class TrackStatus;

enum Misc {
  MSG_SEP = -32123,
  MSG_HEADER_SIZE = 16,
  NONE_ID = -1,
  STORAGE_ID = -2
};
bool Misc_IsValid(int value);
const Misc Misc_MIN = MSG_SEP;
const Misc Misc_MAX = MSG_HEADER_SIZE;
const int Misc_ARRAYSIZE = Misc_MAX + 1;

const ::google::protobuf::EnumDescriptor* Misc_descriptor();
inline const ::std::string& Misc_Name(Misc value) {
  return ::google::protobuf::internal::NameOfEnum(
    Misc_descriptor(), value);
}
inline bool Misc_Parse(
    const ::std::string& name, Misc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Misc>(
    Misc_descriptor(), name, value);
}
enum CtrlMsgType {
  CTRL_CMD_VEHICLE_TRAJECTORY = 1,
  CTRL_CMD_VEHICLE_ITINERARY = 2,
  CTRL_CMD_SWITCH = 3,
  CTRL_CMD_PASSENGERS_EMBARK = 4,
  CTRL_CMD_PASSENGERS_DISEMBARK = 5,
  CTRL_CMD_PASSENGER_WALK = 6,
  CTRL_CMD_STORAGE_ENTER = 7,
  CTRL_CMD_STORAGE_EXIT = 8,
  CTRL_REQUEST_VEHICLE_STATUS = 10,
  CTRL_REQUEST_STATION_STATUS = 11,
  CTRL_REQUEST_PASSENGER_STATUS = 12,
  CTRL_REQUEST_SWITCH_STATUS = 13,
  CTRL_REQUEST_TRACKSEGMENT_STATUS = 14,
  CTRL_REQUEST_TOTAL_STATUS = 15,
  CTRL_SETNOTIFY_VEHICLE_POSITION = 20,
  CTRL_SETNOTIFY_TIME = 21,
  CTRL_RESUME = 30,
  CTRL_SCENARIO_ERROR = 50
};
bool CtrlMsgType_IsValid(int value);
const CtrlMsgType CtrlMsgType_MIN = CTRL_CMD_VEHICLE_TRAJECTORY;
const CtrlMsgType CtrlMsgType_MAX = CTRL_SCENARIO_ERROR;
const int CtrlMsgType_ARRAYSIZE = CtrlMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CtrlMsgType_descriptor();
inline const ::std::string& CtrlMsgType_Name(CtrlMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CtrlMsgType_descriptor(), value);
}
inline bool CtrlMsgType_Parse(
    const ::std::string& name, CtrlMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CtrlMsgType>(
    CtrlMsgType_descriptor(), name, value);
}
enum LocationType {
  TRACK_SEGMENT = 0,
  SWITCH = 10,
  STATION = 20,
  PLATFORM = 30,
  BERTH = 40,
  VEHICLE = 50,
  PASSENGER = 60,
  WALKING = 70,
  NONE = 80
};
bool LocationType_IsValid(int value);
const LocationType LocationType_MIN = TRACK_SEGMENT;
const LocationType LocationType_MAX = NONE;
const int LocationType_ARRAYSIZE = LocationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocationType_descriptor();
inline const ::std::string& LocationType_Name(LocationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocationType_descriptor(), value);
}
inline bool LocationType_Parse(
    const ::std::string& name, LocationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocationType>(
    LocationType_descriptor(), name, value);
}
enum StationPolicy {
  LOBBY = 1,
  QUEUE = 2
};
bool StationPolicy_IsValid(int value);
const StationPolicy StationPolicy_MIN = LOBBY;
const StationPolicy StationPolicy_MAX = QUEUE;
const int StationPolicy_ARRAYSIZE = StationPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* StationPolicy_descriptor();
inline const ::std::string& StationPolicy_Name(StationPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    StationPolicy_descriptor(), value);
}
inline bool StationPolicy_Parse(
    const ::std::string& name, StationPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StationPolicy>(
    StationPolicy_descriptor(), name, value);
}
enum SimMsgType {
  SIM_GREETING = 1000,
  SIM_START = 1001,
  SIM_END = 1002,
  SIM_UNIMPLEMENTED = 1003,
  SIM_COMPLETE_PASSENGERS_EMBARK = 1010,
  SIM_COMPLETE_PASSENGERS_DISEMBARK = 1011,
  SIM_COMPLETE_PASSENGER_WALK = 1012,
  SIM_COMPLETE_SWITCH = 1013,
  SIM_COMPLETE_STORAGE_ENTER = 1014,
  SIM_COMPLETE_STORAGE_EXIT = 1015,
  SIM_RESPONSE_VEHICLE_STATUS = 1030,
  SIM_RESPONSE_STATION_STATUS = 1031,
  SIM_RESPONSE_PASSENGER_STATUS = 1032,
  SIM_RESPONSE_SWITCH_STATUS = 1033,
  SIM_RESPONSE_TRACK_STATUS = 1034,
  SIM_RESPONSE_TOTAL_STATUS = 1035,
  SIM_NOTIFY_VEHICLE_POSITION = 1040,
  SIM_NOTIFY_VEHICLE_ARRIVE = 1041,
  SIM_NOTIFY_VEHICLE_EXIT = 1042,
  SIM_NOTIFY_VEHICLE_STOPPED = 1043,
  SIM_NOTIFY_VEHICLE_SPEEDING = 1044,
  SIM_NOTIFY_VEHICLE_COLLISION = 1045,
  SIM_NOTIFY_VEHICLE_CRASH = 1046,
  SIM_NOTIFY_PASSENGER_EMBARK_START = 1047,
  SIM_NOTIFY_PASSENGER_EMBARK_END = 1048,
  SIM_NOTIFY_PASSENGER_DISEMBARK_START = 1049,
  SIM_NOTIFY_PASSENGER_DISEMBARK_END = 1050,
  SIM_NOTIFY_TIME = 1051,
  SIM_EVENT_TRACK_DISABLED = 1060,
  SIM_EVENT_TRACK_REENABLED = 1061,
  SIM_EVENT_SWITCH_DISABLED = 1062,
  SIM_EVENT_SWITCH_REENABLED = 1063,
  SIM_EVENT_STATION_DISABLED = 1064,
  SIM_EVENT_STATION_REENABLED = 1065,
  SIM_EVENT_VEHICLE_DISABLED = 1066,
  SIM_EVENT_VEHICLE_REENABLED = 1067,
  SIM_EVENT_PASSENGER_CREATED = 1068,
  SIM_EVENT_PASSENGER_CHANGEDEST = 1069,
  SIM_MSG_HDR_INVALID_SEPARATOR = 1080,
  SIM_MSG_HDR_INVALID_TYPE = 1081,
  SIM_MSG_HDR_INVALID_ID = 1082,
  SIM_MSG_HDR_INVALID_TIME = 1083,
  SIM_MSG_HDR_INVALID_SIZE = 1084,
  SIM_MSG_BODY_INVALID = 1085,
  SIM_MSG_BODY_INVALID_TIME = 1086,
  SIM_MSG_BODY_INVALID_ID = 1087
};
bool SimMsgType_IsValid(int value);
const SimMsgType SimMsgType_MIN = SIM_GREETING;
const SimMsgType SimMsgType_MAX = SIM_MSG_BODY_INVALID_ID;
const int SimMsgType_ARRAYSIZE = SimMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SimMsgType_descriptor();
inline const ::std::string& SimMsgType_Name(SimMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SimMsgType_descriptor(), value);
}
inline bool SimMsgType_Parse(
    const ::std::string& name, SimMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SimMsgType>(
    SimMsgType_descriptor(), name, value);
}
// ===================================================================

class PolyCoeffs : public ::google::protobuf::Message {
 public:
  PolyCoeffs();
  virtual ~PolyCoeffs();
  
  PolyCoeffs(const PolyCoeffs& from);
  
  inline PolyCoeffs& operator=(const PolyCoeffs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolyCoeffs& default_instance();
  
  void Swap(PolyCoeffs* other);
  
  // implements Message ----------------------------------------------
  
  PolyCoeffs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PolyCoeffs& from);
  void MergeFrom(const PolyCoeffs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double coeffs = 1 [packed = true];
  inline int coeffs_size() const;
  inline void clear_coeffs();
  static const int kCoeffsFieldNumber = 1;
  inline double coeffs(int index) const;
  inline void set_coeffs(int index, double value);
  inline void add_coeffs(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      coeffs() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_coeffs();
  
  // @@protoc_insertion_point(class_scope:prt.PolyCoeffs)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< double > coeffs_;
  mutable int _coeffs_cached_byte_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PolyCoeffs* default_instance_;
};
// -------------------------------------------------------------------

class Spline : public ::google::protobuf::Message {
 public:
  Spline();
  virtual ~Spline();
  
  Spline(const Spline& from);
  
  inline Spline& operator=(const Spline& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Spline& default_instance();
  
  void Swap(Spline* other);
  
  // implements Message ----------------------------------------------
  
  Spline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spline& from);
  void MergeFrom(const Spline& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .prt.PolyCoeffs polys = 1;
  inline int polys_size() const;
  inline void clear_polys();
  static const int kPolysFieldNumber = 1;
  inline const ::prt::PolyCoeffs& polys(int index) const;
  inline ::prt::PolyCoeffs* mutable_polys(int index);
  inline ::prt::PolyCoeffs* add_polys();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::PolyCoeffs >&
      polys() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::PolyCoeffs >*
      mutable_polys();
  
  // repeated double times = 2 [packed = true];
  inline int times_size() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline double times(int index) const;
  inline void set_times(int index, double value);
  inline void add_times(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      times() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_times();
  
  // @@protoc_insertion_point(class_scope:prt.Spline)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::prt::PolyCoeffs > polys_;
  ::google::protobuf::RepeatedField< double > times_;
  mutable int _times_cached_byte_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Spline* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdVehicleTrajectory : public ::google::protobuf::Message {
 public:
  CtrlCmdVehicleTrajectory();
  virtual ~CtrlCmdVehicleTrajectory();
  
  CtrlCmdVehicleTrajectory(const CtrlCmdVehicleTrajectory& from);
  
  inline CtrlCmdVehicleTrajectory& operator=(const CtrlCmdVehicleTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdVehicleTrajectory& default_instance();
  
  void Swap(CtrlCmdVehicleTrajectory* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdVehicleTrajectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdVehicleTrajectory& from);
  void MergeFrom(const CtrlCmdVehicleTrajectory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required .prt.Spline spline = 2;
  inline bool has_spline() const;
  inline void clear_spline();
  static const int kSplineFieldNumber = 2;
  inline const ::prt::Spline& spline() const;
  inline ::prt::Spline* mutable_spline();
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdVehicleTrajectory)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::prt::Spline* spline_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdVehicleTrajectory* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdVehicleItinerary : public ::google::protobuf::Message {
 public:
  CtrlCmdVehicleItinerary();
  virtual ~CtrlCmdVehicleItinerary();
  
  CtrlCmdVehicleItinerary(const CtrlCmdVehicleItinerary& from);
  
  inline CtrlCmdVehicleItinerary& operator=(const CtrlCmdVehicleItinerary& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdVehicleItinerary& default_instance();
  
  void Swap(CtrlCmdVehicleItinerary* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdVehicleItinerary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdVehicleItinerary& from);
  void MergeFrom(const CtrlCmdVehicleItinerary& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // repeated int32 trackIDs = 2 [packed = true];
  inline int trackids_size() const;
  inline void clear_trackids();
  static const int kTrackIDsFieldNumber = 2;
  inline ::google::protobuf::int32 trackids(int index) const;
  inline void set_trackids(int index, ::google::protobuf::int32 value);
  inline void add_trackids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trackids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trackids();
  
  // optional bool clear = 3;
  inline bool has_clear() const;
  inline void clear_clear();
  static const int kClearFieldNumber = 3;
  inline bool clear() const;
  inline void set_clear(bool value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdVehicleItinerary)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trackids_;
  mutable int _trackids_cached_byte_size_;
  bool clear_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdVehicleItinerary* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdPassengersEmbark : public ::google::protobuf::Message {
 public:
  CtrlCmdPassengersEmbark();
  virtual ~CtrlCmdPassengersEmbark();
  
  CtrlCmdPassengersEmbark(const CtrlCmdPassengersEmbark& from);
  
  inline CtrlCmdPassengersEmbark& operator=(const CtrlCmdPassengersEmbark& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdPassengersEmbark& default_instance();
  
  void Swap(CtrlCmdPassengersEmbark* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdPassengersEmbark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdPassengersEmbark& from);
  void MergeFrom(const CtrlCmdPassengersEmbark& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 3;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 3;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 berthID = 4;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 4;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // repeated int32 passengerIDs = 5 [packed = true];
  inline int passengerids_size() const;
  inline void clear_passengerids();
  static const int kPassengerIDsFieldNumber = 5;
  inline ::google::protobuf::int32 passengerids(int index) const;
  inline void set_passengerids(int index, ::google::protobuf::int32 value);
  inline void add_passengerids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      passengerids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_passengerids();
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdPassengersEmbark)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 berthid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > passengerids_;
  mutable int _passengerids_cached_byte_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdPassengersEmbark* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdPassengersDisembark : public ::google::protobuf::Message {
 public:
  CtrlCmdPassengersDisembark();
  virtual ~CtrlCmdPassengersDisembark();
  
  CtrlCmdPassengersDisembark(const CtrlCmdPassengersDisembark& from);
  
  inline CtrlCmdPassengersDisembark& operator=(const CtrlCmdPassengersDisembark& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdPassengersDisembark& default_instance();
  
  void Swap(CtrlCmdPassengersDisembark* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdPassengersDisembark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdPassengersDisembark& from);
  void MergeFrom(const CtrlCmdPassengersDisembark& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 3;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 3;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 berthID = 4;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 4;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // repeated int32 passengerIDs = 5 [packed = true];
  inline int passengerids_size() const;
  inline void clear_passengerids();
  static const int kPassengerIDsFieldNumber = 5;
  inline ::google::protobuf::int32 passengerids(int index) const;
  inline void set_passengerids(int index, ::google::protobuf::int32 value);
  inline void add_passengerids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      passengerids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_passengerids();
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdPassengersDisembark)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 berthid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > passengerids_;
  mutable int _passengerids_cached_byte_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdPassengersDisembark* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdPassengerWalk : public ::google::protobuf::Message {
 public:
  CtrlCmdPassengerWalk();
  virtual ~CtrlCmdPassengerWalk();
  
  CtrlCmdPassengerWalk(const CtrlCmdPassengerWalk& from);
  
  inline CtrlCmdPassengerWalk& operator=(const CtrlCmdPassengerWalk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdPassengerWalk& default_instance();
  
  void Swap(CtrlCmdPassengerWalk* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdPassengerWalk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdPassengerWalk& from);
  void MergeFrom(const CtrlCmdPassengerWalk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 passengerID = 1;
  inline bool has_passengerid() const;
  inline void clear_passengerid();
  static const int kPassengerIDFieldNumber = 1;
  inline ::google::protobuf::int32 passengerid() const;
  inline void set_passengerid(::google::protobuf::int32 value);
  
  // required int32 origin_stationID = 2;
  inline bool has_origin_stationid() const;
  inline void clear_origin_stationid();
  static const int kOriginStationIDFieldNumber = 2;
  inline ::google::protobuf::int32 origin_stationid() const;
  inline void set_origin_stationid(::google::protobuf::int32 value);
  
  // required int32 dest_stationID = 3;
  inline bool has_dest_stationid() const;
  inline void clear_dest_stationid();
  static const int kDestStationIDFieldNumber = 3;
  inline ::google::protobuf::int32 dest_stationid() const;
  inline void set_dest_stationid(::google::protobuf::int32 value);
  
  // required double travel_time = 4;
  inline bool has_travel_time() const;
  inline void clear_travel_time();
  static const int kTravelTimeFieldNumber = 4;
  inline double travel_time() const;
  inline void set_travel_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdPassengerWalk)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 passengerid_;
  ::google::protobuf::int32 origin_stationid_;
  ::google::protobuf::int32 dest_stationid_;
  double travel_time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdPassengerWalk* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdStorageEnter : public ::google::protobuf::Message {
 public:
  CtrlCmdStorageEnter();
  virtual ~CtrlCmdStorageEnter();
  
  CtrlCmdStorageEnter(const CtrlCmdStorageEnter& from);
  
  inline CtrlCmdStorageEnter& operator=(const CtrlCmdStorageEnter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdStorageEnter& default_instance();
  
  void Swap(CtrlCmdStorageEnter* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdStorageEnter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdStorageEnter& from);
  void MergeFrom(const CtrlCmdStorageEnter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 3;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 3;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 berthID = 4;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 4;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdStorageEnter)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 berthid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdStorageEnter* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdStorageExit : public ::google::protobuf::Message {
 public:
  CtrlCmdStorageExit();
  virtual ~CtrlCmdStorageExit();
  
  CtrlCmdStorageExit(const CtrlCmdStorageExit& from);
  
  inline CtrlCmdStorageExit& operator=(const CtrlCmdStorageExit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdStorageExit& default_instance();
  
  void Swap(CtrlCmdStorageExit* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdStorageExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdStorageExit& from);
  void MergeFrom(const CtrlCmdStorageExit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 sID = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 2;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 2;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 berthID = 3;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 3;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // required float position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline float position() const;
  inline void set_position(float value);
  
  // required string model_name = 5;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 5;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdStorageExit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 berthid_;
  float position_;
  ::std::string* model_name_;
  static const ::std::string _default_model_name_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdStorageExit* default_instance_;
};
// -------------------------------------------------------------------

class CtrlCmdSwitch : public ::google::protobuf::Message {
 public:
  CtrlCmdSwitch();
  virtual ~CtrlCmdSwitch();
  
  CtrlCmdSwitch(const CtrlCmdSwitch& from);
  
  inline CtrlCmdSwitch& operator=(const CtrlCmdSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlCmdSwitch& default_instance();
  
  void Swap(CtrlCmdSwitch* other);
  
  // implements Message ----------------------------------------------
  
  CtrlCmdSwitch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlCmdSwitch& from);
  void MergeFrom(const CtrlCmdSwitch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trackID = 1;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 1;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // required int32 nextID = 2;
  inline bool has_nextid() const;
  inline void clear_nextid();
  static const int kNextIDFieldNumber = 2;
  inline ::google::protobuf::int32 nextid() const;
  inline void set_nextid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlCmdSwitch)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  ::google::protobuf::int32 nextid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlCmdSwitch* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequestVehicleStatus : public ::google::protobuf::Message {
 public:
  CtrlRequestVehicleStatus();
  virtual ~CtrlRequestVehicleStatus();
  
  CtrlRequestVehicleStatus(const CtrlRequestVehicleStatus& from);
  
  inline CtrlRequestVehicleStatus& operator=(const CtrlRequestVehicleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequestVehicleStatus& default_instance();
  
  void Swap(CtrlRequestVehicleStatus* other);
  
  // implements Message ----------------------------------------------
  
  CtrlRequestVehicleStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequestVehicleStatus& from);
  void MergeFrom(const CtrlRequestVehicleStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 2;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 2;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlRequestVehicleStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlRequestVehicleStatus* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequestStationStatus : public ::google::protobuf::Message {
 public:
  CtrlRequestStationStatus();
  virtual ~CtrlRequestStationStatus();
  
  CtrlRequestStationStatus(const CtrlRequestStationStatus& from);
  
  inline CtrlRequestStationStatus& operator=(const CtrlRequestStationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequestStationStatus& default_instance();
  
  void Swap(CtrlRequestStationStatus* other);
  
  // implements Message ----------------------------------------------
  
  CtrlRequestStationStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequestStationStatus& from);
  void MergeFrom(const CtrlRequestStationStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlRequestStationStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlRequestStationStatus* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequestPassengerStatus : public ::google::protobuf::Message {
 public:
  CtrlRequestPassengerStatus();
  virtual ~CtrlRequestPassengerStatus();
  
  CtrlRequestPassengerStatus(const CtrlRequestPassengerStatus& from);
  
  inline CtrlRequestPassengerStatus& operator=(const CtrlRequestPassengerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequestPassengerStatus& default_instance();
  
  void Swap(CtrlRequestPassengerStatus* other);
  
  // implements Message ----------------------------------------------
  
  CtrlRequestPassengerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequestPassengerStatus& from);
  void MergeFrom(const CtrlRequestPassengerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pID = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 2;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlRequestPassengerStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 pid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlRequestPassengerStatus* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequestSwitchStatus : public ::google::protobuf::Message {
 public:
  CtrlRequestSwitchStatus();
  virtual ~CtrlRequestSwitchStatus();
  
  CtrlRequestSwitchStatus(const CtrlRequestSwitchStatus& from);
  
  inline CtrlRequestSwitchStatus& operator=(const CtrlRequestSwitchStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequestSwitchStatus& default_instance();
  
  void Swap(CtrlRequestSwitchStatus* other);
  
  // implements Message ----------------------------------------------
  
  CtrlRequestSwitchStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequestSwitchStatus& from);
  void MergeFrom(const CtrlRequestSwitchStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 swID = 2;
  inline bool has_swid() const;
  inline void clear_swid();
  static const int kSwIDFieldNumber = 2;
  inline ::google::protobuf::int32 swid() const;
  inline void set_swid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlRequestSwitchStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 swid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlRequestSwitchStatus* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequestTrackSegmentStatus : public ::google::protobuf::Message {
 public:
  CtrlRequestTrackSegmentStatus();
  virtual ~CtrlRequestTrackSegmentStatus();
  
  CtrlRequestTrackSegmentStatus(const CtrlRequestTrackSegmentStatus& from);
  
  inline CtrlRequestTrackSegmentStatus& operator=(const CtrlRequestTrackSegmentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequestTrackSegmentStatus& default_instance();
  
  void Swap(CtrlRequestTrackSegmentStatus* other);
  
  // implements Message ----------------------------------------------
  
  CtrlRequestTrackSegmentStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequestTrackSegmentStatus& from);
  void MergeFrom(const CtrlRequestTrackSegmentStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trackID = 2;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 2;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlRequestTrackSegmentStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlRequestTrackSegmentStatus* default_instance_;
};
// -------------------------------------------------------------------

class CtrlRequestTotalStatus : public ::google::protobuf::Message {
 public:
  CtrlRequestTotalStatus();
  virtual ~CtrlRequestTotalStatus();
  
  CtrlRequestTotalStatus(const CtrlRequestTotalStatus& from);
  
  inline CtrlRequestTotalStatus& operator=(const CtrlRequestTotalStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlRequestTotalStatus& default_instance();
  
  void Swap(CtrlRequestTotalStatus* other);
  
  // implements Message ----------------------------------------------
  
  CtrlRequestTotalStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlRequestTotalStatus& from);
  void MergeFrom(const CtrlRequestTotalStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:prt.CtrlRequestTotalStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlRequestTotalStatus* default_instance_;
};
// -------------------------------------------------------------------

class CtrlSetnotifyVehiclePosition : public ::google::protobuf::Message {
 public:
  CtrlSetnotifyVehiclePosition();
  virtual ~CtrlSetnotifyVehiclePosition();
  
  CtrlSetnotifyVehiclePosition(const CtrlSetnotifyVehiclePosition& from);
  
  inline CtrlSetnotifyVehiclePosition& operator=(const CtrlSetnotifyVehiclePosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlSetnotifyVehiclePosition& default_instance();
  
  void Swap(CtrlSetnotifyVehiclePosition* other);
  
  // implements Message ----------------------------------------------
  
  CtrlSetnotifyVehiclePosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlSetnotifyVehiclePosition& from);
  void MergeFrom(const CtrlSetnotifyVehiclePosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required float pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline float pos() const;
  inline void set_pos(float value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlSetnotifyVehiclePosition)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  float pos_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlSetnotifyVehiclePosition* default_instance_;
};
// -------------------------------------------------------------------

class CtrlSetnotifyTime : public ::google::protobuf::Message {
 public:
  CtrlSetnotifyTime();
  virtual ~CtrlSetnotifyTime();
  
  CtrlSetnotifyTime(const CtrlSetnotifyTime& from);
  
  inline CtrlSetnotifyTime& operator=(const CtrlSetnotifyTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlSetnotifyTime& default_instance();
  
  void Swap(CtrlSetnotifyTime* other);
  
  // implements Message ----------------------------------------------
  
  CtrlSetnotifyTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlSetnotifyTime& from);
  void MergeFrom(const CtrlSetnotifyTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlSetnotifyTime)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlSetnotifyTime* default_instance_;
};
// -------------------------------------------------------------------

class CtrlResume : public ::google::protobuf::Message {
 public:
  CtrlResume();
  virtual ~CtrlResume();
  
  CtrlResume(const CtrlResume& from);
  
  inline CtrlResume& operator=(const CtrlResume& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlResume& default_instance();
  
  void Swap(CtrlResume* other);
  
  // implements Message ----------------------------------------------
  
  CtrlResume* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlResume& from);
  void MergeFrom(const CtrlResume& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 last_sim_msgID = 1;
  inline bool has_last_sim_msgid() const;
  inline void clear_last_sim_msgid();
  static const int kLastSimMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 last_sim_msgid() const;
  inline void set_last_sim_msgid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.CtrlResume)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 last_sim_msgid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlResume* default_instance_;
};
// -------------------------------------------------------------------

class CtrlScenarioError : public ::google::protobuf::Message {
 public:
  CtrlScenarioError();
  virtual ~CtrlScenarioError();
  
  CtrlScenarioError(const CtrlScenarioError& from);
  
  inline CtrlScenarioError& operator=(const CtrlScenarioError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlScenarioError& default_instance();
  
  void Swap(CtrlScenarioError* other);
  
  // implements Message ----------------------------------------------
  
  CtrlScenarioError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlScenarioError& from);
  void MergeFrom(const CtrlScenarioError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 trackID = 1 [default = -1];
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 1;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // optional int32 vehicleID = 2 [default = -1];
  inline bool has_vehicleid() const;
  inline void clear_vehicleid();
  static const int kVehicleIDFieldNumber = 2;
  inline ::google::protobuf::int32 vehicleid() const;
  inline void set_vehicleid(::google::protobuf::int32 value);
  
  // optional int32 stationID = 3 [default = -1];
  inline bool has_stationid() const;
  inline void clear_stationid();
  static const int kStationIDFieldNumber = 3;
  inline ::google::protobuf::int32 stationid() const;
  inline void set_stationid(::google::protobuf::int32 value);
  
  // optional int32 mergeID = 4 [default = -1];
  inline bool has_mergeid() const;
  inline void clear_mergeid();
  static const int kMergeIDFieldNumber = 4;
  inline ::google::protobuf::int32 mergeid() const;
  inline void set_mergeid(::google::protobuf::int32 value);
  
  // optional int32 switchID = 5 [default = -1];
  inline bool has_switchid() const;
  inline void clear_switchid();
  static const int kSwitchIDFieldNumber = 5;
  inline ::google::protobuf::int32 switchid() const;
  inline void set_switchid(::google::protobuf::int32 value);
  
  // optional string error_message = 6;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 6;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  
  // @@protoc_insertion_point(class_scope:prt.CtrlScenarioError)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  ::google::protobuf::int32 vehicleid_;
  ::google::protobuf::int32 stationid_;
  ::google::protobuf::int32 mergeid_;
  ::google::protobuf::int32 switchid_;
  ::std::string* error_message_;
  static const ::std::string _default_error_message_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CtrlScenarioError* default_instance_;
};
// -------------------------------------------------------------------

class SimGreeting : public ::google::protobuf::Message {
 public:
  SimGreeting();
  virtual ~SimGreeting();
  
  SimGreeting(const SimGreeting& from);
  
  inline SimGreeting& operator=(const SimGreeting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimGreeting& default_instance();
  
  void Swap(SimGreeting* other);
  
  // implements Message ----------------------------------------------
  
  SimGreeting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimGreeting& from);
  void MergeFrom(const SimGreeting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double sim_end_time = 1;
  inline bool has_sim_end_time() const;
  inline void clear_sim_end_time();
  static const int kSimEndTimeFieldNumber = 1;
  inline double sim_end_time() const;
  inline void set_sim_end_time(double value);
  
  // optional string scenario_xml = 2;
  inline bool has_scenario_xml() const;
  inline void clear_scenario_xml();
  static const int kScenarioXmlFieldNumber = 2;
  inline const ::std::string& scenario_xml() const;
  inline void set_scenario_xml(const ::std::string& value);
  inline void set_scenario_xml(const char* value);
  inline void set_scenario_xml(const char* value, size_t size);
  inline ::std::string* mutable_scenario_xml();
  
  // @@protoc_insertion_point(class_scope:prt.SimGreeting)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double sim_end_time_;
  ::std::string* scenario_xml_;
  static const ::std::string _default_scenario_xml_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimGreeting* default_instance_;
};
// -------------------------------------------------------------------

class SimStart : public ::google::protobuf::Message {
 public:
  SimStart();
  virtual ~SimStart();
  
  SimStart(const SimStart& from);
  
  inline SimStart& operator=(const SimStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimStart& default_instance();
  
  void Swap(SimStart* other);
  
  // implements Message ----------------------------------------------
  
  SimStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimStart& from);
  void MergeFrom(const SimStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:prt.SimStart)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimStart* default_instance_;
};
// -------------------------------------------------------------------

class SimEnd : public ::google::protobuf::Message {
 public:
  SimEnd();
  virtual ~SimEnd();
  
  SimEnd(const SimEnd& from);
  
  inline SimEnd& operator=(const SimEnd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEnd& default_instance();
  
  void Swap(SimEnd* other);
  
  // implements Message ----------------------------------------------
  
  SimEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEnd& from);
  void MergeFrom(const SimEnd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double sim_end_time = 1;
  inline bool has_sim_end_time() const;
  inline void clear_sim_end_time();
  static const int kSimEndTimeFieldNumber = 1;
  inline double sim_end_time() const;
  inline void set_sim_end_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEnd)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double sim_end_time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEnd* default_instance_;
};
// -------------------------------------------------------------------

class SimUnimplemented : public ::google::protobuf::Message {
 public:
  SimUnimplemented();
  virtual ~SimUnimplemented();
  
  SimUnimplemented(const SimUnimplemented& from);
  
  inline SimUnimplemented& operator=(const SimUnimplemented& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimUnimplemented& default_instance();
  
  void Swap(SimUnimplemented* other);
  
  // implements Message ----------------------------------------------
  
  SimUnimplemented* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimUnimplemented& from);
  void MergeFrom(const SimUnimplemented& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimUnimplemented)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimUnimplemented* default_instance_;
};
// -------------------------------------------------------------------

class SimCompletePassengersEmbark : public ::google::protobuf::Message {
 public:
  SimCompletePassengersEmbark();
  virtual ~SimCompletePassengersEmbark();
  
  SimCompletePassengersEmbark(const SimCompletePassengersEmbark& from);
  
  inline SimCompletePassengersEmbark& operator=(const SimCompletePassengersEmbark& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCompletePassengersEmbark& default_instance();
  
  void Swap(SimCompletePassengersEmbark* other);
  
  // implements Message ----------------------------------------------
  
  SimCompletePassengersEmbark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimCompletePassengersEmbark& from);
  void MergeFrom(const SimCompletePassengersEmbark& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // optional .prt.CtrlCmdPassengersEmbark cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline const ::prt::CtrlCmdPassengersEmbark& cmd() const;
  inline ::prt::CtrlCmdPassengersEmbark* mutable_cmd();
  
  // @@protoc_insertion_point(class_scope:prt.SimCompletePassengersEmbark)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::CtrlCmdPassengersEmbark* cmd_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimCompletePassengersEmbark* default_instance_;
};
// -------------------------------------------------------------------

class SimCompletePassengersDisembark : public ::google::protobuf::Message {
 public:
  SimCompletePassengersDisembark();
  virtual ~SimCompletePassengersDisembark();
  
  SimCompletePassengersDisembark(const SimCompletePassengersDisembark& from);
  
  inline SimCompletePassengersDisembark& operator=(const SimCompletePassengersDisembark& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCompletePassengersDisembark& default_instance();
  
  void Swap(SimCompletePassengersDisembark* other);
  
  // implements Message ----------------------------------------------
  
  SimCompletePassengersDisembark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimCompletePassengersDisembark& from);
  void MergeFrom(const SimCompletePassengersDisembark& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // optional .prt.CtrlCmdPassengersDisembark cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline const ::prt::CtrlCmdPassengersDisembark& cmd() const;
  inline ::prt::CtrlCmdPassengersDisembark* mutable_cmd();
  
  // @@protoc_insertion_point(class_scope:prt.SimCompletePassengersDisembark)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::CtrlCmdPassengersDisembark* cmd_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimCompletePassengersDisembark* default_instance_;
};
// -------------------------------------------------------------------

class SimCompletePassengerWalk : public ::google::protobuf::Message {
 public:
  SimCompletePassengerWalk();
  virtual ~SimCompletePassengerWalk();
  
  SimCompletePassengerWalk(const SimCompletePassengerWalk& from);
  
  inline SimCompletePassengerWalk& operator=(const SimCompletePassengerWalk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCompletePassengerWalk& default_instance();
  
  void Swap(SimCompletePassengerWalk* other);
  
  // implements Message ----------------------------------------------
  
  SimCompletePassengerWalk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimCompletePassengerWalk& from);
  void MergeFrom(const SimCompletePassengerWalk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // optional .prt.CtrlCmdPassengerWalk cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline const ::prt::CtrlCmdPassengerWalk& cmd() const;
  inline ::prt::CtrlCmdPassengerWalk* mutable_cmd();
  
  // @@protoc_insertion_point(class_scope:prt.SimCompletePassengerWalk)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::CtrlCmdPassengerWalk* cmd_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimCompletePassengerWalk* default_instance_;
};
// -------------------------------------------------------------------

class SimCompleteSwitch : public ::google::protobuf::Message {
 public:
  SimCompleteSwitch();
  virtual ~SimCompleteSwitch();
  
  SimCompleteSwitch(const SimCompleteSwitch& from);
  
  inline SimCompleteSwitch& operator=(const SimCompleteSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCompleteSwitch& default_instance();
  
  void Swap(SimCompleteSwitch* other);
  
  // implements Message ----------------------------------------------
  
  SimCompleteSwitch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimCompleteSwitch& from);
  void MergeFrom(const SimCompleteSwitch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required int32 trackID = 2;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 2;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // required int32 nextID = 3;
  inline bool has_nextid() const;
  inline void clear_nextid();
  static const int kNextIDFieldNumber = 3;
  inline ::google::protobuf::int32 nextid() const;
  inline void set_nextid(::google::protobuf::int32 value);
  
  // required double time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimCompleteSwitch)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 trackid_;
  ::google::protobuf::int32 nextid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimCompleteSwitch* default_instance_;
};
// -------------------------------------------------------------------

class SimCompleteStorageEnter : public ::google::protobuf::Message {
 public:
  SimCompleteStorageEnter();
  virtual ~SimCompleteStorageEnter();
  
  SimCompleteStorageEnter(const SimCompleteStorageEnter& from);
  
  inline SimCompleteStorageEnter& operator=(const SimCompleteStorageEnter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCompleteStorageEnter& default_instance();
  
  void Swap(SimCompleteStorageEnter* other);
  
  // implements Message ----------------------------------------------
  
  SimCompleteStorageEnter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimCompleteStorageEnter& from);
  void MergeFrom(const SimCompleteStorageEnter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // optional .prt.CtrlCmdStorageEnter cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline const ::prt::CtrlCmdStorageEnter& cmd() const;
  inline ::prt::CtrlCmdStorageEnter* mutable_cmd();
  
  // @@protoc_insertion_point(class_scope:prt.SimCompleteStorageEnter)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::CtrlCmdStorageEnter* cmd_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimCompleteStorageEnter* default_instance_;
};
// -------------------------------------------------------------------

class SimCompleteStorageExit : public ::google::protobuf::Message {
 public:
  SimCompleteStorageExit();
  virtual ~SimCompleteStorageExit();
  
  SimCompleteStorageExit(const SimCompleteStorageExit& from);
  
  inline SimCompleteStorageExit& operator=(const SimCompleteStorageExit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCompleteStorageExit& default_instance();
  
  void Swap(SimCompleteStorageExit* other);
  
  // implements Message ----------------------------------------------
  
  SimCompleteStorageExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimCompleteStorageExit& from);
  void MergeFrom(const SimCompleteStorageExit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // optional .prt.CtrlCmdStorageExit cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline const ::prt::CtrlCmdStorageExit& cmd() const;
  inline ::prt::CtrlCmdStorageExit* mutable_cmd();
  
  // required .prt.VehicleStatus v_status = 4;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 4;
  inline const ::prt::VehicleStatus& v_status() const;
  inline ::prt::VehicleStatus* mutable_v_status();
  
  // @@protoc_insertion_point(class_scope:prt.SimCompleteStorageExit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::CtrlCmdStorageExit* cmd_;
  ::prt::VehicleStatus* v_status_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimCompleteStorageExit* default_instance_;
};
// -------------------------------------------------------------------

class SimResponseVehicleStatus : public ::google::protobuf::Message {
 public:
  SimResponseVehicleStatus();
  virtual ~SimResponseVehicleStatus();
  
  SimResponseVehicleStatus(const SimResponseVehicleStatus& from);
  
  inline SimResponseVehicleStatus& operator=(const SimResponseVehicleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimResponseVehicleStatus& default_instance();
  
  void Swap(SimResponseVehicleStatus* other);
  
  // implements Message ----------------------------------------------
  
  SimResponseVehicleStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimResponseVehicleStatus& from);
  void MergeFrom(const SimResponseVehicleStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // required .prt.VehicleStatus v_status = 3;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 3;
  inline const ::prt::VehicleStatus& v_status() const;
  inline ::prt::VehicleStatus* mutable_v_status();
  
  // @@protoc_insertion_point(class_scope:prt.SimResponseVehicleStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::VehicleStatus* v_status_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimResponseVehicleStatus* default_instance_;
};
// -------------------------------------------------------------------

class SimResponseStationStatus : public ::google::protobuf::Message {
 public:
  SimResponseStationStatus();
  virtual ~SimResponseStationStatus();
  
  SimResponseStationStatus(const SimResponseStationStatus& from);
  
  inline SimResponseStationStatus& operator=(const SimResponseStationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimResponseStationStatus& default_instance();
  
  void Swap(SimResponseStationStatus* other);
  
  // implements Message ----------------------------------------------
  
  SimResponseStationStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimResponseStationStatus& from);
  void MergeFrom(const SimResponseStationStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // required .prt.StationStatus s_status = 3;
  inline bool has_s_status() const;
  inline void clear_s_status();
  static const int kSStatusFieldNumber = 3;
  inline const ::prt::StationStatus& s_status() const;
  inline ::prt::StationStatus* mutable_s_status();
  
  // @@protoc_insertion_point(class_scope:prt.SimResponseStationStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::StationStatus* s_status_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimResponseStationStatus* default_instance_;
};
// -------------------------------------------------------------------

class SimResponsePassengerStatus : public ::google::protobuf::Message {
 public:
  SimResponsePassengerStatus();
  virtual ~SimResponsePassengerStatus();
  
  SimResponsePassengerStatus(const SimResponsePassengerStatus& from);
  
  inline SimResponsePassengerStatus& operator=(const SimResponsePassengerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimResponsePassengerStatus& default_instance();
  
  void Swap(SimResponsePassengerStatus* other);
  
  // implements Message ----------------------------------------------
  
  SimResponsePassengerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimResponsePassengerStatus& from);
  void MergeFrom(const SimResponsePassengerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // required .prt.PassengerStatus p_status = 3;
  inline bool has_p_status() const;
  inline void clear_p_status();
  static const int kPStatusFieldNumber = 3;
  inline const ::prt::PassengerStatus& p_status() const;
  inline ::prt::PassengerStatus* mutable_p_status();
  
  // @@protoc_insertion_point(class_scope:prt.SimResponsePassengerStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::PassengerStatus* p_status_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimResponsePassengerStatus* default_instance_;
};
// -------------------------------------------------------------------

class SimResponseSwitchStatus : public ::google::protobuf::Message {
 public:
  SimResponseSwitchStatus();
  virtual ~SimResponseSwitchStatus();
  
  SimResponseSwitchStatus(const SimResponseSwitchStatus& from);
  
  inline SimResponseSwitchStatus& operator=(const SimResponseSwitchStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimResponseSwitchStatus& default_instance();
  
  void Swap(SimResponseSwitchStatus* other);
  
  // implements Message ----------------------------------------------
  
  SimResponseSwitchStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimResponseSwitchStatus& from);
  void MergeFrom(const SimResponseSwitchStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // required .prt.SwitchStatus sw_status = 3;
  inline bool has_sw_status() const;
  inline void clear_sw_status();
  static const int kSwStatusFieldNumber = 3;
  inline const ::prt::SwitchStatus& sw_status() const;
  inline ::prt::SwitchStatus* mutable_sw_status();
  
  // @@protoc_insertion_point(class_scope:prt.SimResponseSwitchStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::SwitchStatus* sw_status_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimResponseSwitchStatus* default_instance_;
};
// -------------------------------------------------------------------

class SimResponseTrackStatus : public ::google::protobuf::Message {
 public:
  SimResponseTrackStatus();
  virtual ~SimResponseTrackStatus();
  
  SimResponseTrackStatus(const SimResponseTrackStatus& from);
  
  inline SimResponseTrackStatus& operator=(const SimResponseTrackStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimResponseTrackStatus& default_instance();
  
  void Swap(SimResponseTrackStatus* other);
  
  // implements Message ----------------------------------------------
  
  SimResponseTrackStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimResponseTrackStatus& from);
  void MergeFrom(const SimResponseTrackStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // required .prt.TrackStatus track_status = 3;
  inline bool has_track_status() const;
  inline void clear_track_status();
  static const int kTrackStatusFieldNumber = 3;
  inline const ::prt::TrackStatus& track_status() const;
  inline ::prt::TrackStatus* mutable_track_status();
  
  // @@protoc_insertion_point(class_scope:prt.SimResponseTrackStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::TrackStatus* track_status_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimResponseTrackStatus* default_instance_;
};
// -------------------------------------------------------------------

class SimResponseTotalStatus : public ::google::protobuf::Message {
 public:
  SimResponseTotalStatus();
  virtual ~SimResponseTotalStatus();
  
  SimResponseTotalStatus(const SimResponseTotalStatus& from);
  
  inline SimResponseTotalStatus& operator=(const SimResponseTotalStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimResponseTotalStatus& default_instance();
  
  void Swap(SimResponseTotalStatus* other);
  
  // implements Message ----------------------------------------------
  
  SimResponseTotalStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimResponseTotalStatus& from);
  void MergeFrom(const SimResponseTotalStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // repeated .prt.VehicleStatus v_statuses = 3;
  inline int v_statuses_size() const;
  inline void clear_v_statuses();
  static const int kVStatusesFieldNumber = 3;
  inline const ::prt::VehicleStatus& v_statuses(int index) const;
  inline ::prt::VehicleStatus* mutable_v_statuses(int index);
  inline ::prt::VehicleStatus* add_v_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::VehicleStatus >&
      v_statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::VehicleStatus >*
      mutable_v_statuses();
  
  // repeated .prt.StationStatus s_statuses = 4;
  inline int s_statuses_size() const;
  inline void clear_s_statuses();
  static const int kSStatusesFieldNumber = 4;
  inline const ::prt::StationStatus& s_statuses(int index) const;
  inline ::prt::StationStatus* mutable_s_statuses(int index);
  inline ::prt::StationStatus* add_s_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::StationStatus >&
      s_statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::StationStatus >*
      mutable_s_statuses();
  
  // repeated .prt.PassengerStatus p_statuses = 5;
  inline int p_statuses_size() const;
  inline void clear_p_statuses();
  static const int kPStatusesFieldNumber = 5;
  inline const ::prt::PassengerStatus& p_statuses(int index) const;
  inline ::prt::PassengerStatus* mutable_p_statuses(int index);
  inline ::prt::PassengerStatus* add_p_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::PassengerStatus >&
      p_statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::PassengerStatus >*
      mutable_p_statuses();
  
  // repeated .prt.SwitchStatus sw_statuses = 6;
  inline int sw_statuses_size() const;
  inline void clear_sw_statuses();
  static const int kSwStatusesFieldNumber = 6;
  inline const ::prt::SwitchStatus& sw_statuses(int index) const;
  inline ::prt::SwitchStatus* mutable_sw_statuses(int index);
  inline ::prt::SwitchStatus* add_sw_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::SwitchStatus >&
      sw_statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::SwitchStatus >*
      mutable_sw_statuses();
  
  // repeated .prt.TrackStatus t_statuses = 7;
  inline int t_statuses_size() const;
  inline void clear_t_statuses();
  static const int kTStatusesFieldNumber = 7;
  inline const ::prt::TrackStatus& t_statuses(int index) const;
  inline ::prt::TrackStatus* mutable_t_statuses(int index);
  inline ::prt::TrackStatus* add_t_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::TrackStatus >&
      t_statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::TrackStatus >*
      mutable_t_statuses();
  
  // @@protoc_insertion_point(class_scope:prt.SimResponseTotalStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::google::protobuf::RepeatedPtrField< ::prt::VehicleStatus > v_statuses_;
  ::google::protobuf::RepeatedPtrField< ::prt::StationStatus > s_statuses_;
  ::google::protobuf::RepeatedPtrField< ::prt::PassengerStatus > p_statuses_;
  ::google::protobuf::RepeatedPtrField< ::prt::SwitchStatus > sw_statuses_;
  ::google::protobuf::RepeatedPtrField< ::prt::TrackStatus > t_statuses_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimResponseTotalStatus* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyVehiclePosition : public ::google::protobuf::Message {
 public:
  SimNotifyVehiclePosition();
  virtual ~SimNotifyVehiclePosition();
  
  SimNotifyVehiclePosition(const SimNotifyVehiclePosition& from);
  
  inline SimNotifyVehiclePosition& operator=(const SimNotifyVehiclePosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyVehiclePosition& default_instance();
  
  void Swap(SimNotifyVehiclePosition* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyVehiclePosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyVehiclePosition& from);
  void MergeFrom(const SimNotifyVehiclePosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // required .prt.VehicleStatus v_status = 3;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 3;
  inline const ::prt::VehicleStatus& v_status() const;
  inline ::prt::VehicleStatus* mutable_v_status();
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyVehiclePosition)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  ::prt::VehicleStatus* v_status_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyVehiclePosition* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyTime : public ::google::protobuf::Message {
 public:
  SimNotifyTime();
  virtual ~SimNotifyTime();
  
  SimNotifyTime(const SimNotifyTime& from);
  
  inline SimNotifyTime& operator=(const SimNotifyTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyTime& default_instance();
  
  void Swap(SimNotifyTime* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyTime& from);
  void MergeFrom(const SimNotifyTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyTime)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyTime* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyVehicleArrive : public ::google::protobuf::Message {
 public:
  SimNotifyVehicleArrive();
  virtual ~SimNotifyVehicleArrive();
  
  SimNotifyVehicleArrive(const SimNotifyVehicleArrive& from);
  
  inline SimNotifyVehicleArrive& operator=(const SimNotifyVehicleArrive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyVehicleArrive& default_instance();
  
  void Swap(SimNotifyVehicleArrive* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyVehicleArrive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyVehicleArrive& from);
  void MergeFrom(const SimNotifyVehicleArrive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trackID = 1;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 1;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // required .prt.VehicleStatus v_status = 2;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 2;
  inline const ::prt::VehicleStatus& v_status() const;
  inline ::prt::VehicleStatus* mutable_v_status();
  
  // required double time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyVehicleArrive)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  ::prt::VehicleStatus* v_status_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyVehicleArrive* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyVehicleExit : public ::google::protobuf::Message {
 public:
  SimNotifyVehicleExit();
  virtual ~SimNotifyVehicleExit();
  
  SimNotifyVehicleExit(const SimNotifyVehicleExit& from);
  
  inline SimNotifyVehicleExit& operator=(const SimNotifyVehicleExit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyVehicleExit& default_instance();
  
  void Swap(SimNotifyVehicleExit* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyVehicleExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyVehicleExit& from);
  void MergeFrom(const SimNotifyVehicleExit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trackID = 1;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 1;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // required .prt.VehicleStatus v_status = 2;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 2;
  inline const ::prt::VehicleStatus& v_status() const;
  inline ::prt::VehicleStatus* mutable_v_status();
  
  // required double time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyVehicleExit)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  ::prt::VehicleStatus* v_status_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyVehicleExit* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyVehicleStopped : public ::google::protobuf::Message {
 public:
  SimNotifyVehicleStopped();
  virtual ~SimNotifyVehicleStopped();
  
  SimNotifyVehicleStopped(const SimNotifyVehicleStopped& from);
  
  inline SimNotifyVehicleStopped& operator=(const SimNotifyVehicleStopped& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyVehicleStopped& default_instance();
  
  void Swap(SimNotifyVehicleStopped* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyVehicleStopped* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyVehicleStopped& from);
  void MergeFrom(const SimNotifyVehicleStopped& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .prt.VehicleStatus v_status = 1;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 1;
  inline const ::prt::VehicleStatus& v_status() const;
  inline ::prt::VehicleStatus* mutable_v_status();
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyVehicleStopped)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::prt::VehicleStatus* v_status_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyVehicleStopped* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyVehicleSpeeding : public ::google::protobuf::Message {
 public:
  SimNotifyVehicleSpeeding();
  virtual ~SimNotifyVehicleSpeeding();
  
  SimNotifyVehicleSpeeding(const SimNotifyVehicleSpeeding& from);
  
  inline SimNotifyVehicleSpeeding& operator=(const SimNotifyVehicleSpeeding& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyVehicleSpeeding& default_instance();
  
  void Swap(SimNotifyVehicleSpeeding* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyVehicleSpeeding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyVehicleSpeeding& from);
  void MergeFrom(const SimNotifyVehicleSpeeding& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .prt.VehicleStatus v_status = 1;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 1;
  inline const ::prt::VehicleStatus& v_status() const;
  inline ::prt::VehicleStatus* mutable_v_status();
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // required float speed_limit = 3;
  inline bool has_speed_limit() const;
  inline void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 3;
  inline float speed_limit() const;
  inline void set_speed_limit(float value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyVehicleSpeeding)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::prt::VehicleStatus* v_status_;
  double time_;
  float speed_limit_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyVehicleSpeeding* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyVehicleCollision : public ::google::protobuf::Message {
 public:
  SimNotifyVehicleCollision();
  virtual ~SimNotifyVehicleCollision();
  
  SimNotifyVehicleCollision(const SimNotifyVehicleCollision& from);
  
  inline SimNotifyVehicleCollision& operator=(const SimNotifyVehicleCollision& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyVehicleCollision& default_instance();
  
  void Swap(SimNotifyVehicleCollision* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyVehicleCollision* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyVehicleCollision& from);
  void MergeFrom(const SimNotifyVehicleCollision& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .prt.VehicleStatus v1_status = 1;
  inline bool has_v1_status() const;
  inline void clear_v1_status();
  static const int kV1StatusFieldNumber = 1;
  inline const ::prt::VehicleStatus& v1_status() const;
  inline ::prt::VehicleStatus* mutable_v1_status();
  
  // required .prt.VehicleStatus v2_status = 2;
  inline bool has_v2_status() const;
  inline void clear_v2_status();
  static const int kV2StatusFieldNumber = 2;
  inline const ::prt::VehicleStatus& v2_status() const;
  inline ::prt::VehicleStatus* mutable_v2_status();
  
  // required double time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyVehicleCollision)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::prt::VehicleStatus* v1_status_;
  ::prt::VehicleStatus* v2_status_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyVehicleCollision* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyVehicleCrash : public ::google::protobuf::Message {
 public:
  SimNotifyVehicleCrash();
  virtual ~SimNotifyVehicleCrash();
  
  SimNotifyVehicleCrash(const SimNotifyVehicleCrash& from);
  
  inline SimNotifyVehicleCrash& operator=(const SimNotifyVehicleCrash& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyVehicleCrash& default_instance();
  
  void Swap(SimNotifyVehicleCrash* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyVehicleCrash* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyVehicleCrash& from);
  void MergeFrom(const SimNotifyVehicleCrash& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 v_status = 1;
  inline bool has_v_status() const;
  inline void clear_v_status();
  static const int kVStatusFieldNumber = 1;
  inline ::google::protobuf::int32 v_status() const;
  inline void set_v_status(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyVehicleCrash)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 v_status_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyVehicleCrash* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyPassengerEmbarkStart : public ::google::protobuf::Message {
 public:
  SimNotifyPassengerEmbarkStart();
  virtual ~SimNotifyPassengerEmbarkStart();
  
  SimNotifyPassengerEmbarkStart(const SimNotifyPassengerEmbarkStart& from);
  
  inline SimNotifyPassengerEmbarkStart& operator=(const SimNotifyPassengerEmbarkStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyPassengerEmbarkStart& default_instance();
  
  void Swap(SimNotifyPassengerEmbarkStart* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyPassengerEmbarkStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyPassengerEmbarkStart& from);
  void MergeFrom(const SimNotifyPassengerEmbarkStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 3;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 3;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 pID = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 4;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // required int32 berthID = 5;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 5;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // required double time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyPassengerEmbarkStart)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 berthid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyPassengerEmbarkStart* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyPassengerEmbarkEnd : public ::google::protobuf::Message {
 public:
  SimNotifyPassengerEmbarkEnd();
  virtual ~SimNotifyPassengerEmbarkEnd();
  
  SimNotifyPassengerEmbarkEnd(const SimNotifyPassengerEmbarkEnd& from);
  
  inline SimNotifyPassengerEmbarkEnd& operator=(const SimNotifyPassengerEmbarkEnd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyPassengerEmbarkEnd& default_instance();
  
  void Swap(SimNotifyPassengerEmbarkEnd* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyPassengerEmbarkEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyPassengerEmbarkEnd& from);
  void MergeFrom(const SimNotifyPassengerEmbarkEnd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 3;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 3;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 pID = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 4;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // required int32 berthID = 5;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 5;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // required double time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyPassengerEmbarkEnd)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 berthid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyPassengerEmbarkEnd* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyPassengerDisembarkStart : public ::google::protobuf::Message {
 public:
  SimNotifyPassengerDisembarkStart();
  virtual ~SimNotifyPassengerDisembarkStart();
  
  SimNotifyPassengerDisembarkStart(const SimNotifyPassengerDisembarkStart& from);
  
  inline SimNotifyPassengerDisembarkStart& operator=(const SimNotifyPassengerDisembarkStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyPassengerDisembarkStart& default_instance();
  
  void Swap(SimNotifyPassengerDisembarkStart* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyPassengerDisembarkStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyPassengerDisembarkStart& from);
  void MergeFrom(const SimNotifyPassengerDisembarkStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 3;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 3;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 pID = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 4;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // required int32 berthID = 5;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 5;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // required double time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyPassengerDisembarkStart)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 berthid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyPassengerDisembarkStart* default_instance_;
};
// -------------------------------------------------------------------

class SimNotifyPassengerDisembarkEnd : public ::google::protobuf::Message {
 public:
  SimNotifyPassengerDisembarkEnd();
  virtual ~SimNotifyPassengerDisembarkEnd();
  
  SimNotifyPassengerDisembarkEnd(const SimNotifyPassengerDisembarkEnd& from);
  
  inline SimNotifyPassengerDisembarkEnd& operator=(const SimNotifyPassengerDisembarkEnd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimNotifyPassengerDisembarkEnd& default_instance();
  
  void Swap(SimNotifyPassengerDisembarkEnd* other);
  
  // implements Message ----------------------------------------------
  
  SimNotifyPassengerDisembarkEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimNotifyPassengerDisembarkEnd& from);
  void MergeFrom(const SimNotifyPassengerDisembarkEnd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 sID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 platformID = 3;
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformIDFieldNumber = 3;
  inline ::google::protobuf::int32 platformid() const;
  inline void set_platformid(::google::protobuf::int32 value);
  
  // required int32 pID = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 4;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // required int32 berthID = 5;
  inline bool has_berthid() const;
  inline void clear_berthid();
  static const int kBerthIDFieldNumber = 5;
  inline ::google::protobuf::int32 berthid() const;
  inline void set_berthid(::google::protobuf::int32 value);
  
  // required double time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimNotifyPassengerDisembarkEnd)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 platformid_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 berthid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimNotifyPassengerDisembarkEnd* default_instance_;
};
// -------------------------------------------------------------------

class SimEventTrackDisabled : public ::google::protobuf::Message {
 public:
  SimEventTrackDisabled();
  virtual ~SimEventTrackDisabled();
  
  SimEventTrackDisabled(const SimEventTrackDisabled& from);
  
  inline SimEventTrackDisabled& operator=(const SimEventTrackDisabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventTrackDisabled& default_instance();
  
  void Swap(SimEventTrackDisabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventTrackDisabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventTrackDisabled& from);
  void MergeFrom(const SimEventTrackDisabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trackID = 1;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 1;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventTrackDisabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventTrackDisabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventTrackReenabled : public ::google::protobuf::Message {
 public:
  SimEventTrackReenabled();
  virtual ~SimEventTrackReenabled();
  
  SimEventTrackReenabled(const SimEventTrackReenabled& from);
  
  inline SimEventTrackReenabled& operator=(const SimEventTrackReenabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventTrackReenabled& default_instance();
  
  void Swap(SimEventTrackReenabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventTrackReenabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventTrackReenabled& from);
  void MergeFrom(const SimEventTrackReenabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trackID = 1;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 1;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventTrackReenabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventTrackReenabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventSwitchDisabled : public ::google::protobuf::Message {
 public:
  SimEventSwitchDisabled();
  virtual ~SimEventSwitchDisabled();
  
  SimEventSwitchDisabled(const SimEventSwitchDisabled& from);
  
  inline SimEventSwitchDisabled& operator=(const SimEventSwitchDisabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventSwitchDisabled& default_instance();
  
  void Swap(SimEventSwitchDisabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventSwitchDisabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventSwitchDisabled& from);
  void MergeFrom(const SimEventSwitchDisabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 swID = 1;
  inline bool has_swid() const;
  inline void clear_swid();
  static const int kSwIDFieldNumber = 1;
  inline ::google::protobuf::int32 swid() const;
  inline void set_swid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventSwitchDisabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 swid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventSwitchDisabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventSwitchReenabled : public ::google::protobuf::Message {
 public:
  SimEventSwitchReenabled();
  virtual ~SimEventSwitchReenabled();
  
  SimEventSwitchReenabled(const SimEventSwitchReenabled& from);
  
  inline SimEventSwitchReenabled& operator=(const SimEventSwitchReenabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventSwitchReenabled& default_instance();
  
  void Swap(SimEventSwitchReenabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventSwitchReenabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventSwitchReenabled& from);
  void MergeFrom(const SimEventSwitchReenabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 swID = 1;
  inline bool has_swid() const;
  inline void clear_swid();
  static const int kSwIDFieldNumber = 1;
  inline ::google::protobuf::int32 swid() const;
  inline void set_swid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventSwitchReenabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 swid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventSwitchReenabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventStationDisabled : public ::google::protobuf::Message {
 public:
  SimEventStationDisabled();
  virtual ~SimEventStationDisabled();
  
  SimEventStationDisabled(const SimEventStationDisabled& from);
  
  inline SimEventStationDisabled& operator=(const SimEventStationDisabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventStationDisabled& default_instance();
  
  void Swap(SimEventStationDisabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventStationDisabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventStationDisabled& from);
  void MergeFrom(const SimEventStationDisabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 sID = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventStationDisabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventStationDisabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventStationReenabled : public ::google::protobuf::Message {
 public:
  SimEventStationReenabled();
  virtual ~SimEventStationReenabled();
  
  SimEventStationReenabled(const SimEventStationReenabled& from);
  
  inline SimEventStationReenabled& operator=(const SimEventStationReenabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventStationReenabled& default_instance();
  
  void Swap(SimEventStationReenabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventStationReenabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventStationReenabled& from);
  void MergeFrom(const SimEventStationReenabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 sID = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventStationReenabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventStationReenabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventVehicleDisabled : public ::google::protobuf::Message {
 public:
  SimEventVehicleDisabled();
  virtual ~SimEventVehicleDisabled();
  
  SimEventVehicleDisabled(const SimEventVehicleDisabled& from);
  
  inline SimEventVehicleDisabled& operator=(const SimEventVehicleDisabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventVehicleDisabled& default_instance();
  
  void Swap(SimEventVehicleDisabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventVehicleDisabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventVehicleDisabled& from);
  void MergeFrom(const SimEventVehicleDisabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventVehicleDisabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventVehicleDisabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventVehicleReenabled : public ::google::protobuf::Message {
 public:
  SimEventVehicleReenabled();
  virtual ~SimEventVehicleReenabled();
  
  SimEventVehicleReenabled(const SimEventVehicleReenabled& from);
  
  inline SimEventVehicleReenabled& operator=(const SimEventVehicleReenabled& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventVehicleReenabled& default_instance();
  
  void Swap(SimEventVehicleReenabled* other);
  
  // implements Message ----------------------------------------------
  
  SimEventVehicleReenabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventVehicleReenabled& from);
  void MergeFrom(const SimEventVehicleReenabled& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventVehicleReenabled)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventVehicleReenabled* default_instance_;
};
// -------------------------------------------------------------------

class SimEventPassengerCreated : public ::google::protobuf::Message {
 public:
  SimEventPassengerCreated();
  virtual ~SimEventPassengerCreated();
  
  SimEventPassengerCreated(const SimEventPassengerCreated& from);
  
  inline SimEventPassengerCreated& operator=(const SimEventPassengerCreated& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventPassengerCreated& default_instance();
  
  void Swap(SimEventPassengerCreated* other);
  
  // implements Message ----------------------------------------------
  
  SimEventPassengerCreated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventPassengerCreated& from);
  void MergeFrom(const SimEventPassengerCreated& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .prt.PassengerStatus p_status = 1;
  inline bool has_p_status() const;
  inline void clear_p_status();
  static const int kPStatusFieldNumber = 1;
  inline const ::prt::PassengerStatus& p_status() const;
  inline ::prt::PassengerStatus* mutable_p_status();
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventPassengerCreated)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::prt::PassengerStatus* p_status_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventPassengerCreated* default_instance_;
};
// -------------------------------------------------------------------

class SimEventPassengerChangedest : public ::google::protobuf::Message {
 public:
  SimEventPassengerChangedest();
  virtual ~SimEventPassengerChangedest();
  
  SimEventPassengerChangedest(const SimEventPassengerChangedest& from);
  
  inline SimEventPassengerChangedest& operator=(const SimEventPassengerChangedest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimEventPassengerChangedest& default_instance();
  
  void Swap(SimEventPassengerChangedest* other);
  
  // implements Message ----------------------------------------------
  
  SimEventPassengerChangedest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimEventPassengerChangedest& from);
  void MergeFrom(const SimEventPassengerChangedest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pID = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimEventPassengerChangedest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 pid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimEventPassengerChangedest* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgHdrInvalidSeparator : public ::google::protobuf::Message {
 public:
  SimMsgHdrInvalidSeparator();
  virtual ~SimMsgHdrInvalidSeparator();
  
  SimMsgHdrInvalidSeparator(const SimMsgHdrInvalidSeparator& from);
  
  inline SimMsgHdrInvalidSeparator& operator=(const SimMsgHdrInvalidSeparator& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgHdrInvalidSeparator& default_instance();
  
  void Swap(SimMsgHdrInvalidSeparator* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgHdrInvalidSeparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgHdrInvalidSeparator& from);
  void MergeFrom(const SimMsgHdrInvalidSeparator& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required int32 msg_sep = 2;
  inline bool has_msg_sep() const;
  inline void clear_msg_sep();
  static const int kMsgSepFieldNumber = 2;
  inline ::google::protobuf::int32 msg_sep() const;
  inline void set_msg_sep(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgHdrInvalidSeparator)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 msg_sep_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgHdrInvalidSeparator* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgHdrInvalidType : public ::google::protobuf::Message {
 public:
  SimMsgHdrInvalidType();
  virtual ~SimMsgHdrInvalidType();
  
  SimMsgHdrInvalidType(const SimMsgHdrInvalidType& from);
  
  inline SimMsgHdrInvalidType& operator=(const SimMsgHdrInvalidType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgHdrInvalidType& default_instance();
  
  void Swap(SimMsgHdrInvalidType* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgHdrInvalidType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgHdrInvalidType& from);
  void MergeFrom(const SimMsgHdrInvalidType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required int32 msg_type = 2;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  inline ::google::protobuf::int32 msg_type() const;
  inline void set_msg_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgHdrInvalidType)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 msg_type_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgHdrInvalidType* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgHdrInvalidId : public ::google::protobuf::Message {
 public:
  SimMsgHdrInvalidId();
  virtual ~SimMsgHdrInvalidId();
  
  SimMsgHdrInvalidId(const SimMsgHdrInvalidId& from);
  
  inline SimMsgHdrInvalidId& operator=(const SimMsgHdrInvalidId& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgHdrInvalidId& default_instance();
  
  void Swap(SimMsgHdrInvalidId* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgHdrInvalidId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgHdrInvalidId& from);
  void MergeFrom(const SimMsgHdrInvalidId& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgHdrInvalidId)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgHdrInvalidId* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgHdrInvalidTime : public ::google::protobuf::Message {
 public:
  SimMsgHdrInvalidTime();
  virtual ~SimMsgHdrInvalidTime();
  
  SimMsgHdrInvalidTime(const SimMsgHdrInvalidTime& from);
  
  inline SimMsgHdrInvalidTime& operator=(const SimMsgHdrInvalidTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgHdrInvalidTime& default_instance();
  
  void Swap(SimMsgHdrInvalidTime* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgHdrInvalidTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgHdrInvalidTime& from);
  void MergeFrom(const SimMsgHdrInvalidTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required int32 msg_time = 2;
  inline bool has_msg_time() const;
  inline void clear_msg_time();
  static const int kMsgTimeFieldNumber = 2;
  inline ::google::protobuf::int32 msg_time() const;
  inline void set_msg_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgHdrInvalidTime)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 msg_time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgHdrInvalidTime* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgHdrInvalidSize : public ::google::protobuf::Message {
 public:
  SimMsgHdrInvalidSize();
  virtual ~SimMsgHdrInvalidSize();
  
  SimMsgHdrInvalidSize(const SimMsgHdrInvalidSize& from);
  
  inline SimMsgHdrInvalidSize& operator=(const SimMsgHdrInvalidSize& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgHdrInvalidSize& default_instance();
  
  void Swap(SimMsgHdrInvalidSize* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgHdrInvalidSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgHdrInvalidSize& from);
  void MergeFrom(const SimMsgHdrInvalidSize& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required int32 msg_size = 2;
  inline bool has_msg_size() const;
  inline void clear_msg_size();
  static const int kMsgSizeFieldNumber = 2;
  inline ::google::protobuf::int32 msg_size() const;
  inline void set_msg_size(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgHdrInvalidSize)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 msg_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgHdrInvalidSize* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgBodyInvalid : public ::google::protobuf::Message {
 public:
  SimMsgBodyInvalid();
  virtual ~SimMsgBodyInvalid();
  
  SimMsgBodyInvalid(const SimMsgBodyInvalid& from);
  
  inline SimMsgBodyInvalid& operator=(const SimMsgBodyInvalid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgBodyInvalid& default_instance();
  
  void Swap(SimMsgBodyInvalid* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgBodyInvalid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgBodyInvalid& from);
  void MergeFrom(const SimMsgBodyInvalid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgBodyInvalid)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgBodyInvalid* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgBodyInvalidTime : public ::google::protobuf::Message {
 public:
  SimMsgBodyInvalidTime();
  virtual ~SimMsgBodyInvalidTime();
  
  SimMsgBodyInvalidTime(const SimMsgBodyInvalidTime& from);
  
  inline SimMsgBodyInvalidTime& operator=(const SimMsgBodyInvalidTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgBodyInvalidTime& default_instance();
  
  void Swap(SimMsgBodyInvalidTime* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgBodyInvalidTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgBodyInvalidTime& from);
  void MergeFrom(const SimMsgBodyInvalidTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required double time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline double time() const;
  inline void set_time(double value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgBodyInvalidTime)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  double time_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgBodyInvalidTime* default_instance_;
};
// -------------------------------------------------------------------

class SimMsgBodyInvalidId : public ::google::protobuf::Message {
 public:
  SimMsgBodyInvalidId();
  virtual ~SimMsgBodyInvalidId();
  
  SimMsgBodyInvalidId(const SimMsgBodyInvalidId& from);
  
  inline SimMsgBodyInvalidId& operator=(const SimMsgBodyInvalidId& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimMsgBodyInvalidId& default_instance();
  
  void Swap(SimMsgBodyInvalidId* other);
  
  // implements Message ----------------------------------------------
  
  SimMsgBodyInvalidId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimMsgBodyInvalidId& from);
  void MergeFrom(const SimMsgBodyInvalidId& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // required .prt.LocationType id_type = 2;
  inline bool has_id_type() const;
  inline void clear_id_type();
  static const int kIdTypeFieldNumber = 2;
  inline prt::LocationType id_type() const;
  inline void set_id_type(prt::LocationType value);
  
  // required int32 ID = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.SimMsgBodyInvalidId)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 msgid_;
  int id_type_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimMsgBodyInvalidId* default_instance_;
};
// -------------------------------------------------------------------

class VehicleStatus : public ::google::protobuf::Message {
 public:
  VehicleStatus();
  virtual ~VehicleStatus();
  
  VehicleStatus(const VehicleStatus& from);
  
  inline VehicleStatus& operator=(const VehicleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleStatus& default_instance();
  
  void Swap(VehicleStatus* other);
  
  // implements Message ----------------------------------------------
  
  VehicleStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleStatus& from);
  void MergeFrom(const VehicleStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 nose_locID = 3;
  inline bool has_nose_locid() const;
  inline void clear_nose_locid();
  static const int kNoseLocIDFieldNumber = 3;
  inline ::google::protobuf::int32 nose_locid() const;
  inline void set_nose_locid(::google::protobuf::int32 value);
  
  // required float nose_pos = 4;
  inline bool has_nose_pos() const;
  inline void clear_nose_pos();
  static const int kNosePosFieldNumber = 4;
  inline float nose_pos() const;
  inline void set_nose_pos(float value);
  
  // required int32 tail_locID = 6;
  inline bool has_tail_locid() const;
  inline void clear_tail_locid();
  static const int kTailLocIDFieldNumber = 6;
  inline ::google::protobuf::int32 tail_locid() const;
  inline void set_tail_locid(::google::protobuf::int32 value);
  
  // required float tail_pos = 7;
  inline bool has_tail_pos() const;
  inline void clear_tail_pos();
  static const int kTailPosFieldNumber = 7;
  inline float tail_pos() const;
  inline void set_tail_pos(float value);
  
  // required float vel = 8;
  inline bool has_vel() const;
  inline void clear_vel();
  static const int kVelFieldNumber = 8;
  inline float vel() const;
  inline void set_vel(float value);
  
  // required float accel = 9;
  inline bool has_accel() const;
  inline void clear_accel();
  static const int kAccelFieldNumber = 9;
  inline float accel() const;
  inline void set_accel(float value);
  
  // repeated int32 passengerIDs = 10 [packed = true];
  inline int passengerids_size() const;
  inline void clear_passengerids();
  static const int kPassengerIDsFieldNumber = 10;
  inline ::google::protobuf::int32 passengerids(int index) const;
  inline void set_passengerids(int index, ::google::protobuf::int32 value);
  inline void add_passengerids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      passengerids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_passengerids();
  
  // optional int32 lvID = 11 [default = -1];
  inline bool has_lvid() const;
  inline void clear_lvid();
  static const int kLvIDFieldNumber = 11;
  inline ::google::protobuf::int32 lvid() const;
  inline void set_lvid(::google::protobuf::int32 value);
  
  // optional float lv_distance = 12;
  inline bool has_lv_distance() const;
  inline void clear_lv_distance();
  static const int kLvDistanceFieldNumber = 12;
  inline float lv_distance() const;
  inline void set_lv_distance(float value);
  
  // @@protoc_insertion_point(class_scope:prt.VehicleStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 nose_locid_;
  float nose_pos_;
  ::google::protobuf::int32 tail_locid_;
  float tail_pos_;
  float vel_;
  float accel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > passengerids_;
  mutable int _passengerids_cached_byte_size_;
  ::google::protobuf::int32 lvid_;
  float lv_distance_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VehicleStatus* default_instance_;
};
// -------------------------------------------------------------------

class StationStatus : public ::google::protobuf::Message {
 public:
  StationStatus();
  virtual ~StationStatus();
  
  StationStatus(const StationStatus& from);
  
  inline StationStatus& operator=(const StationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StationStatus& default_instance();
  
  void Swap(StationStatus* other);
  
  // implements Message ----------------------------------------------
  
  StationStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationStatus& from);
  void MergeFrom(const StationStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 sID = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  
  // repeated .prt.PlatformStatus platform_status = 3;
  inline int platform_status_size() const;
  inline void clear_platform_status();
  static const int kPlatformStatusFieldNumber = 3;
  inline const ::prt::PlatformStatus& platform_status(int index) const;
  inline ::prt::PlatformStatus* mutable_platform_status(int index);
  inline ::prt::PlatformStatus* add_platform_status();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::PlatformStatus >&
      platform_status() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::PlatformStatus >*
      mutable_platform_status();
  
  // repeated int32 pID = 4 [packed = true];
  inline int pid_size() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 4;
  inline ::google::protobuf::int32 pid(int index) const;
  inline void set_pid(int index, ::google::protobuf::int32 value);
  inline void add_pid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pid();
  
  // required int32 v_adv_time = 5;
  inline bool has_v_adv_time() const;
  inline void clear_v_adv_time();
  static const int kVAdvTimeFieldNumber = 5;
  inline ::google::protobuf::int32 v_adv_time() const;
  inline void set_v_adv_time(::google::protobuf::int32 value);
  
  // required .prt.StationPolicy policy = 6;
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 6;
  inline prt::StationPolicy policy() const;
  inline void set_policy(prt::StationPolicy value);
  
  // @@protoc_insertion_point(class_scope:prt.StationStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sid_;
  ::std::string* label_;
  static const ::std::string _default_label_;
  ::google::protobuf::RepeatedPtrField< ::prt::PlatformStatus > platform_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pid_;
  mutable int _pid_cached_byte_size_;
  ::google::protobuf::int32 v_adv_time_;
  int policy_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StationStatus* default_instance_;
};
// -------------------------------------------------------------------

class PlatformStatus : public ::google::protobuf::Message {
 public:
  PlatformStatus();
  virtual ~PlatformStatus();
  
  PlatformStatus(const PlatformStatus& from);
  
  inline PlatformStatus& operator=(const PlatformStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlatformStatus& default_instance();
  
  void Swap(PlatformStatus* other);
  
  // implements Message ----------------------------------------------
  
  PlatformStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlatformStatus& from);
  void MergeFrom(const PlatformStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 platID = 1;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatIDFieldNumber = 1;
  inline ::google::protobuf::int32 platid() const;
  inline void set_platid(::google::protobuf::int32 value);
  
  // required int32 trackID = 2;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 2;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // required bool unloading = 3;
  inline bool has_unloading() const;
  inline void clear_unloading();
  static const int kUnloadingFieldNumber = 3;
  inline bool unloading() const;
  inline void set_unloading(bool value);
  
  // required bool loading = 4;
  inline bool has_loading() const;
  inline void clear_loading();
  static const int kLoadingFieldNumber = 4;
  inline bool loading() const;
  inline void set_loading(bool value);
  
  // repeated .prt.BerthStatus berths = 5;
  inline int berths_size() const;
  inline void clear_berths();
  static const int kBerthsFieldNumber = 5;
  inline const ::prt::BerthStatus& berths(int index) const;
  inline ::prt::BerthStatus* mutable_berths(int index);
  inline ::prt::BerthStatus* add_berths();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::BerthStatus >&
      berths() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::BerthStatus >*
      mutable_berths();
  
  // @@protoc_insertion_point(class_scope:prt.PlatformStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 platid_;
  ::google::protobuf::int32 trackid_;
  bool unloading_;
  bool loading_;
  ::google::protobuf::RepeatedPtrField< ::prt::BerthStatus > berths_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PlatformStatus* default_instance_;
};
// -------------------------------------------------------------------

class BerthStatus : public ::google::protobuf::Message {
 public:
  BerthStatus();
  virtual ~BerthStatus();
  
  BerthStatus(const BerthStatus& from);
  
  inline BerthStatus& operator=(const BerthStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BerthStatus& default_instance();
  
  void Swap(BerthStatus* other);
  
  // implements Message ----------------------------------------------
  
  BerthStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BerthStatus& from);
  void MergeFrom(const BerthStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 bID = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBIDFieldNumber = 1;
  inline ::google::protobuf::int32 bid() const;
  inline void set_bid(::google::protobuf::int32 value);
  
  // required int32 vID = 2;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 2;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required bool busy = 3;
  inline bool has_busy() const;
  inline void clear_busy();
  static const int kBusyFieldNumber = 3;
  inline bool busy() const;
  inline void set_busy(bool value);
  
  // @@protoc_insertion_point(class_scope:prt.BerthStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 bid_;
  ::google::protobuf::int32 vid_;
  bool busy_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BerthStatus* default_instance_;
};
// -------------------------------------------------------------------

class PassengerStatus : public ::google::protobuf::Message {
 public:
  PassengerStatus();
  virtual ~PassengerStatus();
  
  PassengerStatus(const PassengerStatus& from);
  
  inline PassengerStatus& operator=(const PassengerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PassengerStatus& default_instance();
  
  void Swap(PassengerStatus* other);
  
  // implements Message ----------------------------------------------
  
  PassengerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassengerStatus& from);
  void MergeFrom(const PassengerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pID = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // required .prt.LocationType loc_type = 3;
  inline bool has_loc_type() const;
  inline void clear_loc_type();
  static const int kLocTypeFieldNumber = 3;
  inline prt::LocationType loc_type() const;
  inline void set_loc_type(prt::LocationType value);
  
  // required int32 locID = 4;
  inline bool has_locid() const;
  inline void clear_locid();
  static const int kLocIDFieldNumber = 4;
  inline ::google::protobuf::int32 locid() const;
  inline void set_locid(::google::protobuf::int32 value);
  
  // required int32 src_stationID = 5;
  inline bool has_src_stationid() const;
  inline void clear_src_stationid();
  static const int kSrcStationIDFieldNumber = 5;
  inline ::google::protobuf::int32 src_stationid() const;
  inline void set_src_stationid(::google::protobuf::int32 value);
  
  // required int32 dest_stationID = 6;
  inline bool has_dest_stationid() const;
  inline void clear_dest_stationid();
  static const int kDestStationIDFieldNumber = 6;
  inline ::google::protobuf::int32 dest_stationid() const;
  inline void set_dest_stationid(::google::protobuf::int32 value);
  
  // required double creation_time = 7;
  inline bool has_creation_time() const;
  inline void clear_creation_time();
  static const int kCreationTimeFieldNumber = 7;
  inline double creation_time() const;
  inline void set_creation_time(double value);
  
  // required int32 mass = 11;
  inline bool has_mass() const;
  inline void clear_mass();
  static const int kMassFieldNumber = 11;
  inline ::google::protobuf::int32 mass() const;
  inline void set_mass(::google::protobuf::int32 value);
  
  // required bool trip_success = 13;
  inline bool has_trip_success() const;
  inline void clear_trip_success();
  static const int kTripSuccessFieldNumber = 13;
  inline bool trip_success() const;
  inline void set_trip_success(bool value);
  
  // @@protoc_insertion_point(class_scope:prt.PassengerStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 pid_;
  int loc_type_;
  ::google::protobuf::int32 locid_;
  ::google::protobuf::int32 src_stationid_;
  ::google::protobuf::int32 dest_stationid_;
  double creation_time_;
  ::google::protobuf::int32 mass_;
  bool trip_success_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PassengerStatus* default_instance_;
};
// -------------------------------------------------------------------

class RoutingEntry : public ::google::protobuf::Message {
 public:
  RoutingEntry();
  virtual ~RoutingEntry();
  
  RoutingEntry(const RoutingEntry& from);
  
  inline RoutingEntry& operator=(const RoutingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingEntry& default_instance();
  
  void Swap(RoutingEntry* other);
  
  // implements Message ----------------------------------------------
  
  RoutingEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoutingEntry& from);
  void MergeFrom(const RoutingEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vID = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);
  
  // required int32 trackID = 2;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 2;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // optional int32 msgID = 3;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 3;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.RoutingEntry)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 trackid_;
  ::google::protobuf::int32 msgid_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RoutingEntry* default_instance_;
};
// -------------------------------------------------------------------

class SwitchStatus : public ::google::protobuf::Message {
 public:
  SwitchStatus();
  virtual ~SwitchStatus();
  
  SwitchStatus(const SwitchStatus& from);
  
  inline SwitchStatus& operator=(const SwitchStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SwitchStatus& default_instance();
  
  void Swap(SwitchStatus* other);
  
  // implements Message ----------------------------------------------
  
  SwitchStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SwitchStatus& from);
  void MergeFrom(const SwitchStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 swID = 1;
  inline bool has_swid() const;
  inline void clear_swid();
  static const int kSwIDFieldNumber = 1;
  inline ::google::protobuf::int32 swid() const;
  inline void set_swid(::google::protobuf::int32 value);
  
  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  
  // repeated .prt.RoutingEntry entry = 3;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 3;
  inline const ::prt::RoutingEntry& entry(int index) const;
  inline ::prt::RoutingEntry* mutable_entry(int index);
  inline ::prt::RoutingEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::prt::RoutingEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::prt::RoutingEntry >*
      mutable_entry();
  
  // @@protoc_insertion_point(class_scope:prt.SwitchStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 swid_;
  ::std::string* label_;
  static const ::std::string _default_label_;
  ::google::protobuf::RepeatedPtrField< ::prt::RoutingEntry > entry_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SwitchStatus* default_instance_;
};
// -------------------------------------------------------------------

class TrackStatus : public ::google::protobuf::Message {
 public:
  TrackStatus();
  virtual ~TrackStatus();
  
  TrackStatus(const TrackStatus& from);
  
  inline TrackStatus& operator=(const TrackStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackStatus& default_instance();
  
  void Swap(TrackStatus* other);
  
  // implements Message ----------------------------------------------
  
  TrackStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackStatus& from);
  void MergeFrom(const TrackStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trackID = 1;
  inline bool has_trackid() const;
  inline void clear_trackid();
  static const int kTrackIDFieldNumber = 1;
  inline ::google::protobuf::int32 trackid() const;
  inline void set_trackid(::google::protobuf::int32 value);
  
  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  
  // required int32 max_speed = 3;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 3;
  inline ::google::protobuf::int32 max_speed() const;
  inline void set_max_speed(::google::protobuf::int32 value);
  
  // required int32 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);
  
  // repeated int32 vID = 5 [packed = true];
  inline int vid_size() const;
  inline void clear_vid();
  static const int kVIDFieldNumber = 5;
  inline ::google::protobuf::int32 vid(int index) const;
  inline void set_vid(int index, ::google::protobuf::int32 value);
  inline void add_vid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vid();
  
  // required int32 next = 6;
  inline bool has_next() const;
  inline void clear_next();
  static const int kNextFieldNumber = 6;
  inline ::google::protobuf::int32 next() const;
  inline void set_next(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:prt.TrackStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 trackid_;
  ::std::string* label_;
  static const ::std::string _default_label_;
  ::google::protobuf::int32 max_speed_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vid_;
  mutable int _vid_cached_byte_size_;
  ::google::protobuf::int32 next_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TrackStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// PolyCoeffs

// repeated double coeffs = 1 [packed = true];
inline int PolyCoeffs::coeffs_size() const {
  return coeffs_.size();
}
inline void PolyCoeffs::clear_coeffs() {
  coeffs_.Clear();
}
inline double PolyCoeffs::coeffs(int index) const {
  return coeffs_.Get(index);
}
inline void PolyCoeffs::set_coeffs(int index, double value) {
  coeffs_.Set(index, value);
}
inline void PolyCoeffs::add_coeffs(double value) {
  coeffs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PolyCoeffs::coeffs() const {
  return coeffs_;
}
inline ::google::protobuf::RepeatedField< double >*
PolyCoeffs::mutable_coeffs() {
  return &coeffs_;
}

// -------------------------------------------------------------------

// Spline

// repeated .prt.PolyCoeffs polys = 1;
inline int Spline::polys_size() const {
  return polys_.size();
}
inline void Spline::clear_polys() {
  polys_.Clear();
}
inline const ::prt::PolyCoeffs& Spline::polys(int index) const {
  return polys_.Get(index);
}
inline ::prt::PolyCoeffs* Spline::mutable_polys(int index) {
  return polys_.Mutable(index);
}
inline ::prt::PolyCoeffs* Spline::add_polys() {
  return polys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::PolyCoeffs >&
Spline::polys() const {
  return polys_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::PolyCoeffs >*
Spline::mutable_polys() {
  return &polys_;
}

// repeated double times = 2 [packed = true];
inline int Spline::times_size() const {
  return times_.size();
}
inline void Spline::clear_times() {
  times_.Clear();
}
inline double Spline::times(int index) const {
  return times_.Get(index);
}
inline void Spline::set_times(int index, double value) {
  times_.Set(index, value);
}
inline void Spline::add_times(double value) {
  times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Spline::times() const {
  return times_;
}
inline ::google::protobuf::RepeatedField< double >*
Spline::mutable_times() {
  return &times_;
}

// -------------------------------------------------------------------

// CtrlCmdVehicleTrajectory

// required int32 vID = 1;
inline bool CtrlCmdVehicleTrajectory::has_vid() const {
  return _has_bit(0);
}
inline void CtrlCmdVehicleTrajectory::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdVehicleTrajectory::vid() const {
  return vid_;
}
inline void CtrlCmdVehicleTrajectory::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required .prt.Spline spline = 2;
inline bool CtrlCmdVehicleTrajectory::has_spline() const {
  return _has_bit(1);
}
inline void CtrlCmdVehicleTrajectory::clear_spline() {
  if (spline_ != NULL) spline_->::prt::Spline::Clear();
  _clear_bit(1);
}
inline const ::prt::Spline& CtrlCmdVehicleTrajectory::spline() const {
  return spline_ != NULL ? *spline_ : *default_instance_->spline_;
}
inline ::prt::Spline* CtrlCmdVehicleTrajectory::mutable_spline() {
  _set_bit(1);
  if (spline_ == NULL) spline_ = new ::prt::Spline;
  return spline_;
}

// -------------------------------------------------------------------

// CtrlCmdVehicleItinerary

// required int32 vID = 1;
inline bool CtrlCmdVehicleItinerary::has_vid() const {
  return _has_bit(0);
}
inline void CtrlCmdVehicleItinerary::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdVehicleItinerary::vid() const {
  return vid_;
}
inline void CtrlCmdVehicleItinerary::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// repeated int32 trackIDs = 2 [packed = true];
inline int CtrlCmdVehicleItinerary::trackids_size() const {
  return trackids_.size();
}
inline void CtrlCmdVehicleItinerary::clear_trackids() {
  trackids_.Clear();
}
inline ::google::protobuf::int32 CtrlCmdVehicleItinerary::trackids(int index) const {
  return trackids_.Get(index);
}
inline void CtrlCmdVehicleItinerary::set_trackids(int index, ::google::protobuf::int32 value) {
  trackids_.Set(index, value);
}
inline void CtrlCmdVehicleItinerary::add_trackids(::google::protobuf::int32 value) {
  trackids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CtrlCmdVehicleItinerary::trackids() const {
  return trackids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CtrlCmdVehicleItinerary::mutable_trackids() {
  return &trackids_;
}

// optional bool clear = 3;
inline bool CtrlCmdVehicleItinerary::has_clear() const {
  return _has_bit(2);
}
inline void CtrlCmdVehicleItinerary::clear_clear() {
  clear_ = false;
  _clear_bit(2);
}
inline bool CtrlCmdVehicleItinerary::clear() const {
  return clear_;
}
inline void CtrlCmdVehicleItinerary::set_clear(bool value) {
  _set_bit(2);
  clear_ = value;
}

// -------------------------------------------------------------------

// CtrlCmdPassengersEmbark

// required int32 vID = 1;
inline bool CtrlCmdPassengersEmbark::has_vid() const {
  return _has_bit(0);
}
inline void CtrlCmdPassengersEmbark::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdPassengersEmbark::vid() const {
  return vid_;
}
inline void CtrlCmdPassengersEmbark::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 sID = 2;
inline bool CtrlCmdPassengersEmbark::has_sid() const {
  return _has_bit(1);
}
inline void CtrlCmdPassengersEmbark::clear_sid() {
  sid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CtrlCmdPassengersEmbark::sid() const {
  return sid_;
}
inline void CtrlCmdPassengersEmbark::set_sid(::google::protobuf::int32 value) {
  _set_bit(1);
  sid_ = value;
}

// required int32 platformID = 3;
inline bool CtrlCmdPassengersEmbark::has_platformid() const {
  return _has_bit(2);
}
inline void CtrlCmdPassengersEmbark::clear_platformid() {
  platformid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CtrlCmdPassengersEmbark::platformid() const {
  return platformid_;
}
inline void CtrlCmdPassengersEmbark::set_platformid(::google::protobuf::int32 value) {
  _set_bit(2);
  platformid_ = value;
}

// required int32 berthID = 4;
inline bool CtrlCmdPassengersEmbark::has_berthid() const {
  return _has_bit(3);
}
inline void CtrlCmdPassengersEmbark::clear_berthid() {
  berthid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 CtrlCmdPassengersEmbark::berthid() const {
  return berthid_;
}
inline void CtrlCmdPassengersEmbark::set_berthid(::google::protobuf::int32 value) {
  _set_bit(3);
  berthid_ = value;
}

// repeated int32 passengerIDs = 5 [packed = true];
inline int CtrlCmdPassengersEmbark::passengerids_size() const {
  return passengerids_.size();
}
inline void CtrlCmdPassengersEmbark::clear_passengerids() {
  passengerids_.Clear();
}
inline ::google::protobuf::int32 CtrlCmdPassengersEmbark::passengerids(int index) const {
  return passengerids_.Get(index);
}
inline void CtrlCmdPassengersEmbark::set_passengerids(int index, ::google::protobuf::int32 value) {
  passengerids_.Set(index, value);
}
inline void CtrlCmdPassengersEmbark::add_passengerids(::google::protobuf::int32 value) {
  passengerids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CtrlCmdPassengersEmbark::passengerids() const {
  return passengerids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CtrlCmdPassengersEmbark::mutable_passengerids() {
  return &passengerids_;
}

// -------------------------------------------------------------------

// CtrlCmdPassengersDisembark

// required int32 vID = 1;
inline bool CtrlCmdPassengersDisembark::has_vid() const {
  return _has_bit(0);
}
inline void CtrlCmdPassengersDisembark::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdPassengersDisembark::vid() const {
  return vid_;
}
inline void CtrlCmdPassengersDisembark::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 sID = 2;
inline bool CtrlCmdPassengersDisembark::has_sid() const {
  return _has_bit(1);
}
inline void CtrlCmdPassengersDisembark::clear_sid() {
  sid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CtrlCmdPassengersDisembark::sid() const {
  return sid_;
}
inline void CtrlCmdPassengersDisembark::set_sid(::google::protobuf::int32 value) {
  _set_bit(1);
  sid_ = value;
}

// required int32 platformID = 3;
inline bool CtrlCmdPassengersDisembark::has_platformid() const {
  return _has_bit(2);
}
inline void CtrlCmdPassengersDisembark::clear_platformid() {
  platformid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CtrlCmdPassengersDisembark::platformid() const {
  return platformid_;
}
inline void CtrlCmdPassengersDisembark::set_platformid(::google::protobuf::int32 value) {
  _set_bit(2);
  platformid_ = value;
}

// required int32 berthID = 4;
inline bool CtrlCmdPassengersDisembark::has_berthid() const {
  return _has_bit(3);
}
inline void CtrlCmdPassengersDisembark::clear_berthid() {
  berthid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 CtrlCmdPassengersDisembark::berthid() const {
  return berthid_;
}
inline void CtrlCmdPassengersDisembark::set_berthid(::google::protobuf::int32 value) {
  _set_bit(3);
  berthid_ = value;
}

// repeated int32 passengerIDs = 5 [packed = true];
inline int CtrlCmdPassengersDisembark::passengerids_size() const {
  return passengerids_.size();
}
inline void CtrlCmdPassengersDisembark::clear_passengerids() {
  passengerids_.Clear();
}
inline ::google::protobuf::int32 CtrlCmdPassengersDisembark::passengerids(int index) const {
  return passengerids_.Get(index);
}
inline void CtrlCmdPassengersDisembark::set_passengerids(int index, ::google::protobuf::int32 value) {
  passengerids_.Set(index, value);
}
inline void CtrlCmdPassengersDisembark::add_passengerids(::google::protobuf::int32 value) {
  passengerids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CtrlCmdPassengersDisembark::passengerids() const {
  return passengerids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CtrlCmdPassengersDisembark::mutable_passengerids() {
  return &passengerids_;
}

// -------------------------------------------------------------------

// CtrlCmdPassengerWalk

// required int32 passengerID = 1;
inline bool CtrlCmdPassengerWalk::has_passengerid() const {
  return _has_bit(0);
}
inline void CtrlCmdPassengerWalk::clear_passengerid() {
  passengerid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdPassengerWalk::passengerid() const {
  return passengerid_;
}
inline void CtrlCmdPassengerWalk::set_passengerid(::google::protobuf::int32 value) {
  _set_bit(0);
  passengerid_ = value;
}

// required int32 origin_stationID = 2;
inline bool CtrlCmdPassengerWalk::has_origin_stationid() const {
  return _has_bit(1);
}
inline void CtrlCmdPassengerWalk::clear_origin_stationid() {
  origin_stationid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CtrlCmdPassengerWalk::origin_stationid() const {
  return origin_stationid_;
}
inline void CtrlCmdPassengerWalk::set_origin_stationid(::google::protobuf::int32 value) {
  _set_bit(1);
  origin_stationid_ = value;
}

// required int32 dest_stationID = 3;
inline bool CtrlCmdPassengerWalk::has_dest_stationid() const {
  return _has_bit(2);
}
inline void CtrlCmdPassengerWalk::clear_dest_stationid() {
  dest_stationid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CtrlCmdPassengerWalk::dest_stationid() const {
  return dest_stationid_;
}
inline void CtrlCmdPassengerWalk::set_dest_stationid(::google::protobuf::int32 value) {
  _set_bit(2);
  dest_stationid_ = value;
}

// required double travel_time = 4;
inline bool CtrlCmdPassengerWalk::has_travel_time() const {
  return _has_bit(3);
}
inline void CtrlCmdPassengerWalk::clear_travel_time() {
  travel_time_ = 0;
  _clear_bit(3);
}
inline double CtrlCmdPassengerWalk::travel_time() const {
  return travel_time_;
}
inline void CtrlCmdPassengerWalk::set_travel_time(double value) {
  _set_bit(3);
  travel_time_ = value;
}

// -------------------------------------------------------------------

// CtrlCmdStorageEnter

// required int32 vID = 1;
inline bool CtrlCmdStorageEnter::has_vid() const {
  return _has_bit(0);
}
inline void CtrlCmdStorageEnter::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdStorageEnter::vid() const {
  return vid_;
}
inline void CtrlCmdStorageEnter::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 sID = 2;
inline bool CtrlCmdStorageEnter::has_sid() const {
  return _has_bit(1);
}
inline void CtrlCmdStorageEnter::clear_sid() {
  sid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CtrlCmdStorageEnter::sid() const {
  return sid_;
}
inline void CtrlCmdStorageEnter::set_sid(::google::protobuf::int32 value) {
  _set_bit(1);
  sid_ = value;
}

// required int32 platformID = 3;
inline bool CtrlCmdStorageEnter::has_platformid() const {
  return _has_bit(2);
}
inline void CtrlCmdStorageEnter::clear_platformid() {
  platformid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CtrlCmdStorageEnter::platformid() const {
  return platformid_;
}
inline void CtrlCmdStorageEnter::set_platformid(::google::protobuf::int32 value) {
  _set_bit(2);
  platformid_ = value;
}

// required int32 berthID = 4;
inline bool CtrlCmdStorageEnter::has_berthid() const {
  return _has_bit(3);
}
inline void CtrlCmdStorageEnter::clear_berthid() {
  berthid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 CtrlCmdStorageEnter::berthid() const {
  return berthid_;
}
inline void CtrlCmdStorageEnter::set_berthid(::google::protobuf::int32 value) {
  _set_bit(3);
  berthid_ = value;
}

// -------------------------------------------------------------------

// CtrlCmdStorageExit

// required int32 sID = 1;
inline bool CtrlCmdStorageExit::has_sid() const {
  return _has_bit(0);
}
inline void CtrlCmdStorageExit::clear_sid() {
  sid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdStorageExit::sid() const {
  return sid_;
}
inline void CtrlCmdStorageExit::set_sid(::google::protobuf::int32 value) {
  _set_bit(0);
  sid_ = value;
}

// required int32 platformID = 2;
inline bool CtrlCmdStorageExit::has_platformid() const {
  return _has_bit(1);
}
inline void CtrlCmdStorageExit::clear_platformid() {
  platformid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CtrlCmdStorageExit::platformid() const {
  return platformid_;
}
inline void CtrlCmdStorageExit::set_platformid(::google::protobuf::int32 value) {
  _set_bit(1);
  platformid_ = value;
}

// required int32 berthID = 3;
inline bool CtrlCmdStorageExit::has_berthid() const {
  return _has_bit(2);
}
inline void CtrlCmdStorageExit::clear_berthid() {
  berthid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CtrlCmdStorageExit::berthid() const {
  return berthid_;
}
inline void CtrlCmdStorageExit::set_berthid(::google::protobuf::int32 value) {
  _set_bit(2);
  berthid_ = value;
}

// required float position = 4;
inline bool CtrlCmdStorageExit::has_position() const {
  return _has_bit(3);
}
inline void CtrlCmdStorageExit::clear_position() {
  position_ = 0;
  _clear_bit(3);
}
inline float CtrlCmdStorageExit::position() const {
  return position_;
}
inline void CtrlCmdStorageExit::set_position(float value) {
  _set_bit(3);
  position_ = value;
}

// required string model_name = 5;
inline bool CtrlCmdStorageExit::has_model_name() const {
  return _has_bit(4);
}
inline void CtrlCmdStorageExit::clear_model_name() {
  if (model_name_ != &_default_model_name_) {
    model_name_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CtrlCmdStorageExit::model_name() const {
  return *model_name_;
}
inline void CtrlCmdStorageExit::set_model_name(const ::std::string& value) {
  _set_bit(4);
  if (model_name_ == &_default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void CtrlCmdStorageExit::set_model_name(const char* value) {
  _set_bit(4);
  if (model_name_ == &_default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void CtrlCmdStorageExit::set_model_name(const char* value, size_t size) {
  _set_bit(4);
  if (model_name_ == &_default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CtrlCmdStorageExit::mutable_model_name() {
  _set_bit(4);
  if (model_name_ == &_default_model_name_) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}

// -------------------------------------------------------------------

// CtrlCmdSwitch

// required int32 trackID = 1;
inline bool CtrlCmdSwitch::has_trackid() const {
  return _has_bit(0);
}
inline void CtrlCmdSwitch::clear_trackid() {
  trackid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlCmdSwitch::trackid() const {
  return trackid_;
}
inline void CtrlCmdSwitch::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// required int32 nextID = 2;
inline bool CtrlCmdSwitch::has_nextid() const {
  return _has_bit(1);
}
inline void CtrlCmdSwitch::clear_nextid() {
  nextid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CtrlCmdSwitch::nextid() const {
  return nextid_;
}
inline void CtrlCmdSwitch::set_nextid(::google::protobuf::int32 value) {
  _set_bit(1);
  nextid_ = value;
}

// -------------------------------------------------------------------

// CtrlRequestVehicleStatus

// required int32 vID = 2;
inline bool CtrlRequestVehicleStatus::has_vid() const {
  return _has_bit(0);
}
inline void CtrlRequestVehicleStatus::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlRequestVehicleStatus::vid() const {
  return vid_;
}
inline void CtrlRequestVehicleStatus::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// -------------------------------------------------------------------

// CtrlRequestStationStatus

// required int32 sID = 2;
inline bool CtrlRequestStationStatus::has_sid() const {
  return _has_bit(0);
}
inline void CtrlRequestStationStatus::clear_sid() {
  sid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlRequestStationStatus::sid() const {
  return sid_;
}
inline void CtrlRequestStationStatus::set_sid(::google::protobuf::int32 value) {
  _set_bit(0);
  sid_ = value;
}

// -------------------------------------------------------------------

// CtrlRequestPassengerStatus

// required int32 pID = 2;
inline bool CtrlRequestPassengerStatus::has_pid() const {
  return _has_bit(0);
}
inline void CtrlRequestPassengerStatus::clear_pid() {
  pid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlRequestPassengerStatus::pid() const {
  return pid_;
}
inline void CtrlRequestPassengerStatus::set_pid(::google::protobuf::int32 value) {
  _set_bit(0);
  pid_ = value;
}

// -------------------------------------------------------------------

// CtrlRequestSwitchStatus

// required int32 swID = 2;
inline bool CtrlRequestSwitchStatus::has_swid() const {
  return _has_bit(0);
}
inline void CtrlRequestSwitchStatus::clear_swid() {
  swid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlRequestSwitchStatus::swid() const {
  return swid_;
}
inline void CtrlRequestSwitchStatus::set_swid(::google::protobuf::int32 value) {
  _set_bit(0);
  swid_ = value;
}

// -------------------------------------------------------------------

// CtrlRequestTrackSegmentStatus

// required int32 trackID = 2;
inline bool CtrlRequestTrackSegmentStatus::has_trackid() const {
  return _has_bit(0);
}
inline void CtrlRequestTrackSegmentStatus::clear_trackid() {
  trackid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlRequestTrackSegmentStatus::trackid() const {
  return trackid_;
}
inline void CtrlRequestTrackSegmentStatus::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// -------------------------------------------------------------------

// CtrlRequestTotalStatus

// -------------------------------------------------------------------

// CtrlSetnotifyVehiclePosition

// required int32 vID = 1;
inline bool CtrlSetnotifyVehiclePosition::has_vid() const {
  return _has_bit(0);
}
inline void CtrlSetnotifyVehiclePosition::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlSetnotifyVehiclePosition::vid() const {
  return vid_;
}
inline void CtrlSetnotifyVehiclePosition::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required float pos = 2;
inline bool CtrlSetnotifyVehiclePosition::has_pos() const {
  return _has_bit(1);
}
inline void CtrlSetnotifyVehiclePosition::clear_pos() {
  pos_ = 0;
  _clear_bit(1);
}
inline float CtrlSetnotifyVehiclePosition::pos() const {
  return pos_;
}
inline void CtrlSetnotifyVehiclePosition::set_pos(float value) {
  _set_bit(1);
  pos_ = value;
}

// -------------------------------------------------------------------

// CtrlSetnotifyTime

// required double time = 1;
inline bool CtrlSetnotifyTime::has_time() const {
  return _has_bit(0);
}
inline void CtrlSetnotifyTime::clear_time() {
  time_ = 0;
  _clear_bit(0);
}
inline double CtrlSetnotifyTime::time() const {
  return time_;
}
inline void CtrlSetnotifyTime::set_time(double value) {
  _set_bit(0);
  time_ = value;
}

// -------------------------------------------------------------------

// CtrlResume

// required int32 last_sim_msgID = 1;
inline bool CtrlResume::has_last_sim_msgid() const {
  return _has_bit(0);
}
inline void CtrlResume::clear_last_sim_msgid() {
  last_sim_msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlResume::last_sim_msgid() const {
  return last_sim_msgid_;
}
inline void CtrlResume::set_last_sim_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  last_sim_msgid_ = value;
}

// -------------------------------------------------------------------

// CtrlScenarioError

// optional int32 trackID = 1 [default = -1];
inline bool CtrlScenarioError::has_trackid() const {
  return _has_bit(0);
}
inline void CtrlScenarioError::clear_trackid() {
  trackid_ = -1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CtrlScenarioError::trackid() const {
  return trackid_;
}
inline void CtrlScenarioError::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// optional int32 vehicleID = 2 [default = -1];
inline bool CtrlScenarioError::has_vehicleid() const {
  return _has_bit(1);
}
inline void CtrlScenarioError::clear_vehicleid() {
  vehicleid_ = -1;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CtrlScenarioError::vehicleid() const {
  return vehicleid_;
}
inline void CtrlScenarioError::set_vehicleid(::google::protobuf::int32 value) {
  _set_bit(1);
  vehicleid_ = value;
}

// optional int32 stationID = 3 [default = -1];
inline bool CtrlScenarioError::has_stationid() const {
  return _has_bit(2);
}
inline void CtrlScenarioError::clear_stationid() {
  stationid_ = -1;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CtrlScenarioError::stationid() const {
  return stationid_;
}
inline void CtrlScenarioError::set_stationid(::google::protobuf::int32 value) {
  _set_bit(2);
  stationid_ = value;
}

// optional int32 mergeID = 4 [default = -1];
inline bool CtrlScenarioError::has_mergeid() const {
  return _has_bit(3);
}
inline void CtrlScenarioError::clear_mergeid() {
  mergeid_ = -1;
  _clear_bit(3);
}
inline ::google::protobuf::int32 CtrlScenarioError::mergeid() const {
  return mergeid_;
}
inline void CtrlScenarioError::set_mergeid(::google::protobuf::int32 value) {
  _set_bit(3);
  mergeid_ = value;
}

// optional int32 switchID = 5 [default = -1];
inline bool CtrlScenarioError::has_switchid() const {
  return _has_bit(4);
}
inline void CtrlScenarioError::clear_switchid() {
  switchid_ = -1;
  _clear_bit(4);
}
inline ::google::protobuf::int32 CtrlScenarioError::switchid() const {
  return switchid_;
}
inline void CtrlScenarioError::set_switchid(::google::protobuf::int32 value) {
  _set_bit(4);
  switchid_ = value;
}

// optional string error_message = 6;
inline bool CtrlScenarioError::has_error_message() const {
  return _has_bit(5);
}
inline void CtrlScenarioError::clear_error_message() {
  if (error_message_ != &_default_error_message_) {
    error_message_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CtrlScenarioError::error_message() const {
  return *error_message_;
}
inline void CtrlScenarioError::set_error_message(const ::std::string& value) {
  _set_bit(5);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CtrlScenarioError::set_error_message(const char* value) {
  _set_bit(5);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CtrlScenarioError::set_error_message(const char* value, size_t size) {
  _set_bit(5);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CtrlScenarioError::mutable_error_message() {
  _set_bit(5);
  if (error_message_ == &_default_error_message_) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}

// -------------------------------------------------------------------

// SimGreeting

// required double sim_end_time = 1;
inline bool SimGreeting::has_sim_end_time() const {
  return _has_bit(0);
}
inline void SimGreeting::clear_sim_end_time() {
  sim_end_time_ = 0;
  _clear_bit(0);
}
inline double SimGreeting::sim_end_time() const {
  return sim_end_time_;
}
inline void SimGreeting::set_sim_end_time(double value) {
  _set_bit(0);
  sim_end_time_ = value;
}

// optional string scenario_xml = 2;
inline bool SimGreeting::has_scenario_xml() const {
  return _has_bit(1);
}
inline void SimGreeting::clear_scenario_xml() {
  if (scenario_xml_ != &_default_scenario_xml_) {
    scenario_xml_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SimGreeting::scenario_xml() const {
  return *scenario_xml_;
}
inline void SimGreeting::set_scenario_xml(const ::std::string& value) {
  _set_bit(1);
  if (scenario_xml_ == &_default_scenario_xml_) {
    scenario_xml_ = new ::std::string;
  }
  scenario_xml_->assign(value);
}
inline void SimGreeting::set_scenario_xml(const char* value) {
  _set_bit(1);
  if (scenario_xml_ == &_default_scenario_xml_) {
    scenario_xml_ = new ::std::string;
  }
  scenario_xml_->assign(value);
}
inline void SimGreeting::set_scenario_xml(const char* value, size_t size) {
  _set_bit(1);
  if (scenario_xml_ == &_default_scenario_xml_) {
    scenario_xml_ = new ::std::string;
  }
  scenario_xml_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimGreeting::mutable_scenario_xml() {
  _set_bit(1);
  if (scenario_xml_ == &_default_scenario_xml_) {
    scenario_xml_ = new ::std::string;
  }
  return scenario_xml_;
}

// -------------------------------------------------------------------

// SimStart

// -------------------------------------------------------------------

// SimEnd

// required double sim_end_time = 1;
inline bool SimEnd::has_sim_end_time() const {
  return _has_bit(0);
}
inline void SimEnd::clear_sim_end_time() {
  sim_end_time_ = 0;
  _clear_bit(0);
}
inline double SimEnd::sim_end_time() const {
  return sim_end_time_;
}
inline void SimEnd::set_sim_end_time(double value) {
  _set_bit(0);
  sim_end_time_ = value;
}

// -------------------------------------------------------------------

// SimUnimplemented

// required int32 msgID = 1;
inline bool SimUnimplemented::has_msgid() const {
  return _has_bit(0);
}
inline void SimUnimplemented::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimUnimplemented::msgid() const {
  return msgid_;
}
inline void SimUnimplemented::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// -------------------------------------------------------------------

// SimCompletePassengersEmbark

// required int32 msgID = 1;
inline bool SimCompletePassengersEmbark::has_msgid() const {
  return _has_bit(0);
}
inline void SimCompletePassengersEmbark::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimCompletePassengersEmbark::msgid() const {
  return msgid_;
}
inline void SimCompletePassengersEmbark::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimCompletePassengersEmbark::has_time() const {
  return _has_bit(1);
}
inline void SimCompletePassengersEmbark::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimCompletePassengersEmbark::time() const {
  return time_;
}
inline void SimCompletePassengersEmbark::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// optional .prt.CtrlCmdPassengersEmbark cmd = 3;
inline bool SimCompletePassengersEmbark::has_cmd() const {
  return _has_bit(2);
}
inline void SimCompletePassengersEmbark::clear_cmd() {
  if (cmd_ != NULL) cmd_->::prt::CtrlCmdPassengersEmbark::Clear();
  _clear_bit(2);
}
inline const ::prt::CtrlCmdPassengersEmbark& SimCompletePassengersEmbark::cmd() const {
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
inline ::prt::CtrlCmdPassengersEmbark* SimCompletePassengersEmbark::mutable_cmd() {
  _set_bit(2);
  if (cmd_ == NULL) cmd_ = new ::prt::CtrlCmdPassengersEmbark;
  return cmd_;
}

// -------------------------------------------------------------------

// SimCompletePassengersDisembark

// required int32 msgID = 1;
inline bool SimCompletePassengersDisembark::has_msgid() const {
  return _has_bit(0);
}
inline void SimCompletePassengersDisembark::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimCompletePassengersDisembark::msgid() const {
  return msgid_;
}
inline void SimCompletePassengersDisembark::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimCompletePassengersDisembark::has_time() const {
  return _has_bit(1);
}
inline void SimCompletePassengersDisembark::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimCompletePassengersDisembark::time() const {
  return time_;
}
inline void SimCompletePassengersDisembark::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// optional .prt.CtrlCmdPassengersDisembark cmd = 3;
inline bool SimCompletePassengersDisembark::has_cmd() const {
  return _has_bit(2);
}
inline void SimCompletePassengersDisembark::clear_cmd() {
  if (cmd_ != NULL) cmd_->::prt::CtrlCmdPassengersDisembark::Clear();
  _clear_bit(2);
}
inline const ::prt::CtrlCmdPassengersDisembark& SimCompletePassengersDisembark::cmd() const {
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
inline ::prt::CtrlCmdPassengersDisembark* SimCompletePassengersDisembark::mutable_cmd() {
  _set_bit(2);
  if (cmd_ == NULL) cmd_ = new ::prt::CtrlCmdPassengersDisembark;
  return cmd_;
}

// -------------------------------------------------------------------

// SimCompletePassengerWalk

// required int32 msgID = 1;
inline bool SimCompletePassengerWalk::has_msgid() const {
  return _has_bit(0);
}
inline void SimCompletePassengerWalk::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimCompletePassengerWalk::msgid() const {
  return msgid_;
}
inline void SimCompletePassengerWalk::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimCompletePassengerWalk::has_time() const {
  return _has_bit(1);
}
inline void SimCompletePassengerWalk::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimCompletePassengerWalk::time() const {
  return time_;
}
inline void SimCompletePassengerWalk::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// optional .prt.CtrlCmdPassengerWalk cmd = 3;
inline bool SimCompletePassengerWalk::has_cmd() const {
  return _has_bit(2);
}
inline void SimCompletePassengerWalk::clear_cmd() {
  if (cmd_ != NULL) cmd_->::prt::CtrlCmdPassengerWalk::Clear();
  _clear_bit(2);
}
inline const ::prt::CtrlCmdPassengerWalk& SimCompletePassengerWalk::cmd() const {
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
inline ::prt::CtrlCmdPassengerWalk* SimCompletePassengerWalk::mutable_cmd() {
  _set_bit(2);
  if (cmd_ == NULL) cmd_ = new ::prt::CtrlCmdPassengerWalk;
  return cmd_;
}

// -------------------------------------------------------------------

// SimCompleteSwitch

// required int32 msgID = 1;
inline bool SimCompleteSwitch::has_msgid() const {
  return _has_bit(0);
}
inline void SimCompleteSwitch::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimCompleteSwitch::msgid() const {
  return msgid_;
}
inline void SimCompleteSwitch::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required int32 trackID = 2;
inline bool SimCompleteSwitch::has_trackid() const {
  return _has_bit(1);
}
inline void SimCompleteSwitch::clear_trackid() {
  trackid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimCompleteSwitch::trackid() const {
  return trackid_;
}
inline void SimCompleteSwitch::set_trackid(::google::protobuf::int32 value) {
  _set_bit(1);
  trackid_ = value;
}

// required int32 nextID = 3;
inline bool SimCompleteSwitch::has_nextid() const {
  return _has_bit(2);
}
inline void SimCompleteSwitch::clear_nextid() {
  nextid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SimCompleteSwitch::nextid() const {
  return nextid_;
}
inline void SimCompleteSwitch::set_nextid(::google::protobuf::int32 value) {
  _set_bit(2);
  nextid_ = value;
}

// required double time = 4;
inline bool SimCompleteSwitch::has_time() const {
  return _has_bit(3);
}
inline void SimCompleteSwitch::clear_time() {
  time_ = 0;
  _clear_bit(3);
}
inline double SimCompleteSwitch::time() const {
  return time_;
}
inline void SimCompleteSwitch::set_time(double value) {
  _set_bit(3);
  time_ = value;
}

// -------------------------------------------------------------------

// SimCompleteStorageEnter

// required int32 msgID = 1;
inline bool SimCompleteStorageEnter::has_msgid() const {
  return _has_bit(0);
}
inline void SimCompleteStorageEnter::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimCompleteStorageEnter::msgid() const {
  return msgid_;
}
inline void SimCompleteStorageEnter::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimCompleteStorageEnter::has_time() const {
  return _has_bit(1);
}
inline void SimCompleteStorageEnter::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimCompleteStorageEnter::time() const {
  return time_;
}
inline void SimCompleteStorageEnter::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// optional .prt.CtrlCmdStorageEnter cmd = 3;
inline bool SimCompleteStorageEnter::has_cmd() const {
  return _has_bit(2);
}
inline void SimCompleteStorageEnter::clear_cmd() {
  if (cmd_ != NULL) cmd_->::prt::CtrlCmdStorageEnter::Clear();
  _clear_bit(2);
}
inline const ::prt::CtrlCmdStorageEnter& SimCompleteStorageEnter::cmd() const {
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
inline ::prt::CtrlCmdStorageEnter* SimCompleteStorageEnter::mutable_cmd() {
  _set_bit(2);
  if (cmd_ == NULL) cmd_ = new ::prt::CtrlCmdStorageEnter;
  return cmd_;
}

// -------------------------------------------------------------------

// SimCompleteStorageExit

// required int32 msgID = 1;
inline bool SimCompleteStorageExit::has_msgid() const {
  return _has_bit(0);
}
inline void SimCompleteStorageExit::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimCompleteStorageExit::msgid() const {
  return msgid_;
}
inline void SimCompleteStorageExit::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimCompleteStorageExit::has_time() const {
  return _has_bit(1);
}
inline void SimCompleteStorageExit::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimCompleteStorageExit::time() const {
  return time_;
}
inline void SimCompleteStorageExit::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// optional .prt.CtrlCmdStorageExit cmd = 3;
inline bool SimCompleteStorageExit::has_cmd() const {
  return _has_bit(2);
}
inline void SimCompleteStorageExit::clear_cmd() {
  if (cmd_ != NULL) cmd_->::prt::CtrlCmdStorageExit::Clear();
  _clear_bit(2);
}
inline const ::prt::CtrlCmdStorageExit& SimCompleteStorageExit::cmd() const {
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
inline ::prt::CtrlCmdStorageExit* SimCompleteStorageExit::mutable_cmd() {
  _set_bit(2);
  if (cmd_ == NULL) cmd_ = new ::prt::CtrlCmdStorageExit;
  return cmd_;
}

// required .prt.VehicleStatus v_status = 4;
inline bool SimCompleteStorageExit::has_v_status() const {
  return _has_bit(3);
}
inline void SimCompleteStorageExit::clear_v_status() {
  if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
  _clear_bit(3);
}
inline const ::prt::VehicleStatus& SimCompleteStorageExit::v_status() const {
  return v_status_ != NULL ? *v_status_ : *default_instance_->v_status_;
}
inline ::prt::VehicleStatus* SimCompleteStorageExit::mutable_v_status() {
  _set_bit(3);
  if (v_status_ == NULL) v_status_ = new ::prt::VehicleStatus;
  return v_status_;
}

// -------------------------------------------------------------------

// SimResponseVehicleStatus

// required int32 msgID = 1;
inline bool SimResponseVehicleStatus::has_msgid() const {
  return _has_bit(0);
}
inline void SimResponseVehicleStatus::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimResponseVehicleStatus::msgid() const {
  return msgid_;
}
inline void SimResponseVehicleStatus::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimResponseVehicleStatus::has_time() const {
  return _has_bit(1);
}
inline void SimResponseVehicleStatus::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimResponseVehicleStatus::time() const {
  return time_;
}
inline void SimResponseVehicleStatus::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// required .prt.VehicleStatus v_status = 3;
inline bool SimResponseVehicleStatus::has_v_status() const {
  return _has_bit(2);
}
inline void SimResponseVehicleStatus::clear_v_status() {
  if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
  _clear_bit(2);
}
inline const ::prt::VehicleStatus& SimResponseVehicleStatus::v_status() const {
  return v_status_ != NULL ? *v_status_ : *default_instance_->v_status_;
}
inline ::prt::VehicleStatus* SimResponseVehicleStatus::mutable_v_status() {
  _set_bit(2);
  if (v_status_ == NULL) v_status_ = new ::prt::VehicleStatus;
  return v_status_;
}

// -------------------------------------------------------------------

// SimResponseStationStatus

// required int32 msgID = 1;
inline bool SimResponseStationStatus::has_msgid() const {
  return _has_bit(0);
}
inline void SimResponseStationStatus::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimResponseStationStatus::msgid() const {
  return msgid_;
}
inline void SimResponseStationStatus::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimResponseStationStatus::has_time() const {
  return _has_bit(1);
}
inline void SimResponseStationStatus::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimResponseStationStatus::time() const {
  return time_;
}
inline void SimResponseStationStatus::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// required .prt.StationStatus s_status = 3;
inline bool SimResponseStationStatus::has_s_status() const {
  return _has_bit(2);
}
inline void SimResponseStationStatus::clear_s_status() {
  if (s_status_ != NULL) s_status_->::prt::StationStatus::Clear();
  _clear_bit(2);
}
inline const ::prt::StationStatus& SimResponseStationStatus::s_status() const {
  return s_status_ != NULL ? *s_status_ : *default_instance_->s_status_;
}
inline ::prt::StationStatus* SimResponseStationStatus::mutable_s_status() {
  _set_bit(2);
  if (s_status_ == NULL) s_status_ = new ::prt::StationStatus;
  return s_status_;
}

// -------------------------------------------------------------------

// SimResponsePassengerStatus

// required int32 msgID = 1;
inline bool SimResponsePassengerStatus::has_msgid() const {
  return _has_bit(0);
}
inline void SimResponsePassengerStatus::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimResponsePassengerStatus::msgid() const {
  return msgid_;
}
inline void SimResponsePassengerStatus::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimResponsePassengerStatus::has_time() const {
  return _has_bit(1);
}
inline void SimResponsePassengerStatus::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimResponsePassengerStatus::time() const {
  return time_;
}
inline void SimResponsePassengerStatus::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// required .prt.PassengerStatus p_status = 3;
inline bool SimResponsePassengerStatus::has_p_status() const {
  return _has_bit(2);
}
inline void SimResponsePassengerStatus::clear_p_status() {
  if (p_status_ != NULL) p_status_->::prt::PassengerStatus::Clear();
  _clear_bit(2);
}
inline const ::prt::PassengerStatus& SimResponsePassengerStatus::p_status() const {
  return p_status_ != NULL ? *p_status_ : *default_instance_->p_status_;
}
inline ::prt::PassengerStatus* SimResponsePassengerStatus::mutable_p_status() {
  _set_bit(2);
  if (p_status_ == NULL) p_status_ = new ::prt::PassengerStatus;
  return p_status_;
}

// -------------------------------------------------------------------

// SimResponseSwitchStatus

// optional int32 msgID = 1;
inline bool SimResponseSwitchStatus::has_msgid() const {
  return _has_bit(0);
}
inline void SimResponseSwitchStatus::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimResponseSwitchStatus::msgid() const {
  return msgid_;
}
inline void SimResponseSwitchStatus::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimResponseSwitchStatus::has_time() const {
  return _has_bit(1);
}
inline void SimResponseSwitchStatus::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimResponseSwitchStatus::time() const {
  return time_;
}
inline void SimResponseSwitchStatus::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// required .prt.SwitchStatus sw_status = 3;
inline bool SimResponseSwitchStatus::has_sw_status() const {
  return _has_bit(2);
}
inline void SimResponseSwitchStatus::clear_sw_status() {
  if (sw_status_ != NULL) sw_status_->::prt::SwitchStatus::Clear();
  _clear_bit(2);
}
inline const ::prt::SwitchStatus& SimResponseSwitchStatus::sw_status() const {
  return sw_status_ != NULL ? *sw_status_ : *default_instance_->sw_status_;
}
inline ::prt::SwitchStatus* SimResponseSwitchStatus::mutable_sw_status() {
  _set_bit(2);
  if (sw_status_ == NULL) sw_status_ = new ::prt::SwitchStatus;
  return sw_status_;
}

// -------------------------------------------------------------------

// SimResponseTrackStatus

// optional int32 msgID = 1;
inline bool SimResponseTrackStatus::has_msgid() const {
  return _has_bit(0);
}
inline void SimResponseTrackStatus::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimResponseTrackStatus::msgid() const {
  return msgid_;
}
inline void SimResponseTrackStatus::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimResponseTrackStatus::has_time() const {
  return _has_bit(1);
}
inline void SimResponseTrackStatus::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimResponseTrackStatus::time() const {
  return time_;
}
inline void SimResponseTrackStatus::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// required .prt.TrackStatus track_status = 3;
inline bool SimResponseTrackStatus::has_track_status() const {
  return _has_bit(2);
}
inline void SimResponseTrackStatus::clear_track_status() {
  if (track_status_ != NULL) track_status_->::prt::TrackStatus::Clear();
  _clear_bit(2);
}
inline const ::prt::TrackStatus& SimResponseTrackStatus::track_status() const {
  return track_status_ != NULL ? *track_status_ : *default_instance_->track_status_;
}
inline ::prt::TrackStatus* SimResponseTrackStatus::mutable_track_status() {
  _set_bit(2);
  if (track_status_ == NULL) track_status_ = new ::prt::TrackStatus;
  return track_status_;
}

// -------------------------------------------------------------------

// SimResponseTotalStatus

// required int32 msgID = 1;
inline bool SimResponseTotalStatus::has_msgid() const {
  return _has_bit(0);
}
inline void SimResponseTotalStatus::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimResponseTotalStatus::msgid() const {
  return msgid_;
}
inline void SimResponseTotalStatus::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimResponseTotalStatus::has_time() const {
  return _has_bit(1);
}
inline void SimResponseTotalStatus::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimResponseTotalStatus::time() const {
  return time_;
}
inline void SimResponseTotalStatus::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// repeated .prt.VehicleStatus v_statuses = 3;
inline int SimResponseTotalStatus::v_statuses_size() const {
  return v_statuses_.size();
}
inline void SimResponseTotalStatus::clear_v_statuses() {
  v_statuses_.Clear();
}
inline const ::prt::VehicleStatus& SimResponseTotalStatus::v_statuses(int index) const {
  return v_statuses_.Get(index);
}
inline ::prt::VehicleStatus* SimResponseTotalStatus::mutable_v_statuses(int index) {
  return v_statuses_.Mutable(index);
}
inline ::prt::VehicleStatus* SimResponseTotalStatus::add_v_statuses() {
  return v_statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::VehicleStatus >&
SimResponseTotalStatus::v_statuses() const {
  return v_statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::VehicleStatus >*
SimResponseTotalStatus::mutable_v_statuses() {
  return &v_statuses_;
}

// repeated .prt.StationStatus s_statuses = 4;
inline int SimResponseTotalStatus::s_statuses_size() const {
  return s_statuses_.size();
}
inline void SimResponseTotalStatus::clear_s_statuses() {
  s_statuses_.Clear();
}
inline const ::prt::StationStatus& SimResponseTotalStatus::s_statuses(int index) const {
  return s_statuses_.Get(index);
}
inline ::prt::StationStatus* SimResponseTotalStatus::mutable_s_statuses(int index) {
  return s_statuses_.Mutable(index);
}
inline ::prt::StationStatus* SimResponseTotalStatus::add_s_statuses() {
  return s_statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::StationStatus >&
SimResponseTotalStatus::s_statuses() const {
  return s_statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::StationStatus >*
SimResponseTotalStatus::mutable_s_statuses() {
  return &s_statuses_;
}

// repeated .prt.PassengerStatus p_statuses = 5;
inline int SimResponseTotalStatus::p_statuses_size() const {
  return p_statuses_.size();
}
inline void SimResponseTotalStatus::clear_p_statuses() {
  p_statuses_.Clear();
}
inline const ::prt::PassengerStatus& SimResponseTotalStatus::p_statuses(int index) const {
  return p_statuses_.Get(index);
}
inline ::prt::PassengerStatus* SimResponseTotalStatus::mutable_p_statuses(int index) {
  return p_statuses_.Mutable(index);
}
inline ::prt::PassengerStatus* SimResponseTotalStatus::add_p_statuses() {
  return p_statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::PassengerStatus >&
SimResponseTotalStatus::p_statuses() const {
  return p_statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::PassengerStatus >*
SimResponseTotalStatus::mutable_p_statuses() {
  return &p_statuses_;
}

// repeated .prt.SwitchStatus sw_statuses = 6;
inline int SimResponseTotalStatus::sw_statuses_size() const {
  return sw_statuses_.size();
}
inline void SimResponseTotalStatus::clear_sw_statuses() {
  sw_statuses_.Clear();
}
inline const ::prt::SwitchStatus& SimResponseTotalStatus::sw_statuses(int index) const {
  return sw_statuses_.Get(index);
}
inline ::prt::SwitchStatus* SimResponseTotalStatus::mutable_sw_statuses(int index) {
  return sw_statuses_.Mutable(index);
}
inline ::prt::SwitchStatus* SimResponseTotalStatus::add_sw_statuses() {
  return sw_statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::SwitchStatus >&
SimResponseTotalStatus::sw_statuses() const {
  return sw_statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::SwitchStatus >*
SimResponseTotalStatus::mutable_sw_statuses() {
  return &sw_statuses_;
}

// repeated .prt.TrackStatus t_statuses = 7;
inline int SimResponseTotalStatus::t_statuses_size() const {
  return t_statuses_.size();
}
inline void SimResponseTotalStatus::clear_t_statuses() {
  t_statuses_.Clear();
}
inline const ::prt::TrackStatus& SimResponseTotalStatus::t_statuses(int index) const {
  return t_statuses_.Get(index);
}
inline ::prt::TrackStatus* SimResponseTotalStatus::mutable_t_statuses(int index) {
  return t_statuses_.Mutable(index);
}
inline ::prt::TrackStatus* SimResponseTotalStatus::add_t_statuses() {
  return t_statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::TrackStatus >&
SimResponseTotalStatus::t_statuses() const {
  return t_statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::TrackStatus >*
SimResponseTotalStatus::mutable_t_statuses() {
  return &t_statuses_;
}

// -------------------------------------------------------------------

// SimNotifyVehiclePosition

// optional int32 msgID = 1;
inline bool SimNotifyVehiclePosition::has_msgid() const {
  return _has_bit(0);
}
inline void SimNotifyVehiclePosition::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyVehiclePosition::msgid() const {
  return msgid_;
}
inline void SimNotifyVehiclePosition::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimNotifyVehiclePosition::has_time() const {
  return _has_bit(1);
}
inline void SimNotifyVehiclePosition::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimNotifyVehiclePosition::time() const {
  return time_;
}
inline void SimNotifyVehiclePosition::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// required .prt.VehicleStatus v_status = 3;
inline bool SimNotifyVehiclePosition::has_v_status() const {
  return _has_bit(2);
}
inline void SimNotifyVehiclePosition::clear_v_status() {
  if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
  _clear_bit(2);
}
inline const ::prt::VehicleStatus& SimNotifyVehiclePosition::v_status() const {
  return v_status_ != NULL ? *v_status_ : *default_instance_->v_status_;
}
inline ::prt::VehicleStatus* SimNotifyVehiclePosition::mutable_v_status() {
  _set_bit(2);
  if (v_status_ == NULL) v_status_ = new ::prt::VehicleStatus;
  return v_status_;
}

// -------------------------------------------------------------------

// SimNotifyTime

// optional int32 msgID = 1;
inline bool SimNotifyTime::has_msgid() const {
  return _has_bit(0);
}
inline void SimNotifyTime::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyTime::msgid() const {
  return msgid_;
}
inline void SimNotifyTime::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimNotifyTime::has_time() const {
  return _has_bit(1);
}
inline void SimNotifyTime::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimNotifyTime::time() const {
  return time_;
}
inline void SimNotifyTime::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyVehicleArrive

// required int32 trackID = 1;
inline bool SimNotifyVehicleArrive::has_trackid() const {
  return _has_bit(0);
}
inline void SimNotifyVehicleArrive::clear_trackid() {
  trackid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyVehicleArrive::trackid() const {
  return trackid_;
}
inline void SimNotifyVehicleArrive::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// required .prt.VehicleStatus v_status = 2;
inline bool SimNotifyVehicleArrive::has_v_status() const {
  return _has_bit(1);
}
inline void SimNotifyVehicleArrive::clear_v_status() {
  if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
  _clear_bit(1);
}
inline const ::prt::VehicleStatus& SimNotifyVehicleArrive::v_status() const {
  return v_status_ != NULL ? *v_status_ : *default_instance_->v_status_;
}
inline ::prt::VehicleStatus* SimNotifyVehicleArrive::mutable_v_status() {
  _set_bit(1);
  if (v_status_ == NULL) v_status_ = new ::prt::VehicleStatus;
  return v_status_;
}

// required double time = 3;
inline bool SimNotifyVehicleArrive::has_time() const {
  return _has_bit(2);
}
inline void SimNotifyVehicleArrive::clear_time() {
  time_ = 0;
  _clear_bit(2);
}
inline double SimNotifyVehicleArrive::time() const {
  return time_;
}
inline void SimNotifyVehicleArrive::set_time(double value) {
  _set_bit(2);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyVehicleExit

// required int32 trackID = 1;
inline bool SimNotifyVehicleExit::has_trackid() const {
  return _has_bit(0);
}
inline void SimNotifyVehicleExit::clear_trackid() {
  trackid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyVehicleExit::trackid() const {
  return trackid_;
}
inline void SimNotifyVehicleExit::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// required .prt.VehicleStatus v_status = 2;
inline bool SimNotifyVehicleExit::has_v_status() const {
  return _has_bit(1);
}
inline void SimNotifyVehicleExit::clear_v_status() {
  if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
  _clear_bit(1);
}
inline const ::prt::VehicleStatus& SimNotifyVehicleExit::v_status() const {
  return v_status_ != NULL ? *v_status_ : *default_instance_->v_status_;
}
inline ::prt::VehicleStatus* SimNotifyVehicleExit::mutable_v_status() {
  _set_bit(1);
  if (v_status_ == NULL) v_status_ = new ::prt::VehicleStatus;
  return v_status_;
}

// required double time = 3;
inline bool SimNotifyVehicleExit::has_time() const {
  return _has_bit(2);
}
inline void SimNotifyVehicleExit::clear_time() {
  time_ = 0;
  _clear_bit(2);
}
inline double SimNotifyVehicleExit::time() const {
  return time_;
}
inline void SimNotifyVehicleExit::set_time(double value) {
  _set_bit(2);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyVehicleStopped

// required .prt.VehicleStatus v_status = 1;
inline bool SimNotifyVehicleStopped::has_v_status() const {
  return _has_bit(0);
}
inline void SimNotifyVehicleStopped::clear_v_status() {
  if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
  _clear_bit(0);
}
inline const ::prt::VehicleStatus& SimNotifyVehicleStopped::v_status() const {
  return v_status_ != NULL ? *v_status_ : *default_instance_->v_status_;
}
inline ::prt::VehicleStatus* SimNotifyVehicleStopped::mutable_v_status() {
  _set_bit(0);
  if (v_status_ == NULL) v_status_ = new ::prt::VehicleStatus;
  return v_status_;
}

// required double time = 2;
inline bool SimNotifyVehicleStopped::has_time() const {
  return _has_bit(1);
}
inline void SimNotifyVehicleStopped::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimNotifyVehicleStopped::time() const {
  return time_;
}
inline void SimNotifyVehicleStopped::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyVehicleSpeeding

// required .prt.VehicleStatus v_status = 1;
inline bool SimNotifyVehicleSpeeding::has_v_status() const {
  return _has_bit(0);
}
inline void SimNotifyVehicleSpeeding::clear_v_status() {
  if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
  _clear_bit(0);
}
inline const ::prt::VehicleStatus& SimNotifyVehicleSpeeding::v_status() const {
  return v_status_ != NULL ? *v_status_ : *default_instance_->v_status_;
}
inline ::prt::VehicleStatus* SimNotifyVehicleSpeeding::mutable_v_status() {
  _set_bit(0);
  if (v_status_ == NULL) v_status_ = new ::prt::VehicleStatus;
  return v_status_;
}

// required double time = 2;
inline bool SimNotifyVehicleSpeeding::has_time() const {
  return _has_bit(1);
}
inline void SimNotifyVehicleSpeeding::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimNotifyVehicleSpeeding::time() const {
  return time_;
}
inline void SimNotifyVehicleSpeeding::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// required float speed_limit = 3;
inline bool SimNotifyVehicleSpeeding::has_speed_limit() const {
  return _has_bit(2);
}
inline void SimNotifyVehicleSpeeding::clear_speed_limit() {
  speed_limit_ = 0;
  _clear_bit(2);
}
inline float SimNotifyVehicleSpeeding::speed_limit() const {
  return speed_limit_;
}
inline void SimNotifyVehicleSpeeding::set_speed_limit(float value) {
  _set_bit(2);
  speed_limit_ = value;
}

// -------------------------------------------------------------------

// SimNotifyVehicleCollision

// required .prt.VehicleStatus v1_status = 1;
inline bool SimNotifyVehicleCollision::has_v1_status() const {
  return _has_bit(0);
}
inline void SimNotifyVehicleCollision::clear_v1_status() {
  if (v1_status_ != NULL) v1_status_->::prt::VehicleStatus::Clear();
  _clear_bit(0);
}
inline const ::prt::VehicleStatus& SimNotifyVehicleCollision::v1_status() const {
  return v1_status_ != NULL ? *v1_status_ : *default_instance_->v1_status_;
}
inline ::prt::VehicleStatus* SimNotifyVehicleCollision::mutable_v1_status() {
  _set_bit(0);
  if (v1_status_ == NULL) v1_status_ = new ::prt::VehicleStatus;
  return v1_status_;
}

// required .prt.VehicleStatus v2_status = 2;
inline bool SimNotifyVehicleCollision::has_v2_status() const {
  return _has_bit(1);
}
inline void SimNotifyVehicleCollision::clear_v2_status() {
  if (v2_status_ != NULL) v2_status_->::prt::VehicleStatus::Clear();
  _clear_bit(1);
}
inline const ::prt::VehicleStatus& SimNotifyVehicleCollision::v2_status() const {
  return v2_status_ != NULL ? *v2_status_ : *default_instance_->v2_status_;
}
inline ::prt::VehicleStatus* SimNotifyVehicleCollision::mutable_v2_status() {
  _set_bit(1);
  if (v2_status_ == NULL) v2_status_ = new ::prt::VehicleStatus;
  return v2_status_;
}

// required double time = 3;
inline bool SimNotifyVehicleCollision::has_time() const {
  return _has_bit(2);
}
inline void SimNotifyVehicleCollision::clear_time() {
  time_ = 0;
  _clear_bit(2);
}
inline double SimNotifyVehicleCollision::time() const {
  return time_;
}
inline void SimNotifyVehicleCollision::set_time(double value) {
  _set_bit(2);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyVehicleCrash

// required int32 v_status = 1;
inline bool SimNotifyVehicleCrash::has_v_status() const {
  return _has_bit(0);
}
inline void SimNotifyVehicleCrash::clear_v_status() {
  v_status_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyVehicleCrash::v_status() const {
  return v_status_;
}
inline void SimNotifyVehicleCrash::set_v_status(::google::protobuf::int32 value) {
  _set_bit(0);
  v_status_ = value;
}

// required double time = 2;
inline bool SimNotifyVehicleCrash::has_time() const {
  return _has_bit(1);
}
inline void SimNotifyVehicleCrash::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimNotifyVehicleCrash::time() const {
  return time_;
}
inline void SimNotifyVehicleCrash::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyPassengerEmbarkStart

// required int32 vID = 1;
inline bool SimNotifyPassengerEmbarkStart::has_vid() const {
  return _has_bit(0);
}
inline void SimNotifyPassengerEmbarkStart::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkStart::vid() const {
  return vid_;
}
inline void SimNotifyPassengerEmbarkStart::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 sID = 2;
inline bool SimNotifyPassengerEmbarkStart::has_sid() const {
  return _has_bit(1);
}
inline void SimNotifyPassengerEmbarkStart::clear_sid() {
  sid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkStart::sid() const {
  return sid_;
}
inline void SimNotifyPassengerEmbarkStart::set_sid(::google::protobuf::int32 value) {
  _set_bit(1);
  sid_ = value;
}

// required int32 platformID = 3;
inline bool SimNotifyPassengerEmbarkStart::has_platformid() const {
  return _has_bit(2);
}
inline void SimNotifyPassengerEmbarkStart::clear_platformid() {
  platformid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkStart::platformid() const {
  return platformid_;
}
inline void SimNotifyPassengerEmbarkStart::set_platformid(::google::protobuf::int32 value) {
  _set_bit(2);
  platformid_ = value;
}

// required int32 pID = 4;
inline bool SimNotifyPassengerEmbarkStart::has_pid() const {
  return _has_bit(3);
}
inline void SimNotifyPassengerEmbarkStart::clear_pid() {
  pid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkStart::pid() const {
  return pid_;
}
inline void SimNotifyPassengerEmbarkStart::set_pid(::google::protobuf::int32 value) {
  _set_bit(3);
  pid_ = value;
}

// required int32 berthID = 5;
inline bool SimNotifyPassengerEmbarkStart::has_berthid() const {
  return _has_bit(4);
}
inline void SimNotifyPassengerEmbarkStart::clear_berthid() {
  berthid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkStart::berthid() const {
  return berthid_;
}
inline void SimNotifyPassengerEmbarkStart::set_berthid(::google::protobuf::int32 value) {
  _set_bit(4);
  berthid_ = value;
}

// required double time = 6;
inline bool SimNotifyPassengerEmbarkStart::has_time() const {
  return _has_bit(5);
}
inline void SimNotifyPassengerEmbarkStart::clear_time() {
  time_ = 0;
  _clear_bit(5);
}
inline double SimNotifyPassengerEmbarkStart::time() const {
  return time_;
}
inline void SimNotifyPassengerEmbarkStart::set_time(double value) {
  _set_bit(5);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyPassengerEmbarkEnd

// required int32 vID = 1;
inline bool SimNotifyPassengerEmbarkEnd::has_vid() const {
  return _has_bit(0);
}
inline void SimNotifyPassengerEmbarkEnd::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkEnd::vid() const {
  return vid_;
}
inline void SimNotifyPassengerEmbarkEnd::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 sID = 2;
inline bool SimNotifyPassengerEmbarkEnd::has_sid() const {
  return _has_bit(1);
}
inline void SimNotifyPassengerEmbarkEnd::clear_sid() {
  sid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkEnd::sid() const {
  return sid_;
}
inline void SimNotifyPassengerEmbarkEnd::set_sid(::google::protobuf::int32 value) {
  _set_bit(1);
  sid_ = value;
}

// required int32 platformID = 3;
inline bool SimNotifyPassengerEmbarkEnd::has_platformid() const {
  return _has_bit(2);
}
inline void SimNotifyPassengerEmbarkEnd::clear_platformid() {
  platformid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkEnd::platformid() const {
  return platformid_;
}
inline void SimNotifyPassengerEmbarkEnd::set_platformid(::google::protobuf::int32 value) {
  _set_bit(2);
  platformid_ = value;
}

// required int32 pID = 4;
inline bool SimNotifyPassengerEmbarkEnd::has_pid() const {
  return _has_bit(3);
}
inline void SimNotifyPassengerEmbarkEnd::clear_pid() {
  pid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkEnd::pid() const {
  return pid_;
}
inline void SimNotifyPassengerEmbarkEnd::set_pid(::google::protobuf::int32 value) {
  _set_bit(3);
  pid_ = value;
}

// required int32 berthID = 5;
inline bool SimNotifyPassengerEmbarkEnd::has_berthid() const {
  return _has_bit(4);
}
inline void SimNotifyPassengerEmbarkEnd::clear_berthid() {
  berthid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SimNotifyPassengerEmbarkEnd::berthid() const {
  return berthid_;
}
inline void SimNotifyPassengerEmbarkEnd::set_berthid(::google::protobuf::int32 value) {
  _set_bit(4);
  berthid_ = value;
}

// required double time = 6;
inline bool SimNotifyPassengerEmbarkEnd::has_time() const {
  return _has_bit(5);
}
inline void SimNotifyPassengerEmbarkEnd::clear_time() {
  time_ = 0;
  _clear_bit(5);
}
inline double SimNotifyPassengerEmbarkEnd::time() const {
  return time_;
}
inline void SimNotifyPassengerEmbarkEnd::set_time(double value) {
  _set_bit(5);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyPassengerDisembarkStart

// required int32 vID = 1;
inline bool SimNotifyPassengerDisembarkStart::has_vid() const {
  return _has_bit(0);
}
inline void SimNotifyPassengerDisembarkStart::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkStart::vid() const {
  return vid_;
}
inline void SimNotifyPassengerDisembarkStart::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 sID = 2;
inline bool SimNotifyPassengerDisembarkStart::has_sid() const {
  return _has_bit(1);
}
inline void SimNotifyPassengerDisembarkStart::clear_sid() {
  sid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkStart::sid() const {
  return sid_;
}
inline void SimNotifyPassengerDisembarkStart::set_sid(::google::protobuf::int32 value) {
  _set_bit(1);
  sid_ = value;
}

// required int32 platformID = 3;
inline bool SimNotifyPassengerDisembarkStart::has_platformid() const {
  return _has_bit(2);
}
inline void SimNotifyPassengerDisembarkStart::clear_platformid() {
  platformid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkStart::platformid() const {
  return platformid_;
}
inline void SimNotifyPassengerDisembarkStart::set_platformid(::google::protobuf::int32 value) {
  _set_bit(2);
  platformid_ = value;
}

// required int32 pID = 4;
inline bool SimNotifyPassengerDisembarkStart::has_pid() const {
  return _has_bit(3);
}
inline void SimNotifyPassengerDisembarkStart::clear_pid() {
  pid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkStart::pid() const {
  return pid_;
}
inline void SimNotifyPassengerDisembarkStart::set_pid(::google::protobuf::int32 value) {
  _set_bit(3);
  pid_ = value;
}

// required int32 berthID = 5;
inline bool SimNotifyPassengerDisembarkStart::has_berthid() const {
  return _has_bit(4);
}
inline void SimNotifyPassengerDisembarkStart::clear_berthid() {
  berthid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkStart::berthid() const {
  return berthid_;
}
inline void SimNotifyPassengerDisembarkStart::set_berthid(::google::protobuf::int32 value) {
  _set_bit(4);
  berthid_ = value;
}

// required double time = 6;
inline bool SimNotifyPassengerDisembarkStart::has_time() const {
  return _has_bit(5);
}
inline void SimNotifyPassengerDisembarkStart::clear_time() {
  time_ = 0;
  _clear_bit(5);
}
inline double SimNotifyPassengerDisembarkStart::time() const {
  return time_;
}
inline void SimNotifyPassengerDisembarkStart::set_time(double value) {
  _set_bit(5);
  time_ = value;
}

// -------------------------------------------------------------------

// SimNotifyPassengerDisembarkEnd

// required int32 vID = 1;
inline bool SimNotifyPassengerDisembarkEnd::has_vid() const {
  return _has_bit(0);
}
inline void SimNotifyPassengerDisembarkEnd::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkEnd::vid() const {
  return vid_;
}
inline void SimNotifyPassengerDisembarkEnd::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 sID = 2;
inline bool SimNotifyPassengerDisembarkEnd::has_sid() const {
  return _has_bit(1);
}
inline void SimNotifyPassengerDisembarkEnd::clear_sid() {
  sid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkEnd::sid() const {
  return sid_;
}
inline void SimNotifyPassengerDisembarkEnd::set_sid(::google::protobuf::int32 value) {
  _set_bit(1);
  sid_ = value;
}

// required int32 platformID = 3;
inline bool SimNotifyPassengerDisembarkEnd::has_platformid() const {
  return _has_bit(2);
}
inline void SimNotifyPassengerDisembarkEnd::clear_platformid() {
  platformid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkEnd::platformid() const {
  return platformid_;
}
inline void SimNotifyPassengerDisembarkEnd::set_platformid(::google::protobuf::int32 value) {
  _set_bit(2);
  platformid_ = value;
}

// required int32 pID = 4;
inline bool SimNotifyPassengerDisembarkEnd::has_pid() const {
  return _has_bit(3);
}
inline void SimNotifyPassengerDisembarkEnd::clear_pid() {
  pid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkEnd::pid() const {
  return pid_;
}
inline void SimNotifyPassengerDisembarkEnd::set_pid(::google::protobuf::int32 value) {
  _set_bit(3);
  pid_ = value;
}

// required int32 berthID = 5;
inline bool SimNotifyPassengerDisembarkEnd::has_berthid() const {
  return _has_bit(4);
}
inline void SimNotifyPassengerDisembarkEnd::clear_berthid() {
  berthid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SimNotifyPassengerDisembarkEnd::berthid() const {
  return berthid_;
}
inline void SimNotifyPassengerDisembarkEnd::set_berthid(::google::protobuf::int32 value) {
  _set_bit(4);
  berthid_ = value;
}

// required double time = 6;
inline bool SimNotifyPassengerDisembarkEnd::has_time() const {
  return _has_bit(5);
}
inline void SimNotifyPassengerDisembarkEnd::clear_time() {
  time_ = 0;
  _clear_bit(5);
}
inline double SimNotifyPassengerDisembarkEnd::time() const {
  return time_;
}
inline void SimNotifyPassengerDisembarkEnd::set_time(double value) {
  _set_bit(5);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventTrackDisabled

// required int32 trackID = 1;
inline bool SimEventTrackDisabled::has_trackid() const {
  return _has_bit(0);
}
inline void SimEventTrackDisabled::clear_trackid() {
  trackid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventTrackDisabled::trackid() const {
  return trackid_;
}
inline void SimEventTrackDisabled::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// required double time = 2;
inline bool SimEventTrackDisabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventTrackDisabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventTrackDisabled::time() const {
  return time_;
}
inline void SimEventTrackDisabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventTrackReenabled

// required int32 trackID = 1;
inline bool SimEventTrackReenabled::has_trackid() const {
  return _has_bit(0);
}
inline void SimEventTrackReenabled::clear_trackid() {
  trackid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventTrackReenabled::trackid() const {
  return trackid_;
}
inline void SimEventTrackReenabled::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// required double time = 2;
inline bool SimEventTrackReenabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventTrackReenabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventTrackReenabled::time() const {
  return time_;
}
inline void SimEventTrackReenabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventSwitchDisabled

// required int32 swID = 1;
inline bool SimEventSwitchDisabled::has_swid() const {
  return _has_bit(0);
}
inline void SimEventSwitchDisabled::clear_swid() {
  swid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventSwitchDisabled::swid() const {
  return swid_;
}
inline void SimEventSwitchDisabled::set_swid(::google::protobuf::int32 value) {
  _set_bit(0);
  swid_ = value;
}

// required double time = 2;
inline bool SimEventSwitchDisabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventSwitchDisabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventSwitchDisabled::time() const {
  return time_;
}
inline void SimEventSwitchDisabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventSwitchReenabled

// required int32 swID = 1;
inline bool SimEventSwitchReenabled::has_swid() const {
  return _has_bit(0);
}
inline void SimEventSwitchReenabled::clear_swid() {
  swid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventSwitchReenabled::swid() const {
  return swid_;
}
inline void SimEventSwitchReenabled::set_swid(::google::protobuf::int32 value) {
  _set_bit(0);
  swid_ = value;
}

// required double time = 2;
inline bool SimEventSwitchReenabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventSwitchReenabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventSwitchReenabled::time() const {
  return time_;
}
inline void SimEventSwitchReenabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventStationDisabled

// required int32 sID = 1;
inline bool SimEventStationDisabled::has_sid() const {
  return _has_bit(0);
}
inline void SimEventStationDisabled::clear_sid() {
  sid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventStationDisabled::sid() const {
  return sid_;
}
inline void SimEventStationDisabled::set_sid(::google::protobuf::int32 value) {
  _set_bit(0);
  sid_ = value;
}

// required double time = 2;
inline bool SimEventStationDisabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventStationDisabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventStationDisabled::time() const {
  return time_;
}
inline void SimEventStationDisabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventStationReenabled

// required int32 sID = 1;
inline bool SimEventStationReenabled::has_sid() const {
  return _has_bit(0);
}
inline void SimEventStationReenabled::clear_sid() {
  sid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventStationReenabled::sid() const {
  return sid_;
}
inline void SimEventStationReenabled::set_sid(::google::protobuf::int32 value) {
  _set_bit(0);
  sid_ = value;
}

// required double time = 2;
inline bool SimEventStationReenabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventStationReenabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventStationReenabled::time() const {
  return time_;
}
inline void SimEventStationReenabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventVehicleDisabled

// required int32 vID = 1;
inline bool SimEventVehicleDisabled::has_vid() const {
  return _has_bit(0);
}
inline void SimEventVehicleDisabled::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventVehicleDisabled::vid() const {
  return vid_;
}
inline void SimEventVehicleDisabled::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required double time = 2;
inline bool SimEventVehicleDisabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventVehicleDisabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventVehicleDisabled::time() const {
  return time_;
}
inline void SimEventVehicleDisabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventVehicleReenabled

// required int32 vID = 1;
inline bool SimEventVehicleReenabled::has_vid() const {
  return _has_bit(0);
}
inline void SimEventVehicleReenabled::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventVehicleReenabled::vid() const {
  return vid_;
}
inline void SimEventVehicleReenabled::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required double time = 2;
inline bool SimEventVehicleReenabled::has_time() const {
  return _has_bit(1);
}
inline void SimEventVehicleReenabled::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventVehicleReenabled::time() const {
  return time_;
}
inline void SimEventVehicleReenabled::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventPassengerCreated

// required .prt.PassengerStatus p_status = 1;
inline bool SimEventPassengerCreated::has_p_status() const {
  return _has_bit(0);
}
inline void SimEventPassengerCreated::clear_p_status() {
  if (p_status_ != NULL) p_status_->::prt::PassengerStatus::Clear();
  _clear_bit(0);
}
inline const ::prt::PassengerStatus& SimEventPassengerCreated::p_status() const {
  return p_status_ != NULL ? *p_status_ : *default_instance_->p_status_;
}
inline ::prt::PassengerStatus* SimEventPassengerCreated::mutable_p_status() {
  _set_bit(0);
  if (p_status_ == NULL) p_status_ = new ::prt::PassengerStatus;
  return p_status_;
}

// required double time = 2;
inline bool SimEventPassengerCreated::has_time() const {
  return _has_bit(1);
}
inline void SimEventPassengerCreated::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventPassengerCreated::time() const {
  return time_;
}
inline void SimEventPassengerCreated::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimEventPassengerChangedest

// required int32 pID = 1;
inline bool SimEventPassengerChangedest::has_pid() const {
  return _has_bit(0);
}
inline void SimEventPassengerChangedest::clear_pid() {
  pid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimEventPassengerChangedest::pid() const {
  return pid_;
}
inline void SimEventPassengerChangedest::set_pid(::google::protobuf::int32 value) {
  _set_bit(0);
  pid_ = value;
}

// required double time = 2;
inline bool SimEventPassengerChangedest::has_time() const {
  return _has_bit(1);
}
inline void SimEventPassengerChangedest::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimEventPassengerChangedest::time() const {
  return time_;
}
inline void SimEventPassengerChangedest::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimMsgHdrInvalidSeparator

// required int32 msgID = 1;
inline bool SimMsgHdrInvalidSeparator::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgHdrInvalidSeparator::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidSeparator::msgid() const {
  return msgid_;
}
inline void SimMsgHdrInvalidSeparator::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required int32 msg_sep = 2;
inline bool SimMsgHdrInvalidSeparator::has_msg_sep() const {
  return _has_bit(1);
}
inline void SimMsgHdrInvalidSeparator::clear_msg_sep() {
  msg_sep_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidSeparator::msg_sep() const {
  return msg_sep_;
}
inline void SimMsgHdrInvalidSeparator::set_msg_sep(::google::protobuf::int32 value) {
  _set_bit(1);
  msg_sep_ = value;
}

// -------------------------------------------------------------------

// SimMsgHdrInvalidType

// required int32 msgID = 1;
inline bool SimMsgHdrInvalidType::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgHdrInvalidType::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidType::msgid() const {
  return msgid_;
}
inline void SimMsgHdrInvalidType::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required int32 msg_type = 2;
inline bool SimMsgHdrInvalidType::has_msg_type() const {
  return _has_bit(1);
}
inline void SimMsgHdrInvalidType::clear_msg_type() {
  msg_type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidType::msg_type() const {
  return msg_type_;
}
inline void SimMsgHdrInvalidType::set_msg_type(::google::protobuf::int32 value) {
  _set_bit(1);
  msg_type_ = value;
}

// -------------------------------------------------------------------

// SimMsgHdrInvalidId

// required int32 msgID = 1;
inline bool SimMsgHdrInvalidId::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgHdrInvalidId::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidId::msgid() const {
  return msgid_;
}
inline void SimMsgHdrInvalidId::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// -------------------------------------------------------------------

// SimMsgHdrInvalidTime

// required int32 msgID = 1;
inline bool SimMsgHdrInvalidTime::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgHdrInvalidTime::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidTime::msgid() const {
  return msgid_;
}
inline void SimMsgHdrInvalidTime::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required int32 msg_time = 2;
inline bool SimMsgHdrInvalidTime::has_msg_time() const {
  return _has_bit(1);
}
inline void SimMsgHdrInvalidTime::clear_msg_time() {
  msg_time_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidTime::msg_time() const {
  return msg_time_;
}
inline void SimMsgHdrInvalidTime::set_msg_time(::google::protobuf::int32 value) {
  _set_bit(1);
  msg_time_ = value;
}

// -------------------------------------------------------------------

// SimMsgHdrInvalidSize

// required int32 msgID = 1;
inline bool SimMsgHdrInvalidSize::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgHdrInvalidSize::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidSize::msgid() const {
  return msgid_;
}
inline void SimMsgHdrInvalidSize::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required int32 msg_size = 2;
inline bool SimMsgHdrInvalidSize::has_msg_size() const {
  return _has_bit(1);
}
inline void SimMsgHdrInvalidSize::clear_msg_size() {
  msg_size_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SimMsgHdrInvalidSize::msg_size() const {
  return msg_size_;
}
inline void SimMsgHdrInvalidSize::set_msg_size(::google::protobuf::int32 value) {
  _set_bit(1);
  msg_size_ = value;
}

// -------------------------------------------------------------------

// SimMsgBodyInvalid

// required int32 msgID = 1;
inline bool SimMsgBodyInvalid::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgBodyInvalid::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgBodyInvalid::msgid() const {
  return msgid_;
}
inline void SimMsgBodyInvalid::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// -------------------------------------------------------------------

// SimMsgBodyInvalidTime

// required int32 msgID = 1;
inline bool SimMsgBodyInvalidTime::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgBodyInvalidTime::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgBodyInvalidTime::msgid() const {
  return msgid_;
}
inline void SimMsgBodyInvalidTime::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required double time = 2;
inline bool SimMsgBodyInvalidTime::has_time() const {
  return _has_bit(1);
}
inline void SimMsgBodyInvalidTime::clear_time() {
  time_ = 0;
  _clear_bit(1);
}
inline double SimMsgBodyInvalidTime::time() const {
  return time_;
}
inline void SimMsgBodyInvalidTime::set_time(double value) {
  _set_bit(1);
  time_ = value;
}

// -------------------------------------------------------------------

// SimMsgBodyInvalidId

// required int32 msgID = 1;
inline bool SimMsgBodyInvalidId::has_msgid() const {
  return _has_bit(0);
}
inline void SimMsgBodyInvalidId::clear_msgid() {
  msgid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SimMsgBodyInvalidId::msgid() const {
  return msgid_;
}
inline void SimMsgBodyInvalidId::set_msgid(::google::protobuf::int32 value) {
  _set_bit(0);
  msgid_ = value;
}

// required .prt.LocationType id_type = 2;
inline bool SimMsgBodyInvalidId::has_id_type() const {
  return _has_bit(1);
}
inline void SimMsgBodyInvalidId::clear_id_type() {
  id_type_ = 0;
  _clear_bit(1);
}
inline prt::LocationType SimMsgBodyInvalidId::id_type() const {
  return static_cast< prt::LocationType >(id_type_);
}
inline void SimMsgBodyInvalidId::set_id_type(prt::LocationType value) {
  GOOGLE_DCHECK(prt::LocationType_IsValid(value));
  _set_bit(1);
  id_type_ = value;
}

// required int32 ID = 3;
inline bool SimMsgBodyInvalidId::has_id() const {
  return _has_bit(2);
}
inline void SimMsgBodyInvalidId::clear_id() {
  id_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SimMsgBodyInvalidId::id() const {
  return id_;
}
inline void SimMsgBodyInvalidId::set_id(::google::protobuf::int32 value) {
  _set_bit(2);
  id_ = value;
}

// -------------------------------------------------------------------

// VehicleStatus

// required int32 vID = 1;
inline bool VehicleStatus::has_vid() const {
  return _has_bit(0);
}
inline void VehicleStatus::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 VehicleStatus::vid() const {
  return vid_;
}
inline void VehicleStatus::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 nose_locID = 3;
inline bool VehicleStatus::has_nose_locid() const {
  return _has_bit(1);
}
inline void VehicleStatus::clear_nose_locid() {
  nose_locid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 VehicleStatus::nose_locid() const {
  return nose_locid_;
}
inline void VehicleStatus::set_nose_locid(::google::protobuf::int32 value) {
  _set_bit(1);
  nose_locid_ = value;
}

// required float nose_pos = 4;
inline bool VehicleStatus::has_nose_pos() const {
  return _has_bit(2);
}
inline void VehicleStatus::clear_nose_pos() {
  nose_pos_ = 0;
  _clear_bit(2);
}
inline float VehicleStatus::nose_pos() const {
  return nose_pos_;
}
inline void VehicleStatus::set_nose_pos(float value) {
  _set_bit(2);
  nose_pos_ = value;
}

// required int32 tail_locID = 6;
inline bool VehicleStatus::has_tail_locid() const {
  return _has_bit(3);
}
inline void VehicleStatus::clear_tail_locid() {
  tail_locid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 VehicleStatus::tail_locid() const {
  return tail_locid_;
}
inline void VehicleStatus::set_tail_locid(::google::protobuf::int32 value) {
  _set_bit(3);
  tail_locid_ = value;
}

// required float tail_pos = 7;
inline bool VehicleStatus::has_tail_pos() const {
  return _has_bit(4);
}
inline void VehicleStatus::clear_tail_pos() {
  tail_pos_ = 0;
  _clear_bit(4);
}
inline float VehicleStatus::tail_pos() const {
  return tail_pos_;
}
inline void VehicleStatus::set_tail_pos(float value) {
  _set_bit(4);
  tail_pos_ = value;
}

// required float vel = 8;
inline bool VehicleStatus::has_vel() const {
  return _has_bit(5);
}
inline void VehicleStatus::clear_vel() {
  vel_ = 0;
  _clear_bit(5);
}
inline float VehicleStatus::vel() const {
  return vel_;
}
inline void VehicleStatus::set_vel(float value) {
  _set_bit(5);
  vel_ = value;
}

// required float accel = 9;
inline bool VehicleStatus::has_accel() const {
  return _has_bit(6);
}
inline void VehicleStatus::clear_accel() {
  accel_ = 0;
  _clear_bit(6);
}
inline float VehicleStatus::accel() const {
  return accel_;
}
inline void VehicleStatus::set_accel(float value) {
  _set_bit(6);
  accel_ = value;
}

// repeated int32 passengerIDs = 10 [packed = true];
inline int VehicleStatus::passengerids_size() const {
  return passengerids_.size();
}
inline void VehicleStatus::clear_passengerids() {
  passengerids_.Clear();
}
inline ::google::protobuf::int32 VehicleStatus::passengerids(int index) const {
  return passengerids_.Get(index);
}
inline void VehicleStatus::set_passengerids(int index, ::google::protobuf::int32 value) {
  passengerids_.Set(index, value);
}
inline void VehicleStatus::add_passengerids(::google::protobuf::int32 value) {
  passengerids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VehicleStatus::passengerids() const {
  return passengerids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VehicleStatus::mutable_passengerids() {
  return &passengerids_;
}

// optional int32 lvID = 11 [default = -1];
inline bool VehicleStatus::has_lvid() const {
  return _has_bit(8);
}
inline void VehicleStatus::clear_lvid() {
  lvid_ = -1;
  _clear_bit(8);
}
inline ::google::protobuf::int32 VehicleStatus::lvid() const {
  return lvid_;
}
inline void VehicleStatus::set_lvid(::google::protobuf::int32 value) {
  _set_bit(8);
  lvid_ = value;
}

// optional float lv_distance = 12;
inline bool VehicleStatus::has_lv_distance() const {
  return _has_bit(9);
}
inline void VehicleStatus::clear_lv_distance() {
  lv_distance_ = 0;
  _clear_bit(9);
}
inline float VehicleStatus::lv_distance() const {
  return lv_distance_;
}
inline void VehicleStatus::set_lv_distance(float value) {
  _set_bit(9);
  lv_distance_ = value;
}

// -------------------------------------------------------------------

// StationStatus

// required int32 sID = 1;
inline bool StationStatus::has_sid() const {
  return _has_bit(0);
}
inline void StationStatus::clear_sid() {
  sid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 StationStatus::sid() const {
  return sid_;
}
inline void StationStatus::set_sid(::google::protobuf::int32 value) {
  _set_bit(0);
  sid_ = value;
}

// optional string label = 2;
inline bool StationStatus::has_label() const {
  return _has_bit(1);
}
inline void StationStatus::clear_label() {
  if (label_ != &_default_label_) {
    label_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& StationStatus::label() const {
  return *label_;
}
inline void StationStatus::set_label(const ::std::string& value) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void StationStatus::set_label(const char* value) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void StationStatus::set_label(const char* value, size_t size) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StationStatus::mutable_label() {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  return label_;
}

// repeated .prt.PlatformStatus platform_status = 3;
inline int StationStatus::platform_status_size() const {
  return platform_status_.size();
}
inline void StationStatus::clear_platform_status() {
  platform_status_.Clear();
}
inline const ::prt::PlatformStatus& StationStatus::platform_status(int index) const {
  return platform_status_.Get(index);
}
inline ::prt::PlatformStatus* StationStatus::mutable_platform_status(int index) {
  return platform_status_.Mutable(index);
}
inline ::prt::PlatformStatus* StationStatus::add_platform_status() {
  return platform_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::PlatformStatus >&
StationStatus::platform_status() const {
  return platform_status_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::PlatformStatus >*
StationStatus::mutable_platform_status() {
  return &platform_status_;
}

// repeated int32 pID = 4 [packed = true];
inline int StationStatus::pid_size() const {
  return pid_.size();
}
inline void StationStatus::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::int32 StationStatus::pid(int index) const {
  return pid_.Get(index);
}
inline void StationStatus::set_pid(int index, ::google::protobuf::int32 value) {
  pid_.Set(index, value);
}
inline void StationStatus::add_pid(::google::protobuf::int32 value) {
  pid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StationStatus::pid() const {
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StationStatus::mutable_pid() {
  return &pid_;
}

// required int32 v_adv_time = 5;
inline bool StationStatus::has_v_adv_time() const {
  return _has_bit(4);
}
inline void StationStatus::clear_v_adv_time() {
  v_adv_time_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 StationStatus::v_adv_time() const {
  return v_adv_time_;
}
inline void StationStatus::set_v_adv_time(::google::protobuf::int32 value) {
  _set_bit(4);
  v_adv_time_ = value;
}

// required .prt.StationPolicy policy = 6;
inline bool StationStatus::has_policy() const {
  return _has_bit(5);
}
inline void StationStatus::clear_policy() {
  policy_ = 1;
  _clear_bit(5);
}
inline prt::StationPolicy StationStatus::policy() const {
  return static_cast< prt::StationPolicy >(policy_);
}
inline void StationStatus::set_policy(prt::StationPolicy value) {
  GOOGLE_DCHECK(prt::StationPolicy_IsValid(value));
  _set_bit(5);
  policy_ = value;
}

// -------------------------------------------------------------------

// PlatformStatus

// required int32 platID = 1;
inline bool PlatformStatus::has_platid() const {
  return _has_bit(0);
}
inline void PlatformStatus::clear_platid() {
  platid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 PlatformStatus::platid() const {
  return platid_;
}
inline void PlatformStatus::set_platid(::google::protobuf::int32 value) {
  _set_bit(0);
  platid_ = value;
}

// required int32 trackID = 2;
inline bool PlatformStatus::has_trackid() const {
  return _has_bit(1);
}
inline void PlatformStatus::clear_trackid() {
  trackid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 PlatformStatus::trackid() const {
  return trackid_;
}
inline void PlatformStatus::set_trackid(::google::protobuf::int32 value) {
  _set_bit(1);
  trackid_ = value;
}

// required bool unloading = 3;
inline bool PlatformStatus::has_unloading() const {
  return _has_bit(2);
}
inline void PlatformStatus::clear_unloading() {
  unloading_ = false;
  _clear_bit(2);
}
inline bool PlatformStatus::unloading() const {
  return unloading_;
}
inline void PlatformStatus::set_unloading(bool value) {
  _set_bit(2);
  unloading_ = value;
}

// required bool loading = 4;
inline bool PlatformStatus::has_loading() const {
  return _has_bit(3);
}
inline void PlatformStatus::clear_loading() {
  loading_ = false;
  _clear_bit(3);
}
inline bool PlatformStatus::loading() const {
  return loading_;
}
inline void PlatformStatus::set_loading(bool value) {
  _set_bit(3);
  loading_ = value;
}

// repeated .prt.BerthStatus berths = 5;
inline int PlatformStatus::berths_size() const {
  return berths_.size();
}
inline void PlatformStatus::clear_berths() {
  berths_.Clear();
}
inline const ::prt::BerthStatus& PlatformStatus::berths(int index) const {
  return berths_.Get(index);
}
inline ::prt::BerthStatus* PlatformStatus::mutable_berths(int index) {
  return berths_.Mutable(index);
}
inline ::prt::BerthStatus* PlatformStatus::add_berths() {
  return berths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::BerthStatus >&
PlatformStatus::berths() const {
  return berths_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::BerthStatus >*
PlatformStatus::mutable_berths() {
  return &berths_;
}

// -------------------------------------------------------------------

// BerthStatus

// required int32 bID = 1;
inline bool BerthStatus::has_bid() const {
  return _has_bit(0);
}
inline void BerthStatus::clear_bid() {
  bid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 BerthStatus::bid() const {
  return bid_;
}
inline void BerthStatus::set_bid(::google::protobuf::int32 value) {
  _set_bit(0);
  bid_ = value;
}

// required int32 vID = 2;
inline bool BerthStatus::has_vid() const {
  return _has_bit(1);
}
inline void BerthStatus::clear_vid() {
  vid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 BerthStatus::vid() const {
  return vid_;
}
inline void BerthStatus::set_vid(::google::protobuf::int32 value) {
  _set_bit(1);
  vid_ = value;
}

// required bool busy = 3;
inline bool BerthStatus::has_busy() const {
  return _has_bit(2);
}
inline void BerthStatus::clear_busy() {
  busy_ = false;
  _clear_bit(2);
}
inline bool BerthStatus::busy() const {
  return busy_;
}
inline void BerthStatus::set_busy(bool value) {
  _set_bit(2);
  busy_ = value;
}

// -------------------------------------------------------------------

// PassengerStatus

// required int32 pID = 1;
inline bool PassengerStatus::has_pid() const {
  return _has_bit(0);
}
inline void PassengerStatus::clear_pid() {
  pid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 PassengerStatus::pid() const {
  return pid_;
}
inline void PassengerStatus::set_pid(::google::protobuf::int32 value) {
  _set_bit(0);
  pid_ = value;
}

// required .prt.LocationType loc_type = 3;
inline bool PassengerStatus::has_loc_type() const {
  return _has_bit(1);
}
inline void PassengerStatus::clear_loc_type() {
  loc_type_ = 0;
  _clear_bit(1);
}
inline prt::LocationType PassengerStatus::loc_type() const {
  return static_cast< prt::LocationType >(loc_type_);
}
inline void PassengerStatus::set_loc_type(prt::LocationType value) {
  GOOGLE_DCHECK(prt::LocationType_IsValid(value));
  _set_bit(1);
  loc_type_ = value;
}

// required int32 locID = 4;
inline bool PassengerStatus::has_locid() const {
  return _has_bit(2);
}
inline void PassengerStatus::clear_locid() {
  locid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 PassengerStatus::locid() const {
  return locid_;
}
inline void PassengerStatus::set_locid(::google::protobuf::int32 value) {
  _set_bit(2);
  locid_ = value;
}

// required int32 src_stationID = 5;
inline bool PassengerStatus::has_src_stationid() const {
  return _has_bit(3);
}
inline void PassengerStatus::clear_src_stationid() {
  src_stationid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PassengerStatus::src_stationid() const {
  return src_stationid_;
}
inline void PassengerStatus::set_src_stationid(::google::protobuf::int32 value) {
  _set_bit(3);
  src_stationid_ = value;
}

// required int32 dest_stationID = 6;
inline bool PassengerStatus::has_dest_stationid() const {
  return _has_bit(4);
}
inline void PassengerStatus::clear_dest_stationid() {
  dest_stationid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 PassengerStatus::dest_stationid() const {
  return dest_stationid_;
}
inline void PassengerStatus::set_dest_stationid(::google::protobuf::int32 value) {
  _set_bit(4);
  dest_stationid_ = value;
}

// required double creation_time = 7;
inline bool PassengerStatus::has_creation_time() const {
  return _has_bit(5);
}
inline void PassengerStatus::clear_creation_time() {
  creation_time_ = 0;
  _clear_bit(5);
}
inline double PassengerStatus::creation_time() const {
  return creation_time_;
}
inline void PassengerStatus::set_creation_time(double value) {
  _set_bit(5);
  creation_time_ = value;
}

// required int32 mass = 11;
inline bool PassengerStatus::has_mass() const {
  return _has_bit(6);
}
inline void PassengerStatus::clear_mass() {
  mass_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 PassengerStatus::mass() const {
  return mass_;
}
inline void PassengerStatus::set_mass(::google::protobuf::int32 value) {
  _set_bit(6);
  mass_ = value;
}

// required bool trip_success = 13;
inline bool PassengerStatus::has_trip_success() const {
  return _has_bit(7);
}
inline void PassengerStatus::clear_trip_success() {
  trip_success_ = false;
  _clear_bit(7);
}
inline bool PassengerStatus::trip_success() const {
  return trip_success_;
}
inline void PassengerStatus::set_trip_success(bool value) {
  _set_bit(7);
  trip_success_ = value;
}

// -------------------------------------------------------------------

// RoutingEntry

// required int32 vID = 1;
inline bool RoutingEntry::has_vid() const {
  return _has_bit(0);
}
inline void RoutingEntry::clear_vid() {
  vid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RoutingEntry::vid() const {
  return vid_;
}
inline void RoutingEntry::set_vid(::google::protobuf::int32 value) {
  _set_bit(0);
  vid_ = value;
}

// required int32 trackID = 2;
inline bool RoutingEntry::has_trackid() const {
  return _has_bit(1);
}
inline void RoutingEntry::clear_trackid() {
  trackid_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RoutingEntry::trackid() const {
  return trackid_;
}
inline void RoutingEntry::set_trackid(::google::protobuf::int32 value) {
  _set_bit(1);
  trackid_ = value;
}

// optional int32 msgID = 3;
inline bool RoutingEntry::has_msgid() const {
  return _has_bit(2);
}
inline void RoutingEntry::clear_msgid() {
  msgid_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RoutingEntry::msgid() const {
  return msgid_;
}
inline void RoutingEntry::set_msgid(::google::protobuf::int32 value) {
  _set_bit(2);
  msgid_ = value;
}

// -------------------------------------------------------------------

// SwitchStatus

// required int32 swID = 1;
inline bool SwitchStatus::has_swid() const {
  return _has_bit(0);
}
inline void SwitchStatus::clear_swid() {
  swid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SwitchStatus::swid() const {
  return swid_;
}
inline void SwitchStatus::set_swid(::google::protobuf::int32 value) {
  _set_bit(0);
  swid_ = value;
}

// optional string label = 2;
inline bool SwitchStatus::has_label() const {
  return _has_bit(1);
}
inline void SwitchStatus::clear_label() {
  if (label_ != &_default_label_) {
    label_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SwitchStatus::label() const {
  return *label_;
}
inline void SwitchStatus::set_label(const ::std::string& value) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void SwitchStatus::set_label(const char* value) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void SwitchStatus::set_label(const char* value, size_t size) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SwitchStatus::mutable_label() {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  return label_;
}

// repeated .prt.RoutingEntry entry = 3;
inline int SwitchStatus::entry_size() const {
  return entry_.size();
}
inline void SwitchStatus::clear_entry() {
  entry_.Clear();
}
inline const ::prt::RoutingEntry& SwitchStatus::entry(int index) const {
  return entry_.Get(index);
}
inline ::prt::RoutingEntry* SwitchStatus::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::prt::RoutingEntry* SwitchStatus::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prt::RoutingEntry >&
SwitchStatus::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::prt::RoutingEntry >*
SwitchStatus::mutable_entry() {
  return &entry_;
}

// -------------------------------------------------------------------

// TrackStatus

// required int32 trackID = 1;
inline bool TrackStatus::has_trackid() const {
  return _has_bit(0);
}
inline void TrackStatus::clear_trackid() {
  trackid_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 TrackStatus::trackid() const {
  return trackid_;
}
inline void TrackStatus::set_trackid(::google::protobuf::int32 value) {
  _set_bit(0);
  trackid_ = value;
}

// optional string label = 2;
inline bool TrackStatus::has_label() const {
  return _has_bit(1);
}
inline void TrackStatus::clear_label() {
  if (label_ != &_default_label_) {
    label_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& TrackStatus::label() const {
  return *label_;
}
inline void TrackStatus::set_label(const ::std::string& value) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void TrackStatus::set_label(const char* value) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void TrackStatus::set_label(const char* value, size_t size) {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackStatus::mutable_label() {
  _set_bit(1);
  if (label_ == &_default_label_) {
    label_ = new ::std::string;
  }
  return label_;
}

// required int32 max_speed = 3;
inline bool TrackStatus::has_max_speed() const {
  return _has_bit(2);
}
inline void TrackStatus::clear_max_speed() {
  max_speed_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 TrackStatus::max_speed() const {
  return max_speed_;
}
inline void TrackStatus::set_max_speed(::google::protobuf::int32 value) {
  _set_bit(2);
  max_speed_ = value;
}

// required int32 length = 4;
inline bool TrackStatus::has_length() const {
  return _has_bit(3);
}
inline void TrackStatus::clear_length() {
  length_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 TrackStatus::length() const {
  return length_;
}
inline void TrackStatus::set_length(::google::protobuf::int32 value) {
  _set_bit(3);
  length_ = value;
}

// repeated int32 vID = 5 [packed = true];
inline int TrackStatus::vid_size() const {
  return vid_.size();
}
inline void TrackStatus::clear_vid() {
  vid_.Clear();
}
inline ::google::protobuf::int32 TrackStatus::vid(int index) const {
  return vid_.Get(index);
}
inline void TrackStatus::set_vid(int index, ::google::protobuf::int32 value) {
  vid_.Set(index, value);
}
inline void TrackStatus::add_vid(::google::protobuf::int32 value) {
  vid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrackStatus::vid() const {
  return vid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrackStatus::mutable_vid() {
  return &vid_;
}

// required int32 next = 6;
inline bool TrackStatus::has_next() const {
  return _has_bit(5);
}
inline void TrackStatus::clear_next() {
  next_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 TrackStatus::next() const {
  return next_;
}
inline void TrackStatus::set_next(::google::protobuf::int32 value) {
  _set_bit(5);
  next_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace prt

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< prt::Misc>() {
  return prt::Misc_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< prt::CtrlMsgType>() {
  return prt::CtrlMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< prt::LocationType>() {
  return prt::LocationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< prt::StationPolicy>() {
  return prt::StationPolicy_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< prt::SimMsgType>() {
  return prt::SimMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2eproto__INCLUDED
