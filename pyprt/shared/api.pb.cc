// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace prt {

namespace {

const ::google::protobuf::Descriptor* PolyCoeffs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolyCoeffs_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spline_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlCmdVehicleTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlCmdVehicleTrajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlCmdStationLaunch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlCmdStationLaunch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlCmdPassengersEmbark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlCmdPassengersEmbark_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlCmdPassengersDisembark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlCmdPassengersDisembark_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlCmdSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlCmdSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequestVehicleStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequestVehicleStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequestStationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequestStationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequestStationSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequestStationSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequestPassengerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequestPassengerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequestSwitchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequestSwitchStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequestTrackSegmentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequestTrackSegmentStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlRequestTotalStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlRequestTotalStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlSetnotifyVehiclePosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlSetnotifyVehiclePosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlSetnotifyTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlSetnotifyTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CtrlResume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlResume_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimUnimplemented_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimUnimplemented_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimAbortVehicleSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimAbortVehicleSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimCompleteVehicleSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimCompleteVehicleSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimCompleteStationLaunch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimCompleteStationLaunch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimCompletePassengerLoadVehicle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimCompletePassengerLoadVehicle_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimCompleteSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimCompleteSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimResponseVehicleStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimResponseVehicleStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimResponseStationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimResponseStationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimResponseStationSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimResponseStationSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimResponsePassengerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimResponsePassengerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimResponseSwitchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimResponseSwitchStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimResponseTrackSegmentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimResponseTrackSegmentStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimResponseTotalStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimResponseTotalStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimRequestSwitchCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimRequestSwitchCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyVehiclePosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyVehiclePosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyVehicleArrive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyVehicleArrive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyVehicleExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyVehicleExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyVehicleReadyLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyVehicleReadyLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyVehicleCollision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyVehicleCollision_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyPassengerLoadStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyPassengerLoadStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyPassengerLoadEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyPassengerLoadEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyPassengerUnloadStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyPassengerUnloadStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyPassengerUnloadEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyPassengerUnloadEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyPassengerDelivered_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyPassengerDelivered_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyPassengerMisdelivered_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyPassengerMisdelivered_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyStationReadyLaunch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyStationReadyLaunch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNotifyStationUnreadyLaunch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNotifyStationUnreadyLaunch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventTrackSegmentDisabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventTrackSegmentDisabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventTrackSegmentReenabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventTrackSegmentReenabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventSwitchDisabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventSwitchDisabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventSwitchReenabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventSwitchReenabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventStationDisabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventStationDisabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventStationReenabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventStationReenabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventVehicleDisabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventVehicleDisabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventVehicleReenabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventVehicleReenabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventPassengerCreated_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventPassengerCreated_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimEventPassengerChangedest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimEventPassengerChangedest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgHdrInvalidSeparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgHdrInvalidSeparator_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgHdrInvalidType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgHdrInvalidType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgHdrInvalidID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgHdrInvalidID_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgHdrInvalidTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgHdrInvalidTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgHdrInvalidSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgHdrInvalidSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgBodyInvalidID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgBodyInvalidID_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgBodyInvalidAccel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgBodyInvalidAccel_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimMsgBodyInvalidJerk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimMsgBodyInvalidJerk_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* StationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlatformStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlatformStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* BerthStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BerthStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassengerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassengerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutingEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutingEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackSegmentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackSegmentStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Misc_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StationPolicy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SimMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_api_2eproto() {
  protobuf_AddDesc_api_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api.proto");
  GOOGLE_CHECK(file != NULL);
  PolyCoeffs_descriptor_ = file->message_type(0);
  static const int PolyCoeffs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyCoeffs, coeffs_),
  };
  PolyCoeffs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PolyCoeffs_descriptor_,
      PolyCoeffs::default_instance_,
      PolyCoeffs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyCoeffs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolyCoeffs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PolyCoeffs));
  Spline_descriptor_ = file->message_type(1);
  static const int Spline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spline, polys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spline, times_),
  };
  Spline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spline_descriptor_,
      Spline::default_instance_,
      Spline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spline));
  CtrlCmdVehicleTrajectory_descriptor_ = file->message_type(2);
  static const int CtrlCmdVehicleTrajectory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdVehicleTrajectory, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdVehicleTrajectory, spline_),
  };
  CtrlCmdVehicleTrajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlCmdVehicleTrajectory_descriptor_,
      CtrlCmdVehicleTrajectory::default_instance_,
      CtrlCmdVehicleTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdVehicleTrajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdVehicleTrajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlCmdVehicleTrajectory));
  CtrlCmdStationLaunch_descriptor_ = file->message_type(3);
  static const int CtrlCmdStationLaunch_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, target_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, max_accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, max_decel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, max_jerk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, emergency_),
  };
  CtrlCmdStationLaunch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlCmdStationLaunch_descriptor_,
      CtrlCmdStationLaunch::default_instance_,
      CtrlCmdStationLaunch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdStationLaunch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlCmdStationLaunch));
  CtrlCmdPassengersEmbark_descriptor_ = file->message_type(4);
  static const int CtrlCmdPassengersEmbark_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersEmbark, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersEmbark, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersEmbark, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersEmbark, berthid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersEmbark, passengerids_),
  };
  CtrlCmdPassengersEmbark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlCmdPassengersEmbark_descriptor_,
      CtrlCmdPassengersEmbark::default_instance_,
      CtrlCmdPassengersEmbark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersEmbark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersEmbark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlCmdPassengersEmbark));
  CtrlCmdPassengersDisembark_descriptor_ = file->message_type(5);
  static const int CtrlCmdPassengersDisembark_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersDisembark, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersDisembark, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersDisembark, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersDisembark, berthid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersDisembark, passengerids_),
  };
  CtrlCmdPassengersDisembark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlCmdPassengersDisembark_descriptor_,
      CtrlCmdPassengersDisembark::default_instance_,
      CtrlCmdPassengersDisembark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersDisembark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdPassengersDisembark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlCmdPassengersDisembark));
  CtrlCmdSwitch_descriptor_ = file->message_type(6);
  static const int CtrlCmdSwitch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdSwitch, swid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdSwitch, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdSwitch, tsid_),
  };
  CtrlCmdSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlCmdSwitch_descriptor_,
      CtrlCmdSwitch::default_instance_,
      CtrlCmdSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlCmdSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlCmdSwitch));
  CtrlRequestVehicleStatus_descriptor_ = file->message_type(7);
  static const int CtrlRequestVehicleStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestVehicleStatus, vid_),
  };
  CtrlRequestVehicleStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRequestVehicleStatus_descriptor_,
      CtrlRequestVehicleStatus::default_instance_,
      CtrlRequestVehicleStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestVehicleStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestVehicleStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRequestVehicleStatus));
  CtrlRequestStationStatus_descriptor_ = file->message_type(8);
  static const int CtrlRequestStationStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestStationStatus, sid_),
  };
  CtrlRequestStationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRequestStationStatus_descriptor_,
      CtrlRequestStationStatus::default_instance_,
      CtrlRequestStationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestStationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestStationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRequestStationStatus));
  CtrlRequestStationSummary_descriptor_ = file->message_type(9);
  static const int CtrlRequestStationSummary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestStationSummary, sid_),
  };
  CtrlRequestStationSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRequestStationSummary_descriptor_,
      CtrlRequestStationSummary::default_instance_,
      CtrlRequestStationSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestStationSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestStationSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRequestStationSummary));
  CtrlRequestPassengerStatus_descriptor_ = file->message_type(10);
  static const int CtrlRequestPassengerStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestPassengerStatus, pid_),
  };
  CtrlRequestPassengerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRequestPassengerStatus_descriptor_,
      CtrlRequestPassengerStatus::default_instance_,
      CtrlRequestPassengerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestPassengerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestPassengerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRequestPassengerStatus));
  CtrlRequestSwitchStatus_descriptor_ = file->message_type(11);
  static const int CtrlRequestSwitchStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestSwitchStatus, swid_),
  };
  CtrlRequestSwitchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRequestSwitchStatus_descriptor_,
      CtrlRequestSwitchStatus::default_instance_,
      CtrlRequestSwitchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestSwitchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestSwitchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRequestSwitchStatus));
  CtrlRequestTrackSegmentStatus_descriptor_ = file->message_type(12);
  static const int CtrlRequestTrackSegmentStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestTrackSegmentStatus, tsid_),
  };
  CtrlRequestTrackSegmentStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRequestTrackSegmentStatus_descriptor_,
      CtrlRequestTrackSegmentStatus::default_instance_,
      CtrlRequestTrackSegmentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestTrackSegmentStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestTrackSegmentStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRequestTrackSegmentStatus));
  CtrlRequestTotalStatus_descriptor_ = file->message_type(13);
  static const int CtrlRequestTotalStatus_offsets_[1] = {
  };
  CtrlRequestTotalStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlRequestTotalStatus_descriptor_,
      CtrlRequestTotalStatus::default_instance_,
      CtrlRequestTotalStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestTotalStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlRequestTotalStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlRequestTotalStatus));
  CtrlSetnotifyVehiclePosition_descriptor_ = file->message_type(14);
  static const int CtrlSetnotifyVehiclePosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyVehiclePosition, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyVehiclePosition, tsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyVehiclePosition, pos_),
  };
  CtrlSetnotifyVehiclePosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlSetnotifyVehiclePosition_descriptor_,
      CtrlSetnotifyVehiclePosition::default_instance_,
      CtrlSetnotifyVehiclePosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyVehiclePosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyVehiclePosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlSetnotifyVehiclePosition));
  CtrlSetnotifyTime_descriptor_ = file->message_type(15);
  static const int CtrlSetnotifyTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyTime, time_),
  };
  CtrlSetnotifyTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlSetnotifyTime_descriptor_,
      CtrlSetnotifyTime::default_instance_,
      CtrlSetnotifyTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSetnotifyTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlSetnotifyTime));
  CtrlResume_descriptor_ = file->message_type(16);
  static const int CtrlResume_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResume, last_sim_msgid_),
  };
  CtrlResume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtrlResume_descriptor_,
      CtrlResume::default_instance_,
      CtrlResume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlResume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtrlResume));
  SimStart_descriptor_ = file->message_type(17);
  static const int SimStart_offsets_[1] = {
  };
  SimStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimStart_descriptor_,
      SimStart::default_instance_,
      SimStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimStart));
  SimEnd_descriptor_ = file->message_type(18);
  static const int SimEnd_offsets_[1] = {
  };
  SimEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEnd_descriptor_,
      SimEnd::default_instance_,
      SimEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEnd));
  SimUnimplemented_descriptor_ = file->message_type(19);
  static const int SimUnimplemented_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimUnimplemented, msgid_),
  };
  SimUnimplemented_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimUnimplemented_descriptor_,
      SimUnimplemented::default_instance_,
      SimUnimplemented_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimUnimplemented, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimUnimplemented, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimUnimplemented));
  SimAbortVehicleSpeed_descriptor_ = file->message_type(20);
  static const int SimAbortVehicleSpeed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimAbortVehicleSpeed, msgid_),
  };
  SimAbortVehicleSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimAbortVehicleSpeed_descriptor_,
      SimAbortVehicleSpeed::default_instance_,
      SimAbortVehicleSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimAbortVehicleSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimAbortVehicleSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimAbortVehicleSpeed));
  SimCompleteVehicleSpeed_descriptor_ = file->message_type(21);
  static const int SimCompleteVehicleSpeed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteVehicleSpeed, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteVehicleSpeed, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteVehicleSpeed, speed_),
  };
  SimCompleteVehicleSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimCompleteVehicleSpeed_descriptor_,
      SimCompleteVehicleSpeed::default_instance_,
      SimCompleteVehicleSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteVehicleSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteVehicleSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimCompleteVehicleSpeed));
  SimCompleteStationLaunch_descriptor_ = file->message_type(22);
  static const int SimCompleteStationLaunch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteStationLaunch, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteStationLaunch, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteStationLaunch, vid_),
  };
  SimCompleteStationLaunch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimCompleteStationLaunch_descriptor_,
      SimCompleteStationLaunch::default_instance_,
      SimCompleteStationLaunch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteStationLaunch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteStationLaunch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimCompleteStationLaunch));
  SimCompletePassengerLoadVehicle_descriptor_ = file->message_type(23);
  static const int SimCompletePassengerLoadVehicle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompletePassengerLoadVehicle, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompletePassengerLoadVehicle, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompletePassengerLoadVehicle, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompletePassengerLoadVehicle, sid_),
  };
  SimCompletePassengerLoadVehicle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimCompletePassengerLoadVehicle_descriptor_,
      SimCompletePassengerLoadVehicle::default_instance_,
      SimCompletePassengerLoadVehicle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompletePassengerLoadVehicle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompletePassengerLoadVehicle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimCompletePassengerLoadVehicle));
  SimCompleteSwitch_descriptor_ = file->message_type(24);
  static const int SimCompleteSwitch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteSwitch, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteSwitch, swid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteSwitch, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteSwitch, tsid_),
  };
  SimCompleteSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimCompleteSwitch_descriptor_,
      SimCompleteSwitch::default_instance_,
      SimCompleteSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCompleteSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimCompleteSwitch));
  SimResponseVehicleStatus_descriptor_ = file->message_type(25);
  static const int SimResponseVehicleStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseVehicleStatus, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseVehicleStatus, v_status_),
  };
  SimResponseVehicleStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimResponseVehicleStatus_descriptor_,
      SimResponseVehicleStatus::default_instance_,
      SimResponseVehicleStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseVehicleStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseVehicleStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimResponseVehicleStatus));
  SimResponseStationStatus_descriptor_ = file->message_type(26);
  static const int SimResponseStationStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationStatus, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationStatus, s_status_),
  };
  SimResponseStationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimResponseStationStatus_descriptor_,
      SimResponseStationStatus::default_instance_,
      SimResponseStationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimResponseStationStatus));
  SimResponseStationSummary_descriptor_ = file->message_type(27);
  static const int SimResponseStationSummary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationSummary, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationSummary, s_summary_),
  };
  SimResponseStationSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimResponseStationSummary_descriptor_,
      SimResponseStationSummary::default_instance_,
      SimResponseStationSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseStationSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimResponseStationSummary));
  SimResponsePassengerStatus_descriptor_ = file->message_type(28);
  static const int SimResponsePassengerStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponsePassengerStatus, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponsePassengerStatus, p_status_),
  };
  SimResponsePassengerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimResponsePassengerStatus_descriptor_,
      SimResponsePassengerStatus::default_instance_,
      SimResponsePassengerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponsePassengerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponsePassengerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimResponsePassengerStatus));
  SimResponseSwitchStatus_descriptor_ = file->message_type(29);
  static const int SimResponseSwitchStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseSwitchStatus, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseSwitchStatus, sw_status_),
  };
  SimResponseSwitchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimResponseSwitchStatus_descriptor_,
      SimResponseSwitchStatus::default_instance_,
      SimResponseSwitchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseSwitchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseSwitchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimResponseSwitchStatus));
  SimResponseTrackSegmentStatus_descriptor_ = file->message_type(30);
  static const int SimResponseTrackSegmentStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTrackSegmentStatus, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTrackSegmentStatus, ts_status_),
  };
  SimResponseTrackSegmentStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimResponseTrackSegmentStatus_descriptor_,
      SimResponseTrackSegmentStatus::default_instance_,
      SimResponseTrackSegmentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTrackSegmentStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTrackSegmentStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimResponseTrackSegmentStatus));
  SimResponseTotalStatus_descriptor_ = file->message_type(31);
  static const int SimResponseTotalStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, v_statuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, s_statuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, p_statuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, sw_statuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, ts_statuses_),
  };
  SimResponseTotalStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimResponseTotalStatus_descriptor_,
      SimResponseTotalStatus::default_instance_,
      SimResponseTotalStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimResponseTotalStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimResponseTotalStatus));
  SimRequestSwitchCmd_descriptor_ = file->message_type(32);
  static const int SimRequestSwitchCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimRequestSwitchCmd, swid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimRequestSwitchCmd, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimRequestSwitchCmd, ts1id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimRequestSwitchCmd, ts2id_),
  };
  SimRequestSwitchCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimRequestSwitchCmd_descriptor_,
      SimRequestSwitchCmd::default_instance_,
      SimRequestSwitchCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimRequestSwitchCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimRequestSwitchCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimRequestSwitchCmd));
  SimNotifyVehiclePosition_descriptor_ = file->message_type(33);
  static const int SimNotifyVehiclePosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehiclePosition, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehiclePosition, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehiclePosition, tsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehiclePosition, pos_),
  };
  SimNotifyVehiclePosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyVehiclePosition_descriptor_,
      SimNotifyVehiclePosition::default_instance_,
      SimNotifyVehiclePosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehiclePosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehiclePosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyVehiclePosition));
  SimNotifyTime_descriptor_ = file->message_type(34);
  static const int SimNotifyTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyTime, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyTime, time_),
  };
  SimNotifyTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyTime_descriptor_,
      SimNotifyTime::default_instance_,
      SimNotifyTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyTime));
  SimNotifyVehicleArrive_descriptor_ = file->message_type(35);
  static const int SimNotifyVehicleArrive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleArrive, v_status_),
  };
  SimNotifyVehicleArrive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyVehicleArrive_descriptor_,
      SimNotifyVehicleArrive::default_instance_,
      SimNotifyVehicleArrive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleArrive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleArrive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyVehicleArrive));
  SimNotifyVehicleExit_descriptor_ = file->message_type(36);
  static const int SimNotifyVehicleExit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleExit, v_status_),
  };
  SimNotifyVehicleExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyVehicleExit_descriptor_,
      SimNotifyVehicleExit::default_instance_,
      SimNotifyVehicleExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyVehicleExit));
  SimNotifyVehicleReadyLoad_descriptor_ = file->message_type(37);
  static const int SimNotifyVehicleReadyLoad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleReadyLoad, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleReadyLoad, sid_),
  };
  SimNotifyVehicleReadyLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyVehicleReadyLoad_descriptor_,
      SimNotifyVehicleReadyLoad::default_instance_,
      SimNotifyVehicleReadyLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleReadyLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleReadyLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyVehicleReadyLoad));
  SimNotifyVehicleCollision_descriptor_ = file->message_type(38);
  static const int SimNotifyVehicleCollision_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, v1id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, v2id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, loc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, locid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, delta_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, rearend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, sideswipe_),
  };
  SimNotifyVehicleCollision_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyVehicleCollision_descriptor_,
      SimNotifyVehicleCollision::default_instance_,
      SimNotifyVehicleCollision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyVehicleCollision, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyVehicleCollision));
  SimNotifyPassengerLoadStart_descriptor_ = file->message_type(39);
  static const int SimNotifyPassengerLoadStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadStart, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadStart, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadStart, pid_),
  };
  SimNotifyPassengerLoadStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyPassengerLoadStart_descriptor_,
      SimNotifyPassengerLoadStart::default_instance_,
      SimNotifyPassengerLoadStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyPassengerLoadStart));
  SimNotifyPassengerLoadEnd_descriptor_ = file->message_type(40);
  static const int SimNotifyPassengerLoadEnd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadEnd, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadEnd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadEnd, pid_),
  };
  SimNotifyPassengerLoadEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyPassengerLoadEnd_descriptor_,
      SimNotifyPassengerLoadEnd::default_instance_,
      SimNotifyPassengerLoadEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerLoadEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyPassengerLoadEnd));
  SimNotifyPassengerUnloadStart_descriptor_ = file->message_type(41);
  static const int SimNotifyPassengerUnloadStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadStart, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadStart, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadStart, pid_),
  };
  SimNotifyPassengerUnloadStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyPassengerUnloadStart_descriptor_,
      SimNotifyPassengerUnloadStart::default_instance_,
      SimNotifyPassengerUnloadStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyPassengerUnloadStart));
  SimNotifyPassengerUnloadEnd_descriptor_ = file->message_type(42);
  static const int SimNotifyPassengerUnloadEnd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadEnd, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadEnd, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadEnd, pid_),
  };
  SimNotifyPassengerUnloadEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyPassengerUnloadEnd_descriptor_,
      SimNotifyPassengerUnloadEnd::default_instance_,
      SimNotifyPassengerUnloadEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerUnloadEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyPassengerUnloadEnd));
  SimNotifyPassengerDelivered_descriptor_ = file->message_type(43);
  static const int SimNotifyPassengerDelivered_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerDelivered, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerDelivered, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerDelivered, pid_),
  };
  SimNotifyPassengerDelivered_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyPassengerDelivered_descriptor_,
      SimNotifyPassengerDelivered::default_instance_,
      SimNotifyPassengerDelivered_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerDelivered, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerDelivered, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyPassengerDelivered));
  SimNotifyPassengerMisdelivered_descriptor_ = file->message_type(44);
  static const int SimNotifyPassengerMisdelivered_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerMisdelivered, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerMisdelivered, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerMisdelivered, pid_),
  };
  SimNotifyPassengerMisdelivered_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyPassengerMisdelivered_descriptor_,
      SimNotifyPassengerMisdelivered::default_instance_,
      SimNotifyPassengerMisdelivered_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerMisdelivered, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyPassengerMisdelivered, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyPassengerMisdelivered));
  SimNotifyStationReadyLaunch_descriptor_ = file->message_type(45);
  static const int SimNotifyStationReadyLaunch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationReadyLaunch, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationReadyLaunch, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationReadyLaunch, pid_),
  };
  SimNotifyStationReadyLaunch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyStationReadyLaunch_descriptor_,
      SimNotifyStationReadyLaunch::default_instance_,
      SimNotifyStationReadyLaunch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationReadyLaunch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationReadyLaunch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyStationReadyLaunch));
  SimNotifyStationUnreadyLaunch_descriptor_ = file->message_type(46);
  static const int SimNotifyStationUnreadyLaunch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationUnreadyLaunch, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationUnreadyLaunch, sid_),
  };
  SimNotifyStationUnreadyLaunch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNotifyStationUnreadyLaunch_descriptor_,
      SimNotifyStationUnreadyLaunch::default_instance_,
      SimNotifyStationUnreadyLaunch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationUnreadyLaunch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNotifyStationUnreadyLaunch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNotifyStationUnreadyLaunch));
  SimEventTrackSegmentDisabled_descriptor_ = file->message_type(47);
  static const int SimEventTrackSegmentDisabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventTrackSegmentDisabled, tsid_),
  };
  SimEventTrackSegmentDisabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventTrackSegmentDisabled_descriptor_,
      SimEventTrackSegmentDisabled::default_instance_,
      SimEventTrackSegmentDisabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventTrackSegmentDisabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventTrackSegmentDisabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventTrackSegmentDisabled));
  SimEventTrackSegmentReenabled_descriptor_ = file->message_type(48);
  static const int SimEventTrackSegmentReenabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventTrackSegmentReenabled, tsid_),
  };
  SimEventTrackSegmentReenabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventTrackSegmentReenabled_descriptor_,
      SimEventTrackSegmentReenabled::default_instance_,
      SimEventTrackSegmentReenabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventTrackSegmentReenabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventTrackSegmentReenabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventTrackSegmentReenabled));
  SimEventSwitchDisabled_descriptor_ = file->message_type(49);
  static const int SimEventSwitchDisabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventSwitchDisabled, swid_),
  };
  SimEventSwitchDisabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventSwitchDisabled_descriptor_,
      SimEventSwitchDisabled::default_instance_,
      SimEventSwitchDisabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventSwitchDisabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventSwitchDisabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventSwitchDisabled));
  SimEventSwitchReenabled_descriptor_ = file->message_type(50);
  static const int SimEventSwitchReenabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventSwitchReenabled, swid_),
  };
  SimEventSwitchReenabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventSwitchReenabled_descriptor_,
      SimEventSwitchReenabled::default_instance_,
      SimEventSwitchReenabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventSwitchReenabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventSwitchReenabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventSwitchReenabled));
  SimEventStationDisabled_descriptor_ = file->message_type(51);
  static const int SimEventStationDisabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventStationDisabled, sid_),
  };
  SimEventStationDisabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventStationDisabled_descriptor_,
      SimEventStationDisabled::default_instance_,
      SimEventStationDisabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventStationDisabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventStationDisabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventStationDisabled));
  SimEventStationReenabled_descriptor_ = file->message_type(52);
  static const int SimEventStationReenabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventStationReenabled, sid_),
  };
  SimEventStationReenabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventStationReenabled_descriptor_,
      SimEventStationReenabled::default_instance_,
      SimEventStationReenabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventStationReenabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventStationReenabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventStationReenabled));
  SimEventVehicleDisabled_descriptor_ = file->message_type(53);
  static const int SimEventVehicleDisabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventVehicleDisabled, vid_),
  };
  SimEventVehicleDisabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventVehicleDisabled_descriptor_,
      SimEventVehicleDisabled::default_instance_,
      SimEventVehicleDisabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventVehicleDisabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventVehicleDisabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventVehicleDisabled));
  SimEventVehicleReenabled_descriptor_ = file->message_type(54);
  static const int SimEventVehicleReenabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventVehicleReenabled, vid_),
  };
  SimEventVehicleReenabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventVehicleReenabled_descriptor_,
      SimEventVehicleReenabled::default_instance_,
      SimEventVehicleReenabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventVehicleReenabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventVehicleReenabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventVehicleReenabled));
  SimEventPassengerCreated_descriptor_ = file->message_type(55);
  static const int SimEventPassengerCreated_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventPassengerCreated, p_status_),
  };
  SimEventPassengerCreated_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventPassengerCreated_descriptor_,
      SimEventPassengerCreated::default_instance_,
      SimEventPassengerCreated_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventPassengerCreated, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventPassengerCreated, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventPassengerCreated));
  SimEventPassengerChangedest_descriptor_ = file->message_type(56);
  static const int SimEventPassengerChangedest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventPassengerChangedest, pid_),
  };
  SimEventPassengerChangedest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimEventPassengerChangedest_descriptor_,
      SimEventPassengerChangedest::default_instance_,
      SimEventPassengerChangedest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventPassengerChangedest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimEventPassengerChangedest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimEventPassengerChangedest));
  SimMsgHdrInvalidSeparator_descriptor_ = file->message_type(57);
  static const int SimMsgHdrInvalidSeparator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSeparator, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSeparator, msg_sep_),
  };
  SimMsgHdrInvalidSeparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgHdrInvalidSeparator_descriptor_,
      SimMsgHdrInvalidSeparator::default_instance_,
      SimMsgHdrInvalidSeparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSeparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSeparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgHdrInvalidSeparator));
  SimMsgHdrInvalidType_descriptor_ = file->message_type(58);
  static const int SimMsgHdrInvalidType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidType, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidType, msg_type_),
  };
  SimMsgHdrInvalidType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgHdrInvalidType_descriptor_,
      SimMsgHdrInvalidType::default_instance_,
      SimMsgHdrInvalidType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgHdrInvalidType));
  SimMsgHdrInvalidID_descriptor_ = file->message_type(59);
  static const int SimMsgHdrInvalidID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidID, msgid_),
  };
  SimMsgHdrInvalidID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgHdrInvalidID_descriptor_,
      SimMsgHdrInvalidID::default_instance_,
      SimMsgHdrInvalidID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgHdrInvalidID));
  SimMsgHdrInvalidTime_descriptor_ = file->message_type(60);
  static const int SimMsgHdrInvalidTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidTime, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidTime, msg_time_),
  };
  SimMsgHdrInvalidTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgHdrInvalidTime_descriptor_,
      SimMsgHdrInvalidTime::default_instance_,
      SimMsgHdrInvalidTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgHdrInvalidTime));
  SimMsgHdrInvalidSize_descriptor_ = file->message_type(61);
  static const int SimMsgHdrInvalidSize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSize, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSize, msg_size_),
  };
  SimMsgHdrInvalidSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgHdrInvalidSize_descriptor_,
      SimMsgHdrInvalidSize::default_instance_,
      SimMsgHdrInvalidSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgHdrInvalidSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgHdrInvalidSize));
  SimMsgBodyInvalidID_descriptor_ = file->message_type(62);
  static const int SimMsgBodyInvalidID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidID, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidID, loc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidID, locid_),
  };
  SimMsgBodyInvalidID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgBodyInvalidID_descriptor_,
      SimMsgBodyInvalidID::default_instance_,
      SimMsgBodyInvalidID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgBodyInvalidID));
  SimMsgBodyInvalidAccel_descriptor_ = file->message_type(63);
  static const int SimMsgBodyInvalidAccel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidAccel, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidAccel, accel_),
  };
  SimMsgBodyInvalidAccel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgBodyInvalidAccel_descriptor_,
      SimMsgBodyInvalidAccel::default_instance_,
      SimMsgBodyInvalidAccel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidAccel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidAccel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgBodyInvalidAccel));
  SimMsgBodyInvalidJerk_descriptor_ = file->message_type(64);
  static const int SimMsgBodyInvalidJerk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidJerk, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidJerk, jerk_),
  };
  SimMsgBodyInvalidJerk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimMsgBodyInvalidJerk_descriptor_,
      SimMsgBodyInvalidJerk::default_instance_,
      SimMsgBodyInvalidJerk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidJerk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimMsgBodyInvalidJerk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimMsgBodyInvalidJerk));
  VehicleStatus_descriptor_ = file->message_type(65);
  static const int VehicleStatus_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, nose_loc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, nose_locid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, nose_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, tail_loc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, tail_locid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, tail_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, passengerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, headway_),
  };
  VehicleStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleStatus_descriptor_,
      VehicleStatus::default_instance_,
      VehicleStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleStatus));
  StationSummary_descriptor_ = file->message_type(66);
  static const int StationSummary_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, loaded_ready_launch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, unloaded_ready_launch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, next_accept_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, vehicles_needed_),
  };
  StationSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationSummary_descriptor_,
      StationSummary::default_instance_,
      StationSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationSummary));
  StationStatus_descriptor_ = file->message_type(67);
  static const int StationStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, platform_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, v_adv_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, policy_),
  };
  StationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationStatus_descriptor_,
      StationStatus::default_instance_,
      StationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationStatus));
  PlatformStatus_descriptor_ = file->message_type(68);
  static const int PlatformStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformStatus, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformStatus, tsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformStatus, unloading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformStatus, loading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformStatus, berths_),
  };
  PlatformStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlatformStatus_descriptor_,
      PlatformStatus::default_instance_,
      PlatformStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlatformStatus));
  BerthStatus_descriptor_ = file->message_type(69);
  static const int BerthStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BerthStatus, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BerthStatus, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BerthStatus, busy_),
  };
  BerthStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BerthStatus_descriptor_,
      BerthStatus::default_instance_,
      BerthStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BerthStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BerthStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BerthStatus));
  PassengerStatus_descriptor_ = file->message_type(70);
  static const int PassengerStatus_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, loc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, locid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, src_stationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, dest_stationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, travel_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, trip_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, trip_success_),
  };
  PassengerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassengerStatus_descriptor_,
      PassengerStatus::default_instance_,
      PassengerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassengerStatus));
  RoutingEntry_descriptor_ = file->message_type(71);
  static const int RoutingEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingEntry, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingEntry, tsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingEntry, msgid_),
  };
  RoutingEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoutingEntry_descriptor_,
      RoutingEntry::default_instance_,
      RoutingEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoutingEntry));
  SwitchStatus_descriptor_ = file->message_type(72);
  static const int SwitchStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, swid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, entry_),
  };
  SwitchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchStatus_descriptor_,
      SwitchStatus::default_instance_,
      SwitchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchStatus));
  TrackSegmentStatus_descriptor_ = file->message_type(73);
  static const int TrackSegmentStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSegmentStatus, tsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSegmentStatus, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSegmentStatus, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSegmentStatus, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSegmentStatus, vid_),
  };
  TrackSegmentStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackSegmentStatus_descriptor_,
      TrackSegmentStatus::default_instance_,
      TrackSegmentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSegmentStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSegmentStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackSegmentStatus));
  Misc_descriptor_ = file->enum_type(0);
  CtrlMsgType_descriptor_ = file->enum_type(1);
  LocationType_descriptor_ = file->enum_type(2);
  StationPolicy_descriptor_ = file->enum_type(3);
  SimMsgType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PolyCoeffs_descriptor_, &PolyCoeffs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spline_descriptor_, &Spline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlCmdVehicleTrajectory_descriptor_, &CtrlCmdVehicleTrajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlCmdStationLaunch_descriptor_, &CtrlCmdStationLaunch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlCmdPassengersEmbark_descriptor_, &CtrlCmdPassengersEmbark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlCmdPassengersDisembark_descriptor_, &CtrlCmdPassengersDisembark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlCmdSwitch_descriptor_, &CtrlCmdSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRequestVehicleStatus_descriptor_, &CtrlRequestVehicleStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRequestStationStatus_descriptor_, &CtrlRequestStationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRequestStationSummary_descriptor_, &CtrlRequestStationSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRequestPassengerStatus_descriptor_, &CtrlRequestPassengerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRequestSwitchStatus_descriptor_, &CtrlRequestSwitchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRequestTrackSegmentStatus_descriptor_, &CtrlRequestTrackSegmentStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlRequestTotalStatus_descriptor_, &CtrlRequestTotalStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlSetnotifyVehiclePosition_descriptor_, &CtrlSetnotifyVehiclePosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlSetnotifyTime_descriptor_, &CtrlSetnotifyTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtrlResume_descriptor_, &CtrlResume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimStart_descriptor_, &SimStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEnd_descriptor_, &SimEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimUnimplemented_descriptor_, &SimUnimplemented::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimAbortVehicleSpeed_descriptor_, &SimAbortVehicleSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimCompleteVehicleSpeed_descriptor_, &SimCompleteVehicleSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimCompleteStationLaunch_descriptor_, &SimCompleteStationLaunch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimCompletePassengerLoadVehicle_descriptor_, &SimCompletePassengerLoadVehicle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimCompleteSwitch_descriptor_, &SimCompleteSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimResponseVehicleStatus_descriptor_, &SimResponseVehicleStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimResponseStationStatus_descriptor_, &SimResponseStationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimResponseStationSummary_descriptor_, &SimResponseStationSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimResponsePassengerStatus_descriptor_, &SimResponsePassengerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimResponseSwitchStatus_descriptor_, &SimResponseSwitchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimResponseTrackSegmentStatus_descriptor_, &SimResponseTrackSegmentStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimResponseTotalStatus_descriptor_, &SimResponseTotalStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimRequestSwitchCmd_descriptor_, &SimRequestSwitchCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyVehiclePosition_descriptor_, &SimNotifyVehiclePosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyTime_descriptor_, &SimNotifyTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyVehicleArrive_descriptor_, &SimNotifyVehicleArrive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyVehicleExit_descriptor_, &SimNotifyVehicleExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyVehicleReadyLoad_descriptor_, &SimNotifyVehicleReadyLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyVehicleCollision_descriptor_, &SimNotifyVehicleCollision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyPassengerLoadStart_descriptor_, &SimNotifyPassengerLoadStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyPassengerLoadEnd_descriptor_, &SimNotifyPassengerLoadEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyPassengerUnloadStart_descriptor_, &SimNotifyPassengerUnloadStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyPassengerUnloadEnd_descriptor_, &SimNotifyPassengerUnloadEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyPassengerDelivered_descriptor_, &SimNotifyPassengerDelivered::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyPassengerMisdelivered_descriptor_, &SimNotifyPassengerMisdelivered::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyStationReadyLaunch_descriptor_, &SimNotifyStationReadyLaunch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNotifyStationUnreadyLaunch_descriptor_, &SimNotifyStationUnreadyLaunch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventTrackSegmentDisabled_descriptor_, &SimEventTrackSegmentDisabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventTrackSegmentReenabled_descriptor_, &SimEventTrackSegmentReenabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventSwitchDisabled_descriptor_, &SimEventSwitchDisabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventSwitchReenabled_descriptor_, &SimEventSwitchReenabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventStationDisabled_descriptor_, &SimEventStationDisabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventStationReenabled_descriptor_, &SimEventStationReenabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventVehicleDisabled_descriptor_, &SimEventVehicleDisabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventVehicleReenabled_descriptor_, &SimEventVehicleReenabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventPassengerCreated_descriptor_, &SimEventPassengerCreated::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimEventPassengerChangedest_descriptor_, &SimEventPassengerChangedest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgHdrInvalidSeparator_descriptor_, &SimMsgHdrInvalidSeparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgHdrInvalidType_descriptor_, &SimMsgHdrInvalidType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgHdrInvalidID_descriptor_, &SimMsgHdrInvalidID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgHdrInvalidTime_descriptor_, &SimMsgHdrInvalidTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgHdrInvalidSize_descriptor_, &SimMsgHdrInvalidSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgBodyInvalidID_descriptor_, &SimMsgBodyInvalidID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgBodyInvalidAccel_descriptor_, &SimMsgBodyInvalidAccel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimMsgBodyInvalidJerk_descriptor_, &SimMsgBodyInvalidJerk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleStatus_descriptor_, &VehicleStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationSummary_descriptor_, &StationSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationStatus_descriptor_, &StationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlatformStatus_descriptor_, &PlatformStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BerthStatus_descriptor_, &BerthStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassengerStatus_descriptor_, &PassengerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoutingEntry_descriptor_, &RoutingEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchStatus_descriptor_, &SwitchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackSegmentStatus_descriptor_, &TrackSegmentStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2eproto() {
  delete PolyCoeffs::default_instance_;
  delete PolyCoeffs_reflection_;
  delete Spline::default_instance_;
  delete Spline_reflection_;
  delete CtrlCmdVehicleTrajectory::default_instance_;
  delete CtrlCmdVehicleTrajectory_reflection_;
  delete CtrlCmdStationLaunch::default_instance_;
  delete CtrlCmdStationLaunch_reflection_;
  delete CtrlCmdPassengersEmbark::default_instance_;
  delete CtrlCmdPassengersEmbark_reflection_;
  delete CtrlCmdPassengersDisembark::default_instance_;
  delete CtrlCmdPassengersDisembark_reflection_;
  delete CtrlCmdSwitch::default_instance_;
  delete CtrlCmdSwitch_reflection_;
  delete CtrlRequestVehicleStatus::default_instance_;
  delete CtrlRequestVehicleStatus_reflection_;
  delete CtrlRequestStationStatus::default_instance_;
  delete CtrlRequestStationStatus_reflection_;
  delete CtrlRequestStationSummary::default_instance_;
  delete CtrlRequestStationSummary_reflection_;
  delete CtrlRequestPassengerStatus::default_instance_;
  delete CtrlRequestPassengerStatus_reflection_;
  delete CtrlRequestSwitchStatus::default_instance_;
  delete CtrlRequestSwitchStatus_reflection_;
  delete CtrlRequestTrackSegmentStatus::default_instance_;
  delete CtrlRequestTrackSegmentStatus_reflection_;
  delete CtrlRequestTotalStatus::default_instance_;
  delete CtrlRequestTotalStatus_reflection_;
  delete CtrlSetnotifyVehiclePosition::default_instance_;
  delete CtrlSetnotifyVehiclePosition_reflection_;
  delete CtrlSetnotifyTime::default_instance_;
  delete CtrlSetnotifyTime_reflection_;
  delete CtrlResume::default_instance_;
  delete CtrlResume_reflection_;
  delete SimStart::default_instance_;
  delete SimStart_reflection_;
  delete SimEnd::default_instance_;
  delete SimEnd_reflection_;
  delete SimUnimplemented::default_instance_;
  delete SimUnimplemented_reflection_;
  delete SimAbortVehicleSpeed::default_instance_;
  delete SimAbortVehicleSpeed_reflection_;
  delete SimCompleteVehicleSpeed::default_instance_;
  delete SimCompleteVehicleSpeed_reflection_;
  delete SimCompleteStationLaunch::default_instance_;
  delete SimCompleteStationLaunch_reflection_;
  delete SimCompletePassengerLoadVehicle::default_instance_;
  delete SimCompletePassengerLoadVehicle_reflection_;
  delete SimCompleteSwitch::default_instance_;
  delete SimCompleteSwitch_reflection_;
  delete SimResponseVehicleStatus::default_instance_;
  delete SimResponseVehicleStatus_reflection_;
  delete SimResponseStationStatus::default_instance_;
  delete SimResponseStationStatus_reflection_;
  delete SimResponseStationSummary::default_instance_;
  delete SimResponseStationSummary_reflection_;
  delete SimResponsePassengerStatus::default_instance_;
  delete SimResponsePassengerStatus_reflection_;
  delete SimResponseSwitchStatus::default_instance_;
  delete SimResponseSwitchStatus_reflection_;
  delete SimResponseTrackSegmentStatus::default_instance_;
  delete SimResponseTrackSegmentStatus_reflection_;
  delete SimResponseTotalStatus::default_instance_;
  delete SimResponseTotalStatus_reflection_;
  delete SimRequestSwitchCmd::default_instance_;
  delete SimRequestSwitchCmd_reflection_;
  delete SimNotifyVehiclePosition::default_instance_;
  delete SimNotifyVehiclePosition_reflection_;
  delete SimNotifyTime::default_instance_;
  delete SimNotifyTime_reflection_;
  delete SimNotifyVehicleArrive::default_instance_;
  delete SimNotifyVehicleArrive_reflection_;
  delete SimNotifyVehicleExit::default_instance_;
  delete SimNotifyVehicleExit_reflection_;
  delete SimNotifyVehicleReadyLoad::default_instance_;
  delete SimNotifyVehicleReadyLoad_reflection_;
  delete SimNotifyVehicleCollision::default_instance_;
  delete SimNotifyVehicleCollision_reflection_;
  delete SimNotifyPassengerLoadStart::default_instance_;
  delete SimNotifyPassengerLoadStart_reflection_;
  delete SimNotifyPassengerLoadEnd::default_instance_;
  delete SimNotifyPassengerLoadEnd_reflection_;
  delete SimNotifyPassengerUnloadStart::default_instance_;
  delete SimNotifyPassengerUnloadStart_reflection_;
  delete SimNotifyPassengerUnloadEnd::default_instance_;
  delete SimNotifyPassengerUnloadEnd_reflection_;
  delete SimNotifyPassengerDelivered::default_instance_;
  delete SimNotifyPassengerDelivered_reflection_;
  delete SimNotifyPassengerMisdelivered::default_instance_;
  delete SimNotifyPassengerMisdelivered_reflection_;
  delete SimNotifyStationReadyLaunch::default_instance_;
  delete SimNotifyStationReadyLaunch_reflection_;
  delete SimNotifyStationUnreadyLaunch::default_instance_;
  delete SimNotifyStationUnreadyLaunch_reflection_;
  delete SimEventTrackSegmentDisabled::default_instance_;
  delete SimEventTrackSegmentDisabled_reflection_;
  delete SimEventTrackSegmentReenabled::default_instance_;
  delete SimEventTrackSegmentReenabled_reflection_;
  delete SimEventSwitchDisabled::default_instance_;
  delete SimEventSwitchDisabled_reflection_;
  delete SimEventSwitchReenabled::default_instance_;
  delete SimEventSwitchReenabled_reflection_;
  delete SimEventStationDisabled::default_instance_;
  delete SimEventStationDisabled_reflection_;
  delete SimEventStationReenabled::default_instance_;
  delete SimEventStationReenabled_reflection_;
  delete SimEventVehicleDisabled::default_instance_;
  delete SimEventVehicleDisabled_reflection_;
  delete SimEventVehicleReenabled::default_instance_;
  delete SimEventVehicleReenabled_reflection_;
  delete SimEventPassengerCreated::default_instance_;
  delete SimEventPassengerCreated_reflection_;
  delete SimEventPassengerChangedest::default_instance_;
  delete SimEventPassengerChangedest_reflection_;
  delete SimMsgHdrInvalidSeparator::default_instance_;
  delete SimMsgHdrInvalidSeparator_reflection_;
  delete SimMsgHdrInvalidType::default_instance_;
  delete SimMsgHdrInvalidType_reflection_;
  delete SimMsgHdrInvalidID::default_instance_;
  delete SimMsgHdrInvalidID_reflection_;
  delete SimMsgHdrInvalidTime::default_instance_;
  delete SimMsgHdrInvalidTime_reflection_;
  delete SimMsgHdrInvalidSize::default_instance_;
  delete SimMsgHdrInvalidSize_reflection_;
  delete SimMsgBodyInvalidID::default_instance_;
  delete SimMsgBodyInvalidID_reflection_;
  delete SimMsgBodyInvalidAccel::default_instance_;
  delete SimMsgBodyInvalidAccel_reflection_;
  delete SimMsgBodyInvalidJerk::default_instance_;
  delete SimMsgBodyInvalidJerk_reflection_;
  delete VehicleStatus::default_instance_;
  delete VehicleStatus_reflection_;
  delete StationSummary::default_instance_;
  delete StationSummary_reflection_;
  delete StationStatus::default_instance_;
  delete StationStatus_reflection_;
  delete PlatformStatus::default_instance_;
  delete PlatformStatus_reflection_;
  delete BerthStatus::default_instance_;
  delete BerthStatus_reflection_;
  delete PassengerStatus::default_instance_;
  delete PassengerStatus_reflection_;
  delete RoutingEntry::default_instance_;
  delete RoutingEntry_reflection_;
  delete SwitchStatus::default_instance_;
  delete SwitchStatus_reflection_;
  delete TrackSegmentStatus::default_instance_;
  delete TrackSegmentStatus_reflection_;
}

void protobuf_AddDesc_api_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tapi.proto\022\003prt\" \n\nPolyCoeffs\022\022\n\006coeffs"
    "\030\001 \003(\002B\002\020\001\";\n\006Spline\022\036\n\005polys\030\001 \003(\0132\017.pr"
    "t.PolyCoeffs\022\021\n\005times\030\002 \003(\002B\002\020\001\"D\n\030CtrlC"
    "mdVehicleTrajectory\022\013\n\003vID\030\001 \002(\005\022\033\n\006spli"
    "ne\030\002 \002(\0132\013.prt.Spline\"\221\001\n\024CtrlCmdStation"
    "Launch\022\013\n\003sID\030\001 \002(\005\022\013\n\003vID\030\002 \002(\005\022\024\n\014targ"
    "et_speed\030\003 \002(\005\022\021\n\tmax_accel\030\004 \001(\005\022\021\n\tmax"
    "_decel\030\005 \001(\005\022\020\n\010max_jerk\030\006 \001(\005\022\021\n\temerge"
    "ncy\030\007 \001(\010\"r\n\027CtrlCmdPassengersEmbark\022\013\n\003"
    "vID\030\001 \002(\005\022\013\n\003sID\030\002 \002(\005\022\022\n\nplatformID\030\003 \002"
    "(\005\022\017\n\007berthID\030\004 \002(\005\022\030\n\014passengerIDs\030\005 \003("
    "\005B\002\020\001\"u\n\032CtrlCmdPassengersDisembark\022\013\n\003v"
    "ID\030\001 \002(\005\022\013\n\003sID\030\002 \002(\005\022\022\n\nplatformID\030\003 \002("
    "\005\022\017\n\007berthID\030\004 \002(\005\022\030\n\014passengerIDs\030\005 \003(\005"
    "B\002\020\001\"8\n\rCtrlCmdSwitch\022\014\n\004swID\030\002 \002(\005\022\013\n\003v"
    "ID\030\003 \002(\005\022\014\n\004tsID\030\004 \002(\005\"\'\n\030CtrlRequestVeh"
    "icleStatus\022\013\n\003vID\030\002 \002(\005\"\'\n\030CtrlRequestSt"
    "ationStatus\022\013\n\003sID\030\002 \002(\005\"(\n\031CtrlRequestS"
    "tationSummary\022\013\n\003sID\030\002 \002(\005\")\n\032CtrlReques"
    "tPassengerStatus\022\013\n\003pID\030\002 \002(\005\"\'\n\027CtrlReq"
    "uestSwitchStatus\022\014\n\004swID\030\002 \002(\005\"-\n\035CtrlRe"
    "questTrackSegmentStatus\022\014\n\004tsID\030\002 \002(\005\"\030\n"
    "\026CtrlRequestTotalStatus\"F\n\034CtrlSetnotify"
    "VehiclePosition\022\013\n\003vID\030\002 \002(\005\022\014\n\004tsID\030\003 \002"
    "(\005\022\013\n\003pos\030\004 \002(\005\"!\n\021CtrlSetnotifyTime\022\014\n\004"
    "time\030\001 \002(\005\"$\n\nCtrlResume\022\026\n\016last_sim_msg"
    "ID\030\001 \002(\005\"\n\n\010SimStart\"\010\n\006SimEnd\"!\n\020SimUni"
    "mplemented\022\r\n\005msgID\030\001 \002(\005\"%\n\024SimAbortVeh"
    "icleSpeed\022\r\n\005msgID\030\001 \002(\005\"D\n\027SimCompleteV"
    "ehicleSpeed\022\r\n\005msgID\030\001 \002(\005\022\013\n\003vID\030\002 \002(\005\022"
    "\r\n\005speed\030\003 \002(\005\"C\n\030SimCompleteStationLaun"
    "ch\022\r\n\005msgID\030\001 \002(\005\022\013\n\003sID\030\002 \002(\005\022\013\n\003vID\030\003 "
    "\002(\005\"W\n\037SimCompletePassengerLoadVehicle\022\r"
    "\n\005msgID\030\001 \002(\005\022\013\n\003pID\030\002 \002(\005\022\013\n\003vID\030\003 \002(\005\022"
    "\013\n\003sID\030\004 \002(\005\"K\n\021SimCompleteSwitch\022\r\n\005msg"
    "ID\030\001 \002(\005\022\014\n\004swID\030\002 \002(\005\022\013\n\003vID\030\003 \002(\005\022\014\n\004t"
    "sID\030\004 \002(\005\"O\n\030SimResponseVehicleStatus\022\r\n"
    "\005msgID\030\001 \001(\005\022$\n\010v_status\030\002 \002(\0132\022.prt.Veh"
    "icleStatus\"O\n\030SimResponseStationStatus\022\r"
    "\n\005msgID\030\001 \001(\005\022$\n\010s_status\030\002 \002(\0132\022.prt.St"
    "ationStatus\"R\n\031SimResponseStationSummary"
    "\022\r\n\005msgID\030\001 \001(\005\022&\n\ts_summary\030\002 \002(\0132\023.prt"
    ".StationSummary\"S\n\032SimResponsePassengerS"
    "tatus\022\r\n\005msgID\030\001 \001(\005\022&\n\010p_status\030\002 \002(\0132\024"
    ".prt.PassengerStatus\"N\n\027SimResponseSwitc"
    "hStatus\022\r\n\005msgID\030\001 \001(\005\022$\n\tsw_status\030\002 \002("
    "\0132\021.prt.SwitchStatus\"Z\n\035SimResponseTrack"
    "SegmentStatus\022\r\n\005msgID\030\001 \001(\005\022*\n\tts_statu"
    "s\030\002 \002(\0132\027.prt.TrackSegmentStatus\"\367\001\n\026Sim"
    "ResponseTotalStatus\022\r\n\005msgID\030\001 \001(\005\022&\n\nv_"
    "statuses\030\002 \003(\0132\022.prt.VehicleStatus\022&\n\ns_"
    "statuses\030\003 \003(\0132\022.prt.StationStatus\022(\n\np_"
    "statuses\030\004 \003(\0132\024.prt.PassengerStatus\022&\n\013"
    "sw_statuses\030\005 \003(\0132\021.prt.SwitchStatus\022,\n\013"
    "ts_statuses\030\006 \003(\0132\027.prt.TrackSegmentStat"
    "us\"N\n\023SimRequestSwitchCmd\022\014\n\004swID\030\001 \002(\005\022"
    "\013\n\003vID\030\002 \002(\005\022\r\n\005ts1ID\030\003 \002(\005\022\r\n\005ts2ID\030\004 \002"
    "(\005\"Q\n\030SimNotifyVehiclePosition\022\r\n\005msgID\030"
    "\001 \001(\005\022\013\n\003vID\030\002 \002(\005\022\014\n\004tsID\030\003 \002(\005\022\013\n\003pos\030"
    "\004 \002(\005\",\n\rSimNotifyTime\022\r\n\005msgID\030\001 \001(\005\022\014\n"
    "\004time\030\002 \002(\005\">\n\026SimNotifyVehicleArrive\022$\n"
    "\010v_status\030\001 \002(\0132\022.prt.VehicleStatus\"<\n\024S"
    "imNotifyVehicleExit\022$\n\010v_status\030\001 \002(\0132\022."
    "prt.VehicleStatus\"5\n\031SimNotifyVehicleRea"
    "dyLoad\022\013\n\003vID\030\001 \002(\005\022\013\n\003sID\030\002 \002(\005\"\255\001\n\031Sim"
    "NotifyVehicleCollision\022\014\n\004v1ID\030\001 \002(\005\022\014\n\004"
    "v2ID\030\002 \002(\005\022#\n\010loc_type\030\003 \002(\0162\021.prt.Locat"
    "ionType\022\r\n\005locID\030\004 \002(\005\022\013\n\003pos\030\005 \002(\005\022\017\n\007d"
    "elta_v\030\006 \002(\005\022\017\n\007rearend\030\007 \001(\010\022\021\n\tsideswi"
    "pe\030\010 \001(\010\"D\n\033SimNotifyPassengerLoadStart\022"
    "\013\n\003vID\030\001 \002(\005\022\013\n\003sID\030\002 \002(\005\022\013\n\003pID\030\003 \002(\005\"B"
    "\n\031SimNotifyPassengerLoadEnd\022\013\n\003vID\030\001 \002(\005"
    "\022\013\n\003sID\030\002 \002(\005\022\013\n\003pID\030\003 \002(\005\"F\n\035SimNotifyP"
    "assengerUnloadStart\022\013\n\003vID\030\001 \002(\005\022\013\n\003sID\030"
    "\002 \002(\005\022\013\n\003pID\030\003 \002(\005\"D\n\033SimNotifyPassenger"
    "UnloadEnd\022\013\n\003vID\030\001 \002(\005\022\013\n\003sID\030\002 \002(\005\022\013\n\003p"
    "ID\030\003 \002(\005\"D\n\033SimNotifyPassengerDelivered\022"
    "\013\n\003vID\030\001 \002(\005\022\013\n\003sID\030\002 \002(\005\022\013\n\003pID\030\003 \002(\005\"G"
    "\n\036SimNotifyPassengerMisdelivered\022\013\n\003vID\030"
    "\001 \002(\005\022\013\n\003sID\030\002 \002(\005\022\013\n\003pID\030\003 \002(\005\"H\n\033SimNo"
    "tifyStationReadyLaunch\022\013\n\003vID\030\001 \002(\005\022\013\n\003s"
    "ID\030\002 \002(\005\022\017\n\003pID\030\003 \003(\005B\002\020\001\"9\n\035SimNotifySt"
    "ationUnreadyLaunch\022\013\n\003vID\030\001 \002(\005\022\013\n\003sID\030\002"
    " \002(\005\",\n\034SimEventTrackSegmentDisabled\022\014\n\004"
    "tsID\030\002 \002(\005\"-\n\035SimEventTrackSegmentReenab"
    "led\022\014\n\004tsID\030\002 \002(\005\"&\n\026SimEventSwitchDisab"
    "led\022\014\n\004swID\030\002 \002(\005\"\'\n\027SimEventSwitchReena"
    "bled\022\014\n\004swID\030\002 \002(\005\"&\n\027SimEventStationDis"
    "abled\022\013\n\003sID\030\002 \002(\005\"\'\n\030SimEventStationRee"
    "nabled\022\013\n\003sID\030\002 \002(\005\"&\n\027SimEventVehicleDi"
    "sabled\022\013\n\003vID\030\002 \002(\005\"\'\n\030SimEventVehicleRe"
    "enabled\022\013\n\003vID\030\002 \002(\005\"B\n\030SimEventPassenge"
    "rCreated\022&\n\010p_status\030\001 \002(\0132\024.prt.Passeng"
    "erStatus\"*\n\033SimEventPassengerChangedest\022"
    "\013\n\003pID\030\001 \002(\005\";\n\031SimMsgHdrInvalidSeparato"
    "r\022\r\n\005msgID\030\001 \002(\005\022\017\n\007msg_sep\030\002 \002(\005\"7\n\024Sim"
    "MsgHdrInvalidType\022\r\n\005msgID\030\001 \002(\005\022\020\n\010msg_"
    "type\030\002 \002(\005\"#\n\022SimMsgHdrInvalidID\022\r\n\005msgI"
    "D\030\001 \002(\005\"7\n\024SimMsgHdrInvalidTime\022\r\n\005msgID"
    "\030\001 \002(\005\022\020\n\010msg_time\030\002 \002(\005\"7\n\024SimMsgHdrInv"
    "alidSize\022\r\n\005msgID\030\001 \002(\005\022\020\n\010msg_size\030\002 \002("
    "\005\"X\n\023SimMsgBodyInvalidID\022\r\n\005msgID\030\001 \002(\005\022"
    "#\n\010loc_type\030\002 \002(\0162\021.prt.LocationType\022\r\n\005"
    "locID\030\003 \002(\005\"6\n\026SimMsgBodyInvalidAccel\022\r\n"
    "\005msgID\030\001 \002(\005\022\r\n\005accel\030\002 \002(\005\"4\n\025SimMsgBod"
    "yInvalidJerk\022\r\n\005msgID\030\001 \002(\005\022\014\n\004jerk\030\002 \002("
    "\005\"\202\002\n\rVehicleStatus\022\013\n\003vID\030\001 \002(\005\022(\n\rnose"
    "_loc_type\030\002 \002(\0162\021.prt.LocationType\022\022\n\nno"
    "se_locID\030\003 \002(\005\022\020\n\010nose_pos\030\004 \002(\002\022(\n\rtail"
    "_loc_type\030\005 \002(\0162\021.prt.LocationType\022\022\n\nta"
    "il_locID\030\006 \002(\005\022\020\n\010tail_pos\030\007 \002(\002\022\013\n\003vel\030"
    "\010 \002(\002\022\r\n\005accel\030\t \002(\002\022\027\n\013passengerID\030\n \003("
    "\005B\002\020\001\022\017\n\007headway\030\014 \001(\005\"\264\001\n\016StationSummar"
    "y\022\013\n\003sID\030\001 \002(\005\022\r\n\005label\030\002 \001(\t\022\037\n\023loaded_"
    "ready_launch\030\003 \003(\005B\002\020\001\022!\n\025unloaded_ready"
    "_launch\030\004 \003(\005B\002\020\001\022\017\n\003pID\030\005 \003(\005B\002\020\001\022\030\n\020ne"
    "xt_accept_time\030\006 \002(\005\022\027\n\017vehicles_needed\030"
    "\007 \002(\005\"\242\001\n\rStationStatus\022\013\n\003sID\030\001 \002(\005\022\r\n\005"
    "label\030\002 \001(\t\022,\n\017platform_status\030\003 \003(\0132\023.p"
    "rt.PlatformStatus\022\017\n\003pID\030\004 \003(\005B\002\020\001\022\022\n\nv_"
    "adv_time\030\005 \002(\005\022\"\n\006policy\030\006 \002(\0162\022.prt.Sta"
    "tionPolicy\"t\n\016PlatformStatus\022\016\n\006platID\030\001"
    " \002(\005\022\014\n\004tsID\030\002 \002(\005\022\021\n\tunloading\030\003 \002(\010\022\017\n"
    "\007loading\030\004 \002(\010\022 \n\006berths\030\005 \003(\0132\020.prt.Ber"
    "thStatus\"5\n\013BerthStatus\022\013\n\003bID\030\001 \002(\005\022\013\n\003"
    "vID\030\002 \002(\005\022\014\n\004busy\030\003 \002(\010\"\365\001\n\017PassengerSta"
    "tus\022\013\n\003pID\030\001 \002(\005\022\r\n\005label\030\002 \001(\t\022#\n\010loc_t"
    "ype\030\003 \002(\0162\021.prt.LocationType\022\r\n\005locID\030\004 "
    "\002(\005\022\025\n\rsrc_stationID\030\005 \002(\005\022\026\n\016dest_stati"
    "onID\030\006 \002(\005\022\016\n\006weight\030\007 \001(\005\022\021\n\twait_time\030"
    "\010 \001(\005\022\023\n\013travel_time\030\t \001(\005\022\025\n\rtrip_compl"
    "ete\030\n \001(\010\022\024\n\014trip_success\030\013 \001(\010\"8\n\014Routi"
    "ngEntry\022\013\n\003vID\030\001 \002(\005\022\014\n\004tsID\030\002 \002(\005\022\r\n\005ms"
    "gID\030\003 \001(\005\"M\n\014SwitchStatus\022\014\n\004swID\030\001 \002(\005\022"
    "\r\n\005label\030\002 \001(\t\022 \n\005entry\030\003 \003(\0132\021.prt.Rout"
    "ingEntry\"e\n\022TrackSegmentStatus\022\014\n\004tsID\030\001"
    " \002(\005\022\r\n\005label\030\002 \001(\t\022\021\n\tmax_speed\030\003 \002(\005\022\016"
    "\n\006length\030\004 \002(\005\022\017\n\003vID\030\005 \003(\005B\002\020\001*G\n\004Misc\022"
    "\024\n\007MSG_SEP\020\205\205\376\377\377\377\377\377\377\001\022\023\n\017MSG_HEADER_SIZE"
    "\020\016\022\024\n\007NONE_ID\020\377\377\377\377\377\377\377\377\377\001*\301\003\n\013CtrlMsgType"
    "\022\037\n\033CTRL_CMD_VEHICLE_TRAJECTORY\020\001\022\023\n\017CTR"
    "L_CMD_SWITCH\020\003\022\036\n\032CTRL_CMD_PASSENGERS_EM"
    "BARK\020\004\022!\n\035CTRL_CMD_PASSENGERS_DISEMBARK\020"
    "\005\022\037\n\033CTRL_REQUEST_VEHICLE_STATUS\020\n\022\037\n\033CT"
    "RL_REQUEST_STATION_STATUS\020\013\022 \n\034CTRL_REQU"
    "EST_STATION_SUMMARY\020\014\022!\n\035CTRL_REQUEST_PA"
    "SSENGER_STATUS\020\r\022\036\n\032CTRL_REQUEST_SWITCH_"
    "STATUS\020\016\022$\n CTRL_REQUEST_TRACKSEGMENT_ST"
    "ATUS\020\017\022\035\n\031CTRL_REQUEST_TOTAL_STATUS\020\020\022#\n"
    "\037CTRL_SETNOTIFY_VEHICLE_POSITION\020\024\022\027\n\023CT"
    "RL_SETNOTIFY_TIME\0202\022\017\n\013CTRL_RESUME\020[*`\n\014"
    "LocationType\022\021\n\rTRACK_SEGMENT\020\000\022\n\n\006SWITC"
    "H\020\n\022\013\n\007STATION\020\024\022\013\n\007VEHICLE\020\036\022\r\n\tPASSENG"
    "ER\020(\022\010\n\004NONE\0202*%\n\rStationPolicy\022\t\n\005LOBBY"
    "\020\001\022\t\n\005QUEUE\020\002*\337\014\n\nSimMsgType\022\037\n\032SIM_COMP"
    "LETE_VEHICLE_SPEED\020\351\007\022 \n\033SIM_COMPLETE_ST"
    "ATION_LAUNCH\020\352\007\022(\n#SIM_COMPLETE_PASSENGE"
    "R_LOAD_VEHICLE\020\353\007\022\030\n\023SIM_COMPLETE_SWITCH"
    "\020\354\007\022 \n\033SIM_RESPONSE_VEHICLE_STATUS\020\362\007\022 \n"
    "\033SIM_RESPONSE_STATION_STATUS\020\363\007\022!\n\034SIM_R"
    "ESPONSE_STATION_SUMMARY\020\364\007\022\"\n\035SIM_RESPON"
    "SE_PASSENGER_STATUS\020\365\007\022\037\n\032SIM_RESPONSE_S"
    "WITCH_STATUS\020\366\007\022%\n SIM_RESPONSE_TRACKSEG"
    "MENT_STATUS\020\367\007\022\036\n\031SIM_RESPONSE_TOTAL_STA"
    "TUS\020\370\007\022 \n\033SIM_NOTIFY_VEHICLE_POSITION\020\374\007"
    "\022\036\n\031SIM_NOTIFY_VEHICLE_ARRIVE\020\375\007\022\034\n\027SIM_"
    "NOTIFY_VEHICLE_EXIT\020\376\007\022\"\n\035SIM_NOTIFY_VEH"
    "ICLE_READY_LOAD\020\377\007\022!\n\034SIM_NOTIFY_VEHICLE"
    "_COLLISION\020\200\010\022$\n\037SIM_NOTIFY_PASSENGER_LO"
    "AD_START\020\207\010\022\"\n\035SIM_NOTIFY_PASSENGER_LOAD"
    "_END\020\210\010\022&\n!SIM_NOTIFY_PASSENGER_UNLOAD_S"
    "TART\020\211\010\022$\n\037SIM_NOTIFY_PASSENGER_UNLOAD_E"
    "ND\020\212\010\022#\n\036SIM_NOTIFY_PASSENGER_DELIVERED\020"
    "\213\010\022&\n!SIM_NOTIFY_PASSENGER_MISDELIVERED\020"
    "\214\010\022$\n\037SIM_NOTIFY_STATION_READY_LAUNCH\020\220\010"
    "\022&\n!SIM_NOTIFY_STATION_UNREADY_LAUNCH\020\221\010"
    "\022\024\n\017SIM_NOTIFY_TIME\020\232\010\022\033\n\026SIM_REQUEST_SW"
    "ITCH_CMD\020\244\010\022$\n\037SIM_EVENT_TRACKSEGMENT_DI"
    "SABLED\020\314\010\022%\n SIM_EVENT_TRACKSEGMENT_REEN"
    "ABLED\020\315\010\022\036\n\031SIM_EVENT_SWITCH_DISABLED\020\316\010"
    "\022\037\n\032SIM_EVENT_SWITCH_REENABLED\020\317\010\022\037\n\032SIM"
    "_EVENT_STATION_DISABLED\020\320\010\022 \n\033SIM_EVENT_"
    "STATION_REENABLED\020\321\010\022\037\n\032SIM_EVENT_VEHICL"
    "E_DISABLED\020\322\010\022 \n\033SIM_EVENT_VEHICLE_REENA"
    "BLED\020\323\010\022 \n\033SIM_EVENT_PASSENGER_CREATED\020\324"
    "\010\022#\n\036SIM_EVENT_PASSENGER_CHANGEDEST\020\325\010\022\016"
    "\n\tSIM_START\020\260\t\022\014\n\007SIM_END\020\261\t\022\026\n\021SIM_UNIM"
    "PLEMENTED\020\262\t\022\"\n\035SIM_MSG_HDR_INVALID_SEPA"
    "RATOR\020\224\n\022\035\n\030SIM_MSG_HDR_INVALID_TYPE\020\225\n\022"
    "\033\n\026SIM_MSG_HDR_INVALID_ID\020\226\n\022\035\n\030SIM_MSG_"
    "HDR_INVALID_TIME\020\227\n\022\035\n\030SIM_MSG_HDR_INVAL"
    "ID_SIZE\020\230\n\022\036\n\031SIM_MSG_HDR_INVALID_PBSTR\020"
    "\231\n\022\034\n\027SIM_MSG_BODY_INVALID_ID\020\236\n\022\037\n\032SIM_"
    "MSG_BODY_INVALID_ACCEL\020\237\n\022\036\n\031SIM_MSG_BOD"
    "Y_INVALID_JERK\020\240\n\022\034\n\027SIM_ABORT_VEHICLE_S"
    "PEED\020\371\n", 7807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api.proto", &protobuf_RegisterTypes);
  PolyCoeffs::default_instance_ = new PolyCoeffs();
  Spline::default_instance_ = new Spline();
  CtrlCmdVehicleTrajectory::default_instance_ = new CtrlCmdVehicleTrajectory();
  CtrlCmdStationLaunch::default_instance_ = new CtrlCmdStationLaunch();
  CtrlCmdPassengersEmbark::default_instance_ = new CtrlCmdPassengersEmbark();
  CtrlCmdPassengersDisembark::default_instance_ = new CtrlCmdPassengersDisembark();
  CtrlCmdSwitch::default_instance_ = new CtrlCmdSwitch();
  CtrlRequestVehicleStatus::default_instance_ = new CtrlRequestVehicleStatus();
  CtrlRequestStationStatus::default_instance_ = new CtrlRequestStationStatus();
  CtrlRequestStationSummary::default_instance_ = new CtrlRequestStationSummary();
  CtrlRequestPassengerStatus::default_instance_ = new CtrlRequestPassengerStatus();
  CtrlRequestSwitchStatus::default_instance_ = new CtrlRequestSwitchStatus();
  CtrlRequestTrackSegmentStatus::default_instance_ = new CtrlRequestTrackSegmentStatus();
  CtrlRequestTotalStatus::default_instance_ = new CtrlRequestTotalStatus();
  CtrlSetnotifyVehiclePosition::default_instance_ = new CtrlSetnotifyVehiclePosition();
  CtrlSetnotifyTime::default_instance_ = new CtrlSetnotifyTime();
  CtrlResume::default_instance_ = new CtrlResume();
  SimStart::default_instance_ = new SimStart();
  SimEnd::default_instance_ = new SimEnd();
  SimUnimplemented::default_instance_ = new SimUnimplemented();
  SimAbortVehicleSpeed::default_instance_ = new SimAbortVehicleSpeed();
  SimCompleteVehicleSpeed::default_instance_ = new SimCompleteVehicleSpeed();
  SimCompleteStationLaunch::default_instance_ = new SimCompleteStationLaunch();
  SimCompletePassengerLoadVehicle::default_instance_ = new SimCompletePassengerLoadVehicle();
  SimCompleteSwitch::default_instance_ = new SimCompleteSwitch();
  SimResponseVehicleStatus::default_instance_ = new SimResponseVehicleStatus();
  SimResponseStationStatus::default_instance_ = new SimResponseStationStatus();
  SimResponseStationSummary::default_instance_ = new SimResponseStationSummary();
  SimResponsePassengerStatus::default_instance_ = new SimResponsePassengerStatus();
  SimResponseSwitchStatus::default_instance_ = new SimResponseSwitchStatus();
  SimResponseTrackSegmentStatus::default_instance_ = new SimResponseTrackSegmentStatus();
  SimResponseTotalStatus::default_instance_ = new SimResponseTotalStatus();
  SimRequestSwitchCmd::default_instance_ = new SimRequestSwitchCmd();
  SimNotifyVehiclePosition::default_instance_ = new SimNotifyVehiclePosition();
  SimNotifyTime::default_instance_ = new SimNotifyTime();
  SimNotifyVehicleArrive::default_instance_ = new SimNotifyVehicleArrive();
  SimNotifyVehicleExit::default_instance_ = new SimNotifyVehicleExit();
  SimNotifyVehicleReadyLoad::default_instance_ = new SimNotifyVehicleReadyLoad();
  SimNotifyVehicleCollision::default_instance_ = new SimNotifyVehicleCollision();
  SimNotifyPassengerLoadStart::default_instance_ = new SimNotifyPassengerLoadStart();
  SimNotifyPassengerLoadEnd::default_instance_ = new SimNotifyPassengerLoadEnd();
  SimNotifyPassengerUnloadStart::default_instance_ = new SimNotifyPassengerUnloadStart();
  SimNotifyPassengerUnloadEnd::default_instance_ = new SimNotifyPassengerUnloadEnd();
  SimNotifyPassengerDelivered::default_instance_ = new SimNotifyPassengerDelivered();
  SimNotifyPassengerMisdelivered::default_instance_ = new SimNotifyPassengerMisdelivered();
  SimNotifyStationReadyLaunch::default_instance_ = new SimNotifyStationReadyLaunch();
  SimNotifyStationUnreadyLaunch::default_instance_ = new SimNotifyStationUnreadyLaunch();
  SimEventTrackSegmentDisabled::default_instance_ = new SimEventTrackSegmentDisabled();
  SimEventTrackSegmentReenabled::default_instance_ = new SimEventTrackSegmentReenabled();
  SimEventSwitchDisabled::default_instance_ = new SimEventSwitchDisabled();
  SimEventSwitchReenabled::default_instance_ = new SimEventSwitchReenabled();
  SimEventStationDisabled::default_instance_ = new SimEventStationDisabled();
  SimEventStationReenabled::default_instance_ = new SimEventStationReenabled();
  SimEventVehicleDisabled::default_instance_ = new SimEventVehicleDisabled();
  SimEventVehicleReenabled::default_instance_ = new SimEventVehicleReenabled();
  SimEventPassengerCreated::default_instance_ = new SimEventPassengerCreated();
  SimEventPassengerChangedest::default_instance_ = new SimEventPassengerChangedest();
  SimMsgHdrInvalidSeparator::default_instance_ = new SimMsgHdrInvalidSeparator();
  SimMsgHdrInvalidType::default_instance_ = new SimMsgHdrInvalidType();
  SimMsgHdrInvalidID::default_instance_ = new SimMsgHdrInvalidID();
  SimMsgHdrInvalidTime::default_instance_ = new SimMsgHdrInvalidTime();
  SimMsgHdrInvalidSize::default_instance_ = new SimMsgHdrInvalidSize();
  SimMsgBodyInvalidID::default_instance_ = new SimMsgBodyInvalidID();
  SimMsgBodyInvalidAccel::default_instance_ = new SimMsgBodyInvalidAccel();
  SimMsgBodyInvalidJerk::default_instance_ = new SimMsgBodyInvalidJerk();
  VehicleStatus::default_instance_ = new VehicleStatus();
  StationSummary::default_instance_ = new StationSummary();
  StationStatus::default_instance_ = new StationStatus();
  PlatformStatus::default_instance_ = new PlatformStatus();
  BerthStatus::default_instance_ = new BerthStatus();
  PassengerStatus::default_instance_ = new PassengerStatus();
  RoutingEntry::default_instance_ = new RoutingEntry();
  SwitchStatus::default_instance_ = new SwitchStatus();
  TrackSegmentStatus::default_instance_ = new TrackSegmentStatus();
  PolyCoeffs::default_instance_->InitAsDefaultInstance();
  Spline::default_instance_->InitAsDefaultInstance();
  CtrlCmdVehicleTrajectory::default_instance_->InitAsDefaultInstance();
  CtrlCmdStationLaunch::default_instance_->InitAsDefaultInstance();
  CtrlCmdPassengersEmbark::default_instance_->InitAsDefaultInstance();
  CtrlCmdPassengersDisembark::default_instance_->InitAsDefaultInstance();
  CtrlCmdSwitch::default_instance_->InitAsDefaultInstance();
  CtrlRequestVehicleStatus::default_instance_->InitAsDefaultInstance();
  CtrlRequestStationStatus::default_instance_->InitAsDefaultInstance();
  CtrlRequestStationSummary::default_instance_->InitAsDefaultInstance();
  CtrlRequestPassengerStatus::default_instance_->InitAsDefaultInstance();
  CtrlRequestSwitchStatus::default_instance_->InitAsDefaultInstance();
  CtrlRequestTrackSegmentStatus::default_instance_->InitAsDefaultInstance();
  CtrlRequestTotalStatus::default_instance_->InitAsDefaultInstance();
  CtrlSetnotifyVehiclePosition::default_instance_->InitAsDefaultInstance();
  CtrlSetnotifyTime::default_instance_->InitAsDefaultInstance();
  CtrlResume::default_instance_->InitAsDefaultInstance();
  SimStart::default_instance_->InitAsDefaultInstance();
  SimEnd::default_instance_->InitAsDefaultInstance();
  SimUnimplemented::default_instance_->InitAsDefaultInstance();
  SimAbortVehicleSpeed::default_instance_->InitAsDefaultInstance();
  SimCompleteVehicleSpeed::default_instance_->InitAsDefaultInstance();
  SimCompleteStationLaunch::default_instance_->InitAsDefaultInstance();
  SimCompletePassengerLoadVehicle::default_instance_->InitAsDefaultInstance();
  SimCompleteSwitch::default_instance_->InitAsDefaultInstance();
  SimResponseVehicleStatus::default_instance_->InitAsDefaultInstance();
  SimResponseStationStatus::default_instance_->InitAsDefaultInstance();
  SimResponseStationSummary::default_instance_->InitAsDefaultInstance();
  SimResponsePassengerStatus::default_instance_->InitAsDefaultInstance();
  SimResponseSwitchStatus::default_instance_->InitAsDefaultInstance();
  SimResponseTrackSegmentStatus::default_instance_->InitAsDefaultInstance();
  SimResponseTotalStatus::default_instance_->InitAsDefaultInstance();
  SimRequestSwitchCmd::default_instance_->InitAsDefaultInstance();
  SimNotifyVehiclePosition::default_instance_->InitAsDefaultInstance();
  SimNotifyTime::default_instance_->InitAsDefaultInstance();
  SimNotifyVehicleArrive::default_instance_->InitAsDefaultInstance();
  SimNotifyVehicleExit::default_instance_->InitAsDefaultInstance();
  SimNotifyVehicleReadyLoad::default_instance_->InitAsDefaultInstance();
  SimNotifyVehicleCollision::default_instance_->InitAsDefaultInstance();
  SimNotifyPassengerLoadStart::default_instance_->InitAsDefaultInstance();
  SimNotifyPassengerLoadEnd::default_instance_->InitAsDefaultInstance();
  SimNotifyPassengerUnloadStart::default_instance_->InitAsDefaultInstance();
  SimNotifyPassengerUnloadEnd::default_instance_->InitAsDefaultInstance();
  SimNotifyPassengerDelivered::default_instance_->InitAsDefaultInstance();
  SimNotifyPassengerMisdelivered::default_instance_->InitAsDefaultInstance();
  SimNotifyStationReadyLaunch::default_instance_->InitAsDefaultInstance();
  SimNotifyStationUnreadyLaunch::default_instance_->InitAsDefaultInstance();
  SimEventTrackSegmentDisabled::default_instance_->InitAsDefaultInstance();
  SimEventTrackSegmentReenabled::default_instance_->InitAsDefaultInstance();
  SimEventSwitchDisabled::default_instance_->InitAsDefaultInstance();
  SimEventSwitchReenabled::default_instance_->InitAsDefaultInstance();
  SimEventStationDisabled::default_instance_->InitAsDefaultInstance();
  SimEventStationReenabled::default_instance_->InitAsDefaultInstance();
  SimEventVehicleDisabled::default_instance_->InitAsDefaultInstance();
  SimEventVehicleReenabled::default_instance_->InitAsDefaultInstance();
  SimEventPassengerCreated::default_instance_->InitAsDefaultInstance();
  SimEventPassengerChangedest::default_instance_->InitAsDefaultInstance();
  SimMsgHdrInvalidSeparator::default_instance_->InitAsDefaultInstance();
  SimMsgHdrInvalidType::default_instance_->InitAsDefaultInstance();
  SimMsgHdrInvalidID::default_instance_->InitAsDefaultInstance();
  SimMsgHdrInvalidTime::default_instance_->InitAsDefaultInstance();
  SimMsgHdrInvalidSize::default_instance_->InitAsDefaultInstance();
  SimMsgBodyInvalidID::default_instance_->InitAsDefaultInstance();
  SimMsgBodyInvalidAccel::default_instance_->InitAsDefaultInstance();
  SimMsgBodyInvalidJerk::default_instance_->InitAsDefaultInstance();
  VehicleStatus::default_instance_->InitAsDefaultInstance();
  StationSummary::default_instance_->InitAsDefaultInstance();
  StationStatus::default_instance_->InitAsDefaultInstance();
  PlatformStatus::default_instance_->InitAsDefaultInstance();
  BerthStatus::default_instance_->InitAsDefaultInstance();
  PassengerStatus::default_instance_->InitAsDefaultInstance();
  RoutingEntry::default_instance_->InitAsDefaultInstance();
  SwitchStatus::default_instance_->InitAsDefaultInstance();
  TrackSegmentStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2eproto {
  StaticDescriptorInitializer_api_2eproto() {
    protobuf_AddDesc_api_2eproto();
  }
} static_descriptor_initializer_api_2eproto_;

const ::google::protobuf::EnumDescriptor* Misc_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Misc_descriptor_;
}
bool Misc_IsValid(int value) {
  switch(value) {
    case -32123:
    case -1:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CtrlMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlMsgType_descriptor_;
}
bool CtrlMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 20:
    case 50:
    case 91:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationType_descriptor_;
}
bool LocationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StationPolicy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationPolicy_descriptor_;
}
bool StationPolicy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SimMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgType_descriptor_;
}
bool SimMsgType_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1040:
    case 1041:
    case 1050:
    case 1060:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1200:
    case 1201:
    case 1202:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1305:
    case 1310:
    case 1311:
    case 1312:
    case 1401:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PolyCoeffs::kCoeffsFieldNumber;
#endif  // !_MSC_VER

PolyCoeffs::PolyCoeffs() {
  SharedCtor();
}

void PolyCoeffs::InitAsDefaultInstance() {
}

PolyCoeffs::PolyCoeffs(const PolyCoeffs& from) {
  SharedCtor();
  MergeFrom(from);
}

void PolyCoeffs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolyCoeffs::~PolyCoeffs() {
  SharedDtor();
}

void PolyCoeffs::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PolyCoeffs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolyCoeffs_descriptor_;
}

const PolyCoeffs& PolyCoeffs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

PolyCoeffs* PolyCoeffs::default_instance_ = NULL;

PolyCoeffs* PolyCoeffs::New() const {
  return new PolyCoeffs;
}

void PolyCoeffs::Clear() {
  coeffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PolyCoeffs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float coeffs = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            float value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
                  input, &value));
            add_coeffs(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PolyCoeffs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PolyCoeffs::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated float coeffs = 1 [packed = true];
  if (this->coeffs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coeffs_cached_byte_size_);
  }
  for (int i = 0; i < this->coeffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->coeffs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PolyCoeffs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float coeffs = 1 [packed = true];
  if (this->coeffs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _coeffs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->coeffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->coeffs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PolyCoeffs::ByteSize() const {
  int total_size = 0;
  
  // repeated float coeffs = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->coeffs_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _coeffs_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PolyCoeffs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PolyCoeffs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PolyCoeffs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolyCoeffs::MergeFrom(const PolyCoeffs& from) {
  GOOGLE_CHECK_NE(&from, this);
  coeffs_.MergeFrom(from.coeffs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PolyCoeffs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolyCoeffs::CopyFrom(const PolyCoeffs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyCoeffs::IsInitialized() const {
  
  return true;
}

void PolyCoeffs::Swap(PolyCoeffs* other) {
  if (other != this) {
    coeffs_.Swap(&other->coeffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PolyCoeffs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolyCoeffs_descriptor_;
  metadata.reflection = PolyCoeffs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Spline::kPolysFieldNumber;
const int Spline::kTimesFieldNumber;
#endif  // !_MSC_VER

Spline::Spline() {
  SharedCtor();
}

void Spline::InitAsDefaultInstance() {
}

Spline::Spline(const Spline& from) {
  SharedCtor();
  MergeFrom(from);
}

void Spline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spline::~Spline() {
  SharedDtor();
}

void Spline::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Spline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spline_descriptor_;
}

const Spline& Spline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

Spline* Spline::default_instance_ = NULL;

Spline* Spline::New() const {
  return new Spline;
}

void Spline::Clear() {
  polys_.Clear();
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prt.PolyCoeffs polys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_polys:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_polys()));
        if (input->ExpectTag(10)) goto parse_polys;
        if (input->ExpectTag(18)) goto parse_times;
        break;
      }
      
      // repeated float times = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_times:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            float value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
                  input, &value));
            add_times(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Spline::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .prt.PolyCoeffs polys = 1;
  for (int i = 0; i < this->polys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->polys(i), output);
  }
  
  // repeated float times = 2 [packed = true];
  if (this->times_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_times_cached_byte_size_);
  }
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->times(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .prt.PolyCoeffs polys = 1;
  for (int i = 0; i < this->polys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->polys(i), target);
  }
  
  // repeated float times = 2 [packed = true];
  if (this->times_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _times_cached_byte_size_, target);
  }
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->times(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spline::ByteSize() const {
  int total_size = 0;
  
  // repeated .prt.PolyCoeffs polys = 1;
  total_size += 1 * this->polys_size();
  for (int i = 0; i < this->polys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polys(i));
  }
  
  // repeated float times = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->times_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _times_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Spline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spline::MergeFrom(const Spline& from) {
  GOOGLE_CHECK_NE(&from, this);
  polys_.MergeFrom(from.polys_);
  times_.MergeFrom(from.times_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spline::CopyFrom(const Spline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spline::IsInitialized() const {
  
  return true;
}

void Spline::Swap(Spline* other) {
  if (other != this) {
    polys_.Swap(&other->polys_);
    times_.Swap(&other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spline_descriptor_;
  metadata.reflection = Spline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlCmdVehicleTrajectory::kVIDFieldNumber;
const int CtrlCmdVehicleTrajectory::kSplineFieldNumber;
#endif  // !_MSC_VER

CtrlCmdVehicleTrajectory::CtrlCmdVehicleTrajectory() {
  SharedCtor();
}

void CtrlCmdVehicleTrajectory::InitAsDefaultInstance() {
  spline_ = const_cast< ::prt::Spline*>(&::prt::Spline::default_instance());
}

CtrlCmdVehicleTrajectory::CtrlCmdVehicleTrajectory(const CtrlCmdVehicleTrajectory& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlCmdVehicleTrajectory::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  spline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlCmdVehicleTrajectory::~CtrlCmdVehicleTrajectory() {
  SharedDtor();
}

void CtrlCmdVehicleTrajectory::SharedDtor() {
  if (this != default_instance_) {
    delete spline_;
  }
}

const ::google::protobuf::Descriptor* CtrlCmdVehicleTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlCmdVehicleTrajectory_descriptor_;
}

const CtrlCmdVehicleTrajectory& CtrlCmdVehicleTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlCmdVehicleTrajectory* CtrlCmdVehicleTrajectory::default_instance_ = NULL;

CtrlCmdVehicleTrajectory* CtrlCmdVehicleTrajectory::New() const {
  return new CtrlCmdVehicleTrajectory;
}

void CtrlCmdVehicleTrajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    if (_has_bit(1)) {
      if (spline_ != NULL) spline_->::prt::Spline::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlCmdVehicleTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_spline;
        break;
      }
      
      // required .prt.Spline spline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_spline:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_spline()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlCmdVehicleTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlCmdVehicleTrajectory::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required .prt.Spline spline = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->spline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlCmdVehicleTrajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required .prt.Spline spline = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->spline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlCmdVehicleTrajectory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required .prt.Spline spline = 2;
    if (has_spline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spline());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlCmdVehicleTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlCmdVehicleTrajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlCmdVehicleTrajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlCmdVehicleTrajectory::MergeFrom(const CtrlCmdVehicleTrajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      mutable_spline()->::prt::Spline::MergeFrom(from.spline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlCmdVehicleTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlCmdVehicleTrajectory::CopyFrom(const CtrlCmdVehicleTrajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlCmdVehicleTrajectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CtrlCmdVehicleTrajectory::Swap(CtrlCmdVehicleTrajectory* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(spline_, other->spline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlCmdVehicleTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlCmdVehicleTrajectory_descriptor_;
  metadata.reflection = CtrlCmdVehicleTrajectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlCmdStationLaunch::kSIDFieldNumber;
const int CtrlCmdStationLaunch::kVIDFieldNumber;
const int CtrlCmdStationLaunch::kTargetSpeedFieldNumber;
const int CtrlCmdStationLaunch::kMaxAccelFieldNumber;
const int CtrlCmdStationLaunch::kMaxDecelFieldNumber;
const int CtrlCmdStationLaunch::kMaxJerkFieldNumber;
const int CtrlCmdStationLaunch::kEmergencyFieldNumber;
#endif  // !_MSC_VER

CtrlCmdStationLaunch::CtrlCmdStationLaunch() {
  SharedCtor();
}

void CtrlCmdStationLaunch::InitAsDefaultInstance() {
}

CtrlCmdStationLaunch::CtrlCmdStationLaunch(const CtrlCmdStationLaunch& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlCmdStationLaunch::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  vid_ = 0;
  target_speed_ = 0;
  max_accel_ = 0;
  max_decel_ = 0;
  max_jerk_ = 0;
  emergency_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlCmdStationLaunch::~CtrlCmdStationLaunch() {
  SharedDtor();
}

void CtrlCmdStationLaunch::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlCmdStationLaunch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlCmdStationLaunch_descriptor_;
}

const CtrlCmdStationLaunch& CtrlCmdStationLaunch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlCmdStationLaunch* CtrlCmdStationLaunch::default_instance_ = NULL;

CtrlCmdStationLaunch* CtrlCmdStationLaunch::New() const {
  return new CtrlCmdStationLaunch;
}

void CtrlCmdStationLaunch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    vid_ = 0;
    target_speed_ = 0;
    max_accel_ = 0;
    max_decel_ = 0;
    max_jerk_ = 0;
    emergency_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlCmdStationLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_target_speed;
        break;
      }
      
      // required int32 target_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_target_speed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &target_speed_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_max_accel;
        break;
      }
      
      // optional int32 max_accel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_accel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &max_accel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_max_decel;
        break;
      }
      
      // optional int32 max_decel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_decel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &max_decel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_max_jerk;
        break;
      }
      
      // optional int32 max_jerk = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_jerk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &max_jerk_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_emergency;
        break;
      }
      
      // optional bool emergency = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_emergency:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &emergency_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlCmdStationLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlCmdStationLaunch::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  // required int32 target_speed = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_speed(), output);
  }
  
  // optional int32 max_accel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_accel(), output);
  }
  
  // optional int32 max_decel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_decel(), output);
  }
  
  // optional int32 max_jerk = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_jerk(), output);
  }
  
  // optional bool emergency = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->emergency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlCmdStationLaunch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  // required int32 target_speed = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_speed(), target);
  }
  
  // optional int32 max_accel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_accel(), target);
  }
  
  // optional int32 max_decel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_decel(), target);
  }
  
  // optional int32 max_jerk = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_jerk(), target);
  }
  
  // optional bool emergency = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->emergency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlCmdStationLaunch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sID = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 target_speed = 3;
    if (has_target_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_speed());
    }
    
    // optional int32 max_accel = 4;
    if (has_max_accel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_accel());
    }
    
    // optional int32 max_decel = 5;
    if (has_max_decel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_decel());
    }
    
    // optional int32 max_jerk = 6;
    if (has_max_jerk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_jerk());
    }
    
    // optional bool emergency = 7;
    if (has_emergency()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlCmdStationLaunch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlCmdStationLaunch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlCmdStationLaunch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlCmdStationLaunch::MergeFrom(const CtrlCmdStationLaunch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_vid(from.vid());
    }
    if (from._has_bit(2)) {
      set_target_speed(from.target_speed());
    }
    if (from._has_bit(3)) {
      set_max_accel(from.max_accel());
    }
    if (from._has_bit(4)) {
      set_max_decel(from.max_decel());
    }
    if (from._has_bit(5)) {
      set_max_jerk(from.max_jerk());
    }
    if (from._has_bit(6)) {
      set_emergency(from.emergency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlCmdStationLaunch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlCmdStationLaunch::CopyFrom(const CtrlCmdStationLaunch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlCmdStationLaunch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CtrlCmdStationLaunch::Swap(CtrlCmdStationLaunch* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(vid_, other->vid_);
    std::swap(target_speed_, other->target_speed_);
    std::swap(max_accel_, other->max_accel_);
    std::swap(max_decel_, other->max_decel_);
    std::swap(max_jerk_, other->max_jerk_);
    std::swap(emergency_, other->emergency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlCmdStationLaunch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlCmdStationLaunch_descriptor_;
  metadata.reflection = CtrlCmdStationLaunch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlCmdPassengersEmbark::kVIDFieldNumber;
const int CtrlCmdPassengersEmbark::kSIDFieldNumber;
const int CtrlCmdPassengersEmbark::kPlatformIDFieldNumber;
const int CtrlCmdPassengersEmbark::kBerthIDFieldNumber;
const int CtrlCmdPassengersEmbark::kPassengerIDsFieldNumber;
#endif  // !_MSC_VER

CtrlCmdPassengersEmbark::CtrlCmdPassengersEmbark() {
  SharedCtor();
}

void CtrlCmdPassengersEmbark::InitAsDefaultInstance() {
}

CtrlCmdPassengersEmbark::CtrlCmdPassengersEmbark(const CtrlCmdPassengersEmbark& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlCmdPassengersEmbark::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  platformid_ = 0;
  berthid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlCmdPassengersEmbark::~CtrlCmdPassengersEmbark() {
  SharedDtor();
}

void CtrlCmdPassengersEmbark::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlCmdPassengersEmbark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlCmdPassengersEmbark_descriptor_;
}

const CtrlCmdPassengersEmbark& CtrlCmdPassengersEmbark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlCmdPassengersEmbark* CtrlCmdPassengersEmbark::default_instance_ = NULL;

CtrlCmdPassengersEmbark* CtrlCmdPassengersEmbark::New() const {
  return new CtrlCmdPassengersEmbark;
}

void CtrlCmdPassengersEmbark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    platformid_ = 0;
    berthid_ = 0;
  }
  passengerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlCmdPassengersEmbark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_platformID;
        break;
      }
      
      // required int32 platformID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_platformID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &platformid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_berthID;
        break;
      }
      
      // required int32 berthID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_berthID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &berthid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_passengerIDs;
        break;
      }
      
      // repeated int32 passengerIDs = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_passengerIDs:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_passengerids(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlCmdPassengersEmbark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlCmdPassengersEmbark::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 platformID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platformid(), output);
  }
  
  // required int32 berthID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->berthid(), output);
  }
  
  // repeated int32 passengerIDs = 5 [packed = true];
  if (this->passengerids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_passengerids_cached_byte_size_);
  }
  for (int i = 0; i < this->passengerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->passengerids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlCmdPassengersEmbark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 platformID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platformid(), target);
  }
  
  // required int32 berthID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->berthid(), target);
  }
  
  // repeated int32 passengerIDs = 5 [packed = true];
  if (this->passengerids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _passengerids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->passengerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->passengerids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlCmdPassengersEmbark::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 platformID = 3;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }
    
    // required int32 berthID = 4;
    if (has_berthid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->berthid());
    }
    
  }
  // repeated int32 passengerIDs = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->passengerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passengerids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _passengerids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlCmdPassengersEmbark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlCmdPassengersEmbark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlCmdPassengersEmbark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlCmdPassengersEmbark::MergeFrom(const CtrlCmdPassengersEmbark& from) {
  GOOGLE_CHECK_NE(&from, this);
  passengerids_.MergeFrom(from.passengerids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_platformid(from.platformid());
    }
    if (from._has_bit(3)) {
      set_berthid(from.berthid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlCmdPassengersEmbark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlCmdPassengersEmbark::CopyFrom(const CtrlCmdPassengersEmbark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlCmdPassengersEmbark::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CtrlCmdPassengersEmbark::Swap(CtrlCmdPassengersEmbark* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(platformid_, other->platformid_);
    std::swap(berthid_, other->berthid_);
    passengerids_.Swap(&other->passengerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlCmdPassengersEmbark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlCmdPassengersEmbark_descriptor_;
  metadata.reflection = CtrlCmdPassengersEmbark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlCmdPassengersDisembark::kVIDFieldNumber;
const int CtrlCmdPassengersDisembark::kSIDFieldNumber;
const int CtrlCmdPassengersDisembark::kPlatformIDFieldNumber;
const int CtrlCmdPassengersDisembark::kBerthIDFieldNumber;
const int CtrlCmdPassengersDisembark::kPassengerIDsFieldNumber;
#endif  // !_MSC_VER

CtrlCmdPassengersDisembark::CtrlCmdPassengersDisembark() {
  SharedCtor();
}

void CtrlCmdPassengersDisembark::InitAsDefaultInstance() {
}

CtrlCmdPassengersDisembark::CtrlCmdPassengersDisembark(const CtrlCmdPassengersDisembark& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlCmdPassengersDisembark::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  platformid_ = 0;
  berthid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlCmdPassengersDisembark::~CtrlCmdPassengersDisembark() {
  SharedDtor();
}

void CtrlCmdPassengersDisembark::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlCmdPassengersDisembark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlCmdPassengersDisembark_descriptor_;
}

const CtrlCmdPassengersDisembark& CtrlCmdPassengersDisembark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlCmdPassengersDisembark* CtrlCmdPassengersDisembark::default_instance_ = NULL;

CtrlCmdPassengersDisembark* CtrlCmdPassengersDisembark::New() const {
  return new CtrlCmdPassengersDisembark;
}

void CtrlCmdPassengersDisembark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    platformid_ = 0;
    berthid_ = 0;
  }
  passengerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlCmdPassengersDisembark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_platformID;
        break;
      }
      
      // required int32 platformID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_platformID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &platformid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_berthID;
        break;
      }
      
      // required int32 berthID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_berthID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &berthid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_passengerIDs;
        break;
      }
      
      // repeated int32 passengerIDs = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_passengerIDs:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_passengerids(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlCmdPassengersDisembark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlCmdPassengersDisembark::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 platformID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platformid(), output);
  }
  
  // required int32 berthID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->berthid(), output);
  }
  
  // repeated int32 passengerIDs = 5 [packed = true];
  if (this->passengerids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_passengerids_cached_byte_size_);
  }
  for (int i = 0; i < this->passengerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->passengerids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlCmdPassengersDisembark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 platformID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platformid(), target);
  }
  
  // required int32 berthID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->berthid(), target);
  }
  
  // repeated int32 passengerIDs = 5 [packed = true];
  if (this->passengerids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _passengerids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->passengerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->passengerids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlCmdPassengersDisembark::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 platformID = 3;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }
    
    // required int32 berthID = 4;
    if (has_berthid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->berthid());
    }
    
  }
  // repeated int32 passengerIDs = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->passengerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passengerids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _passengerids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlCmdPassengersDisembark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlCmdPassengersDisembark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlCmdPassengersDisembark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlCmdPassengersDisembark::MergeFrom(const CtrlCmdPassengersDisembark& from) {
  GOOGLE_CHECK_NE(&from, this);
  passengerids_.MergeFrom(from.passengerids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_platformid(from.platformid());
    }
    if (from._has_bit(3)) {
      set_berthid(from.berthid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlCmdPassengersDisembark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlCmdPassengersDisembark::CopyFrom(const CtrlCmdPassengersDisembark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlCmdPassengersDisembark::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CtrlCmdPassengersDisembark::Swap(CtrlCmdPassengersDisembark* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(platformid_, other->platformid_);
    std::swap(berthid_, other->berthid_);
    passengerids_.Swap(&other->passengerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlCmdPassengersDisembark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlCmdPassengersDisembark_descriptor_;
  metadata.reflection = CtrlCmdPassengersDisembark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlCmdSwitch::kSwIDFieldNumber;
const int CtrlCmdSwitch::kVIDFieldNumber;
const int CtrlCmdSwitch::kTsIDFieldNumber;
#endif  // !_MSC_VER

CtrlCmdSwitch::CtrlCmdSwitch() {
  SharedCtor();
}

void CtrlCmdSwitch::InitAsDefaultInstance() {
}

CtrlCmdSwitch::CtrlCmdSwitch(const CtrlCmdSwitch& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlCmdSwitch::SharedCtor() {
  _cached_size_ = 0;
  swid_ = 0;
  vid_ = 0;
  tsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlCmdSwitch::~CtrlCmdSwitch() {
  SharedDtor();
}

void CtrlCmdSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlCmdSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlCmdSwitch_descriptor_;
}

const CtrlCmdSwitch& CtrlCmdSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlCmdSwitch* CtrlCmdSwitch::default_instance_ = NULL;

CtrlCmdSwitch* CtrlCmdSwitch::New() const {
  return new CtrlCmdSwitch;
}

void CtrlCmdSwitch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    swid_ = 0;
    vid_ = 0;
    tsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlCmdSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 swID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &swid_));
        _set_bit(0);
        if (input->ExpectTag(24)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_tsID;
        break;
      }
      
      // required int32 tsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tsID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlCmdSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlCmdSwitch::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 swID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->swid(), output);
  }
  
  // required int32 vID = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vid(), output);
  }
  
  // required int32 tsID = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlCmdSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 swID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->swid(), target);
  }
  
  // required int32 vID = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vid(), target);
  }
  
  // required int32 tsID = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlCmdSwitch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 swID = 2;
    if (has_swid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swid());
    }
    
    // required int32 vID = 3;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 tsID = 4;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlCmdSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlCmdSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlCmdSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlCmdSwitch::MergeFrom(const CtrlCmdSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swid(from.swid());
    }
    if (from._has_bit(1)) {
      set_vid(from.vid());
    }
    if (from._has_bit(2)) {
      set_tsid(from.tsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlCmdSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlCmdSwitch::CopyFrom(const CtrlCmdSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlCmdSwitch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CtrlCmdSwitch::Swap(CtrlCmdSwitch* other) {
  if (other != this) {
    std::swap(swid_, other->swid_);
    std::swap(vid_, other->vid_);
    std::swap(tsid_, other->tsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlCmdSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlCmdSwitch_descriptor_;
  metadata.reflection = CtrlCmdSwitch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlRequestVehicleStatus::kVIDFieldNumber;
#endif  // !_MSC_VER

CtrlRequestVehicleStatus::CtrlRequestVehicleStatus() {
  SharedCtor();
}

void CtrlRequestVehicleStatus::InitAsDefaultInstance() {
}

CtrlRequestVehicleStatus::CtrlRequestVehicleStatus(const CtrlRequestVehicleStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRequestVehicleStatus::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequestVehicleStatus::~CtrlRequestVehicleStatus() {
  SharedDtor();
}

void CtrlRequestVehicleStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlRequestVehicleStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequestVehicleStatus_descriptor_;
}

const CtrlRequestVehicleStatus& CtrlRequestVehicleStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlRequestVehicleStatus* CtrlRequestVehicleStatus::default_instance_ = NULL;

CtrlRequestVehicleStatus* CtrlRequestVehicleStatus::New() const {
  return new CtrlRequestVehicleStatus;
}

void CtrlRequestVehicleStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRequestVehicleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlRequestVehicleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlRequestVehicleStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRequestVehicleStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRequestVehicleStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlRequestVehicleStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRequestVehicleStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRequestVehicleStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRequestVehicleStatus::MergeFrom(const CtrlRequestVehicleStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRequestVehicleStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequestVehicleStatus::CopyFrom(const CtrlRequestVehicleStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequestVehicleStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlRequestVehicleStatus::Swap(CtrlRequestVehicleStatus* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRequestVehicleStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequestVehicleStatus_descriptor_;
  metadata.reflection = CtrlRequestVehicleStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlRequestStationStatus::kSIDFieldNumber;
#endif  // !_MSC_VER

CtrlRequestStationStatus::CtrlRequestStationStatus() {
  SharedCtor();
}

void CtrlRequestStationStatus::InitAsDefaultInstance() {
}

CtrlRequestStationStatus::CtrlRequestStationStatus(const CtrlRequestStationStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRequestStationStatus::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequestStationStatus::~CtrlRequestStationStatus() {
  SharedDtor();
}

void CtrlRequestStationStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlRequestStationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequestStationStatus_descriptor_;
}

const CtrlRequestStationStatus& CtrlRequestStationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlRequestStationStatus* CtrlRequestStationStatus::default_instance_ = NULL;

CtrlRequestStationStatus* CtrlRequestStationStatus::New() const {
  return new CtrlRequestStationStatus;
}

void CtrlRequestStationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRequestStationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlRequestStationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlRequestStationStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRequestStationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRequestStationStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlRequestStationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRequestStationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRequestStationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRequestStationStatus::MergeFrom(const CtrlRequestStationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRequestStationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequestStationStatus::CopyFrom(const CtrlRequestStationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequestStationStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlRequestStationStatus::Swap(CtrlRequestStationStatus* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRequestStationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequestStationStatus_descriptor_;
  metadata.reflection = CtrlRequestStationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlRequestStationSummary::kSIDFieldNumber;
#endif  // !_MSC_VER

CtrlRequestStationSummary::CtrlRequestStationSummary() {
  SharedCtor();
}

void CtrlRequestStationSummary::InitAsDefaultInstance() {
}

CtrlRequestStationSummary::CtrlRequestStationSummary(const CtrlRequestStationSummary& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRequestStationSummary::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequestStationSummary::~CtrlRequestStationSummary() {
  SharedDtor();
}

void CtrlRequestStationSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlRequestStationSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequestStationSummary_descriptor_;
}

const CtrlRequestStationSummary& CtrlRequestStationSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlRequestStationSummary* CtrlRequestStationSummary::default_instance_ = NULL;

CtrlRequestStationSummary* CtrlRequestStationSummary::New() const {
  return new CtrlRequestStationSummary;
}

void CtrlRequestStationSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRequestStationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlRequestStationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlRequestStationSummary::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRequestStationSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRequestStationSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlRequestStationSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRequestStationSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRequestStationSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRequestStationSummary::MergeFrom(const CtrlRequestStationSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRequestStationSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequestStationSummary::CopyFrom(const CtrlRequestStationSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequestStationSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlRequestStationSummary::Swap(CtrlRequestStationSummary* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRequestStationSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequestStationSummary_descriptor_;
  metadata.reflection = CtrlRequestStationSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlRequestPassengerStatus::kPIDFieldNumber;
#endif  // !_MSC_VER

CtrlRequestPassengerStatus::CtrlRequestPassengerStatus() {
  SharedCtor();
}

void CtrlRequestPassengerStatus::InitAsDefaultInstance() {
}

CtrlRequestPassengerStatus::CtrlRequestPassengerStatus(const CtrlRequestPassengerStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRequestPassengerStatus::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequestPassengerStatus::~CtrlRequestPassengerStatus() {
  SharedDtor();
}

void CtrlRequestPassengerStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlRequestPassengerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequestPassengerStatus_descriptor_;
}

const CtrlRequestPassengerStatus& CtrlRequestPassengerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlRequestPassengerStatus* CtrlRequestPassengerStatus::default_instance_ = NULL;

CtrlRequestPassengerStatus* CtrlRequestPassengerStatus::New() const {
  return new CtrlRequestPassengerStatus;
}

void CtrlRequestPassengerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRequestPassengerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlRequestPassengerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlRequestPassengerStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 pID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRequestPassengerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRequestPassengerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pID = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlRequestPassengerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRequestPassengerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRequestPassengerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRequestPassengerStatus::MergeFrom(const CtrlRequestPassengerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRequestPassengerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequestPassengerStatus::CopyFrom(const CtrlRequestPassengerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequestPassengerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlRequestPassengerStatus::Swap(CtrlRequestPassengerStatus* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRequestPassengerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequestPassengerStatus_descriptor_;
  metadata.reflection = CtrlRequestPassengerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlRequestSwitchStatus::kSwIDFieldNumber;
#endif  // !_MSC_VER

CtrlRequestSwitchStatus::CtrlRequestSwitchStatus() {
  SharedCtor();
}

void CtrlRequestSwitchStatus::InitAsDefaultInstance() {
}

CtrlRequestSwitchStatus::CtrlRequestSwitchStatus(const CtrlRequestSwitchStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRequestSwitchStatus::SharedCtor() {
  _cached_size_ = 0;
  swid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequestSwitchStatus::~CtrlRequestSwitchStatus() {
  SharedDtor();
}

void CtrlRequestSwitchStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlRequestSwitchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequestSwitchStatus_descriptor_;
}

const CtrlRequestSwitchStatus& CtrlRequestSwitchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlRequestSwitchStatus* CtrlRequestSwitchStatus::default_instance_ = NULL;

CtrlRequestSwitchStatus* CtrlRequestSwitchStatus::New() const {
  return new CtrlRequestSwitchStatus;
}

void CtrlRequestSwitchStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    swid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRequestSwitchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 swID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &swid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlRequestSwitchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlRequestSwitchStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 swID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->swid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRequestSwitchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 swID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->swid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRequestSwitchStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 swID = 2;
    if (has_swid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlRequestSwitchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRequestSwitchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRequestSwitchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRequestSwitchStatus::MergeFrom(const CtrlRequestSwitchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swid(from.swid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRequestSwitchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequestSwitchStatus::CopyFrom(const CtrlRequestSwitchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequestSwitchStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlRequestSwitchStatus::Swap(CtrlRequestSwitchStatus* other) {
  if (other != this) {
    std::swap(swid_, other->swid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRequestSwitchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequestSwitchStatus_descriptor_;
  metadata.reflection = CtrlRequestSwitchStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlRequestTrackSegmentStatus::kTsIDFieldNumber;
#endif  // !_MSC_VER

CtrlRequestTrackSegmentStatus::CtrlRequestTrackSegmentStatus() {
  SharedCtor();
}

void CtrlRequestTrackSegmentStatus::InitAsDefaultInstance() {
}

CtrlRequestTrackSegmentStatus::CtrlRequestTrackSegmentStatus(const CtrlRequestTrackSegmentStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRequestTrackSegmentStatus::SharedCtor() {
  _cached_size_ = 0;
  tsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequestTrackSegmentStatus::~CtrlRequestTrackSegmentStatus() {
  SharedDtor();
}

void CtrlRequestTrackSegmentStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlRequestTrackSegmentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequestTrackSegmentStatus_descriptor_;
}

const CtrlRequestTrackSegmentStatus& CtrlRequestTrackSegmentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlRequestTrackSegmentStatus* CtrlRequestTrackSegmentStatus::default_instance_ = NULL;

CtrlRequestTrackSegmentStatus* CtrlRequestTrackSegmentStatus::New() const {
  return new CtrlRequestTrackSegmentStatus;
}

void CtrlRequestTrackSegmentStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRequestTrackSegmentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlRequestTrackSegmentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlRequestTrackSegmentStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 tsID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRequestTrackSegmentStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tsID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRequestTrackSegmentStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tsID = 2;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlRequestTrackSegmentStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRequestTrackSegmentStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRequestTrackSegmentStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRequestTrackSegmentStatus::MergeFrom(const CtrlRequestTrackSegmentStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tsid(from.tsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRequestTrackSegmentStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequestTrackSegmentStatus::CopyFrom(const CtrlRequestTrackSegmentStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequestTrackSegmentStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlRequestTrackSegmentStatus::Swap(CtrlRequestTrackSegmentStatus* other) {
  if (other != this) {
    std::swap(tsid_, other->tsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRequestTrackSegmentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequestTrackSegmentStatus_descriptor_;
  metadata.reflection = CtrlRequestTrackSegmentStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CtrlRequestTotalStatus::CtrlRequestTotalStatus() {
  SharedCtor();
}

void CtrlRequestTotalStatus::InitAsDefaultInstance() {
}

CtrlRequestTotalStatus::CtrlRequestTotalStatus(const CtrlRequestTotalStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlRequestTotalStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlRequestTotalStatus::~CtrlRequestTotalStatus() {
  SharedDtor();
}

void CtrlRequestTotalStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlRequestTotalStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlRequestTotalStatus_descriptor_;
}

const CtrlRequestTotalStatus& CtrlRequestTotalStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlRequestTotalStatus* CtrlRequestTotalStatus::default_instance_ = NULL;

CtrlRequestTotalStatus* CtrlRequestTotalStatus::New() const {
  return new CtrlRequestTotalStatus;
}

void CtrlRequestTotalStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlRequestTotalStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CtrlRequestTotalStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlRequestTotalStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlRequestTotalStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlRequestTotalStatus::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlRequestTotalStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlRequestTotalStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlRequestTotalStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlRequestTotalStatus::MergeFrom(const CtrlRequestTotalStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlRequestTotalStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlRequestTotalStatus::CopyFrom(const CtrlRequestTotalStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlRequestTotalStatus::IsInitialized() const {
  
  return true;
}

void CtrlRequestTotalStatus::Swap(CtrlRequestTotalStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlRequestTotalStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlRequestTotalStatus_descriptor_;
  metadata.reflection = CtrlRequestTotalStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlSetnotifyVehiclePosition::kVIDFieldNumber;
const int CtrlSetnotifyVehiclePosition::kTsIDFieldNumber;
const int CtrlSetnotifyVehiclePosition::kPosFieldNumber;
#endif  // !_MSC_VER

CtrlSetnotifyVehiclePosition::CtrlSetnotifyVehiclePosition() {
  SharedCtor();
}

void CtrlSetnotifyVehiclePosition::InitAsDefaultInstance() {
}

CtrlSetnotifyVehiclePosition::CtrlSetnotifyVehiclePosition(const CtrlSetnotifyVehiclePosition& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlSetnotifyVehiclePosition::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  tsid_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlSetnotifyVehiclePosition::~CtrlSetnotifyVehiclePosition() {
  SharedDtor();
}

void CtrlSetnotifyVehiclePosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlSetnotifyVehiclePosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlSetnotifyVehiclePosition_descriptor_;
}

const CtrlSetnotifyVehiclePosition& CtrlSetnotifyVehiclePosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlSetnotifyVehiclePosition* CtrlSetnotifyVehiclePosition::default_instance_ = NULL;

CtrlSetnotifyVehiclePosition* CtrlSetnotifyVehiclePosition::New() const {
  return new CtrlSetnotifyVehiclePosition;
}

void CtrlSetnotifyVehiclePosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    tsid_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlSetnotifyVehiclePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(24)) goto parse_tsID;
        break;
      }
      
      // required int32 tsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tsID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }
      
      // required int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pos_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlSetnotifyVehiclePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlSetnotifyVehiclePosition::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  // required int32 tsID = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tsid(), output);
  }
  
  // required int32 pos = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlSetnotifyVehiclePosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  // required int32 tsID = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tsid(), target);
  }
  
  // required int32 pos = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlSetnotifyVehiclePosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 tsID = 3;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
    // required int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlSetnotifyVehiclePosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlSetnotifyVehiclePosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlSetnotifyVehiclePosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlSetnotifyVehiclePosition::MergeFrom(const CtrlSetnotifyVehiclePosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_tsid(from.tsid());
    }
    if (from._has_bit(2)) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlSetnotifyVehiclePosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlSetnotifyVehiclePosition::CopyFrom(const CtrlSetnotifyVehiclePosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlSetnotifyVehiclePosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CtrlSetnotifyVehiclePosition::Swap(CtrlSetnotifyVehiclePosition* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(tsid_, other->tsid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlSetnotifyVehiclePosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlSetnotifyVehiclePosition_descriptor_;
  metadata.reflection = CtrlSetnotifyVehiclePosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlSetnotifyTime::kTimeFieldNumber;
#endif  // !_MSC_VER

CtrlSetnotifyTime::CtrlSetnotifyTime() {
  SharedCtor();
}

void CtrlSetnotifyTime::InitAsDefaultInstance() {
}

CtrlSetnotifyTime::CtrlSetnotifyTime(const CtrlSetnotifyTime& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlSetnotifyTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlSetnotifyTime::~CtrlSetnotifyTime() {
  SharedDtor();
}

void CtrlSetnotifyTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlSetnotifyTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlSetnotifyTime_descriptor_;
}

const CtrlSetnotifyTime& CtrlSetnotifyTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlSetnotifyTime* CtrlSetnotifyTime::default_instance_ = NULL;

CtrlSetnotifyTime* CtrlSetnotifyTime::New() const {
  return new CtrlSetnotifyTime;
}

void CtrlSetnotifyTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlSetnotifyTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlSetnotifyTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlSetnotifyTime::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlSetnotifyTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlSetnotifyTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlSetnotifyTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlSetnotifyTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlSetnotifyTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlSetnotifyTime::MergeFrom(const CtrlSetnotifyTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlSetnotifyTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlSetnotifyTime::CopyFrom(const CtrlSetnotifyTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlSetnotifyTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlSetnotifyTime::Swap(CtrlSetnotifyTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlSetnotifyTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlSetnotifyTime_descriptor_;
  metadata.reflection = CtrlSetnotifyTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CtrlResume::kLastSimMsgIDFieldNumber;
#endif  // !_MSC_VER

CtrlResume::CtrlResume() {
  SharedCtor();
}

void CtrlResume::InitAsDefaultInstance() {
}

CtrlResume::CtrlResume(const CtrlResume& from) {
  SharedCtor();
  MergeFrom(from);
}

void CtrlResume::SharedCtor() {
  _cached_size_ = 0;
  last_sim_msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlResume::~CtrlResume() {
  SharedDtor();
}

void CtrlResume::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CtrlResume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlResume_descriptor_;
}

const CtrlResume& CtrlResume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

CtrlResume* CtrlResume::default_instance_ = NULL;

CtrlResume* CtrlResume::New() const {
  return new CtrlResume;
}

void CtrlResume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_sim_msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtrlResume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 last_sim_msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &last_sim_msgid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtrlResume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CtrlResume::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 last_sim_msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->last_sim_msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtrlResume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 last_sim_msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->last_sim_msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtrlResume::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 last_sim_msgID = 1;
    if (has_last_sim_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_sim_msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CtrlResume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtrlResume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtrlResume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtrlResume::MergeFrom(const CtrlResume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_last_sim_msgid(from.last_sim_msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtrlResume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlResume::CopyFrom(const CtrlResume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlResume::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CtrlResume::Swap(CtrlResume* other) {
  if (other != this) {
    std::swap(last_sim_msgid_, other->last_sim_msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtrlResume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlResume_descriptor_;
  metadata.reflection = CtrlResume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SimStart::SimStart() {
  SharedCtor();
}

void SimStart::InitAsDefaultInstance() {
}

SimStart::SimStart(const SimStart& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimStart::~SimStart() {
  SharedDtor();
}

void SimStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimStart_descriptor_;
}

const SimStart& SimStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimStart* SimStart::default_instance_ = NULL;

SimStart* SimStart::New() const {
  return new SimStart;
}

void SimStart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SimStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimStart::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimStart::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimStart::MergeFrom(const SimStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimStart::CopyFrom(const SimStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimStart::IsInitialized() const {
  
  return true;
}

void SimStart::Swap(SimStart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimStart_descriptor_;
  metadata.reflection = SimStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SimEnd::SimEnd() {
  SharedCtor();
}

void SimEnd::InitAsDefaultInstance() {
}

SimEnd::SimEnd(const SimEnd& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEnd::~SimEnd() {
  SharedDtor();
}

void SimEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEnd_descriptor_;
}

const SimEnd& SimEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEnd* SimEnd::default_instance_ = NULL;

SimEnd* SimEnd::New() const {
  return new SimEnd;
}

void SimEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SimEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEnd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEnd::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEnd::MergeFrom(const SimEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEnd::CopyFrom(const SimEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEnd::IsInitialized() const {
  
  return true;
}

void SimEnd::Swap(SimEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEnd_descriptor_;
  metadata.reflection = SimEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimUnimplemented::kMsgIDFieldNumber;
#endif  // !_MSC_VER

SimUnimplemented::SimUnimplemented() {
  SharedCtor();
}

void SimUnimplemented::InitAsDefaultInstance() {
}

SimUnimplemented::SimUnimplemented(const SimUnimplemented& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimUnimplemented::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimUnimplemented::~SimUnimplemented() {
  SharedDtor();
}

void SimUnimplemented::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimUnimplemented::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimUnimplemented_descriptor_;
}

const SimUnimplemented& SimUnimplemented::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimUnimplemented* SimUnimplemented::default_instance_ = NULL;

SimUnimplemented* SimUnimplemented::New() const {
  return new SimUnimplemented;
}

void SimUnimplemented::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimUnimplemented::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimUnimplemented::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimUnimplemented::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimUnimplemented::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimUnimplemented::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimUnimplemented::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimUnimplemented* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimUnimplemented*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimUnimplemented::MergeFrom(const SimUnimplemented& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimUnimplemented::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimUnimplemented::CopyFrom(const SimUnimplemented& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimUnimplemented::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimUnimplemented::Swap(SimUnimplemented* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimUnimplemented::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimUnimplemented_descriptor_;
  metadata.reflection = SimUnimplemented_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimAbortVehicleSpeed::kMsgIDFieldNumber;
#endif  // !_MSC_VER

SimAbortVehicleSpeed::SimAbortVehicleSpeed() {
  SharedCtor();
}

void SimAbortVehicleSpeed::InitAsDefaultInstance() {
}

SimAbortVehicleSpeed::SimAbortVehicleSpeed(const SimAbortVehicleSpeed& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimAbortVehicleSpeed::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimAbortVehicleSpeed::~SimAbortVehicleSpeed() {
  SharedDtor();
}

void SimAbortVehicleSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimAbortVehicleSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimAbortVehicleSpeed_descriptor_;
}

const SimAbortVehicleSpeed& SimAbortVehicleSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimAbortVehicleSpeed* SimAbortVehicleSpeed::default_instance_ = NULL;

SimAbortVehicleSpeed* SimAbortVehicleSpeed::New() const {
  return new SimAbortVehicleSpeed;
}

void SimAbortVehicleSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimAbortVehicleSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimAbortVehicleSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimAbortVehicleSpeed::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimAbortVehicleSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimAbortVehicleSpeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimAbortVehicleSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimAbortVehicleSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimAbortVehicleSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimAbortVehicleSpeed::MergeFrom(const SimAbortVehicleSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimAbortVehicleSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimAbortVehicleSpeed::CopyFrom(const SimAbortVehicleSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimAbortVehicleSpeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimAbortVehicleSpeed::Swap(SimAbortVehicleSpeed* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimAbortVehicleSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimAbortVehicleSpeed_descriptor_;
  metadata.reflection = SimAbortVehicleSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimCompleteVehicleSpeed::kMsgIDFieldNumber;
const int SimCompleteVehicleSpeed::kVIDFieldNumber;
const int SimCompleteVehicleSpeed::kSpeedFieldNumber;
#endif  // !_MSC_VER

SimCompleteVehicleSpeed::SimCompleteVehicleSpeed() {
  SharedCtor();
}

void SimCompleteVehicleSpeed::InitAsDefaultInstance() {
}

SimCompleteVehicleSpeed::SimCompleteVehicleSpeed(const SimCompleteVehicleSpeed& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimCompleteVehicleSpeed::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  vid_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimCompleteVehicleSpeed::~SimCompleteVehicleSpeed() {
  SharedDtor();
}

void SimCompleteVehicleSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimCompleteVehicleSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimCompleteVehicleSpeed_descriptor_;
}

const SimCompleteVehicleSpeed& SimCompleteVehicleSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimCompleteVehicleSpeed* SimCompleteVehicleSpeed::default_instance_ = NULL;

SimCompleteVehicleSpeed* SimCompleteVehicleSpeed::New() const {
  return new SimCompleteVehicleSpeed;
}

void SimCompleteVehicleSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    vid_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimCompleteVehicleSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_speed;
        break;
      }
      
      // required int32 speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_speed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &speed_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimCompleteVehicleSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimCompleteVehicleSpeed::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  // required int32 speed = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimCompleteVehicleSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  // required int32 speed = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimCompleteVehicleSpeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 speed = 3;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimCompleteVehicleSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimCompleteVehicleSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimCompleteVehicleSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimCompleteVehicleSpeed::MergeFrom(const SimCompleteVehicleSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_vid(from.vid());
    }
    if (from._has_bit(2)) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimCompleteVehicleSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimCompleteVehicleSpeed::CopyFrom(const SimCompleteVehicleSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimCompleteVehicleSpeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimCompleteVehicleSpeed::Swap(SimCompleteVehicleSpeed* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(vid_, other->vid_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimCompleteVehicleSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimCompleteVehicleSpeed_descriptor_;
  metadata.reflection = SimCompleteVehicleSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimCompleteStationLaunch::kMsgIDFieldNumber;
const int SimCompleteStationLaunch::kSIDFieldNumber;
const int SimCompleteStationLaunch::kVIDFieldNumber;
#endif  // !_MSC_VER

SimCompleteStationLaunch::SimCompleteStationLaunch() {
  SharedCtor();
}

void SimCompleteStationLaunch::InitAsDefaultInstance() {
}

SimCompleteStationLaunch::SimCompleteStationLaunch(const SimCompleteStationLaunch& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimCompleteStationLaunch::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  sid_ = 0;
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimCompleteStationLaunch::~SimCompleteStationLaunch() {
  SharedDtor();
}

void SimCompleteStationLaunch::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimCompleteStationLaunch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimCompleteStationLaunch_descriptor_;
}

const SimCompleteStationLaunch& SimCompleteStationLaunch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimCompleteStationLaunch* SimCompleteStationLaunch::default_instance_ = NULL;

SimCompleteStationLaunch* SimCompleteStationLaunch::New() const {
  return new SimCompleteStationLaunch;
}

void SimCompleteStationLaunch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    sid_ = 0;
    vid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimCompleteStationLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimCompleteStationLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimCompleteStationLaunch::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 vID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimCompleteStationLaunch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 vID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimCompleteStationLaunch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 vID = 3;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimCompleteStationLaunch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimCompleteStationLaunch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimCompleteStationLaunch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimCompleteStationLaunch::MergeFrom(const SimCompleteStationLaunch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_vid(from.vid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimCompleteStationLaunch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimCompleteStationLaunch::CopyFrom(const SimCompleteStationLaunch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimCompleteStationLaunch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimCompleteStationLaunch::Swap(SimCompleteStationLaunch* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sid_, other->sid_);
    std::swap(vid_, other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimCompleteStationLaunch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimCompleteStationLaunch_descriptor_;
  metadata.reflection = SimCompleteStationLaunch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimCompletePassengerLoadVehicle::kMsgIDFieldNumber;
const int SimCompletePassengerLoadVehicle::kPIDFieldNumber;
const int SimCompletePassengerLoadVehicle::kVIDFieldNumber;
const int SimCompletePassengerLoadVehicle::kSIDFieldNumber;
#endif  // !_MSC_VER

SimCompletePassengerLoadVehicle::SimCompletePassengerLoadVehicle() {
  SharedCtor();
}

void SimCompletePassengerLoadVehicle::InitAsDefaultInstance() {
}

SimCompletePassengerLoadVehicle::SimCompletePassengerLoadVehicle(const SimCompletePassengerLoadVehicle& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimCompletePassengerLoadVehicle::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  pid_ = 0;
  vid_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimCompletePassengerLoadVehicle::~SimCompletePassengerLoadVehicle() {
  SharedDtor();
}

void SimCompletePassengerLoadVehicle::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimCompletePassengerLoadVehicle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimCompletePassengerLoadVehicle_descriptor_;
}

const SimCompletePassengerLoadVehicle& SimCompletePassengerLoadVehicle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimCompletePassengerLoadVehicle* SimCompletePassengerLoadVehicle::default_instance_ = NULL;

SimCompletePassengerLoadVehicle* SimCompletePassengerLoadVehicle::New() const {
  return new SimCompletePassengerLoadVehicle;
}

void SimCompletePassengerLoadVehicle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    pid_ = 0;
    vid_ = 0;
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimCompletePassengerLoadVehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_pID;
        break;
      }
      
      // required int32 pID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimCompletePassengerLoadVehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimCompletePassengerLoadVehicle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 pID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }
  
  // required int32 vID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vid(), output);
  }
  
  // required int32 sID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimCompletePassengerLoadVehicle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 pID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }
  
  // required int32 vID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vid(), target);
  }
  
  // required int32 sID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimCompletePassengerLoadVehicle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 pID = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // required int32 vID = 3;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimCompletePassengerLoadVehicle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimCompletePassengerLoadVehicle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimCompletePassengerLoadVehicle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimCompletePassengerLoadVehicle::MergeFrom(const SimCompletePassengerLoadVehicle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_pid(from.pid());
    }
    if (from._has_bit(2)) {
      set_vid(from.vid());
    }
    if (from._has_bit(3)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimCompletePassengerLoadVehicle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimCompletePassengerLoadVehicle::CopyFrom(const SimCompletePassengerLoadVehicle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimCompletePassengerLoadVehicle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SimCompletePassengerLoadVehicle::Swap(SimCompletePassengerLoadVehicle* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(pid_, other->pid_);
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimCompletePassengerLoadVehicle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimCompletePassengerLoadVehicle_descriptor_;
  metadata.reflection = SimCompletePassengerLoadVehicle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimCompleteSwitch::kMsgIDFieldNumber;
const int SimCompleteSwitch::kSwIDFieldNumber;
const int SimCompleteSwitch::kVIDFieldNumber;
const int SimCompleteSwitch::kTsIDFieldNumber;
#endif  // !_MSC_VER

SimCompleteSwitch::SimCompleteSwitch() {
  SharedCtor();
}

void SimCompleteSwitch::InitAsDefaultInstance() {
}

SimCompleteSwitch::SimCompleteSwitch(const SimCompleteSwitch& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimCompleteSwitch::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  swid_ = 0;
  vid_ = 0;
  tsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimCompleteSwitch::~SimCompleteSwitch() {
  SharedDtor();
}

void SimCompleteSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimCompleteSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimCompleteSwitch_descriptor_;
}

const SimCompleteSwitch& SimCompleteSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimCompleteSwitch* SimCompleteSwitch::default_instance_ = NULL;

SimCompleteSwitch* SimCompleteSwitch::New() const {
  return new SimCompleteSwitch;
}

void SimCompleteSwitch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    swid_ = 0;
    vid_ = 0;
    tsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimCompleteSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_swID;
        break;
      }
      
      // required int32 swID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_swID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &swid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_tsID;
        break;
      }
      
      // required int32 tsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tsID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimCompleteSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimCompleteSwitch::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 swID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->swid(), output);
  }
  
  // required int32 vID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vid(), output);
  }
  
  // required int32 tsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimCompleteSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 swID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->swid(), target);
  }
  
  // required int32 vID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vid(), target);
  }
  
  // required int32 tsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimCompleteSwitch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 swID = 2;
    if (has_swid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swid());
    }
    
    // required int32 vID = 3;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 tsID = 4;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimCompleteSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimCompleteSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimCompleteSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimCompleteSwitch::MergeFrom(const SimCompleteSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_swid(from.swid());
    }
    if (from._has_bit(2)) {
      set_vid(from.vid());
    }
    if (from._has_bit(3)) {
      set_tsid(from.tsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimCompleteSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimCompleteSwitch::CopyFrom(const SimCompleteSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimCompleteSwitch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SimCompleteSwitch::Swap(SimCompleteSwitch* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(swid_, other->swid_);
    std::swap(vid_, other->vid_);
    std::swap(tsid_, other->tsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimCompleteSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimCompleteSwitch_descriptor_;
  metadata.reflection = SimCompleteSwitch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimResponseVehicleStatus::kMsgIDFieldNumber;
const int SimResponseVehicleStatus::kVStatusFieldNumber;
#endif  // !_MSC_VER

SimResponseVehicleStatus::SimResponseVehicleStatus() {
  SharedCtor();
}

void SimResponseVehicleStatus::InitAsDefaultInstance() {
  v_status_ = const_cast< ::prt::VehicleStatus*>(&::prt::VehicleStatus::default_instance());
}

SimResponseVehicleStatus::SimResponseVehicleStatus(const SimResponseVehicleStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimResponseVehicleStatus::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  v_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimResponseVehicleStatus::~SimResponseVehicleStatus() {
  SharedDtor();
}

void SimResponseVehicleStatus::SharedDtor() {
  if (this != default_instance_) {
    delete v_status_;
  }
}

const ::google::protobuf::Descriptor* SimResponseVehicleStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimResponseVehicleStatus_descriptor_;
}

const SimResponseVehicleStatus& SimResponseVehicleStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimResponseVehicleStatus* SimResponseVehicleStatus::default_instance_ = NULL;

SimResponseVehicleStatus* SimResponseVehicleStatus::New() const {
  return new SimResponseVehicleStatus;
}

void SimResponseVehicleStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    if (_has_bit(1)) {
      if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimResponseVehicleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_v_status;
        break;
      }
      
      // required .prt.VehicleStatus v_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_v_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_v_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimResponseVehicleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimResponseVehicleStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required .prt.VehicleStatus v_status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->v_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimResponseVehicleStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required .prt.VehicleStatus v_status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->v_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimResponseVehicleStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required .prt.VehicleStatus v_status = 2;
    if (has_v_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimResponseVehicleStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimResponseVehicleStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimResponseVehicleStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimResponseVehicleStatus::MergeFrom(const SimResponseVehicleStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      mutable_v_status()->::prt::VehicleStatus::MergeFrom(from.v_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimResponseVehicleStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResponseVehicleStatus::CopyFrom(const SimResponseVehicleStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResponseVehicleStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_v_status()) {
    if (!this->v_status().IsInitialized()) return false;
  }
  return true;
}

void SimResponseVehicleStatus::Swap(SimResponseVehicleStatus* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(v_status_, other->v_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimResponseVehicleStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimResponseVehicleStatus_descriptor_;
  metadata.reflection = SimResponseVehicleStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimResponseStationStatus::kMsgIDFieldNumber;
const int SimResponseStationStatus::kSStatusFieldNumber;
#endif  // !_MSC_VER

SimResponseStationStatus::SimResponseStationStatus() {
  SharedCtor();
}

void SimResponseStationStatus::InitAsDefaultInstance() {
  s_status_ = const_cast< ::prt::StationStatus*>(&::prt::StationStatus::default_instance());
}

SimResponseStationStatus::SimResponseStationStatus(const SimResponseStationStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimResponseStationStatus::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  s_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimResponseStationStatus::~SimResponseStationStatus() {
  SharedDtor();
}

void SimResponseStationStatus::SharedDtor() {
  if (this != default_instance_) {
    delete s_status_;
  }
}

const ::google::protobuf::Descriptor* SimResponseStationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimResponseStationStatus_descriptor_;
}

const SimResponseStationStatus& SimResponseStationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimResponseStationStatus* SimResponseStationStatus::default_instance_ = NULL;

SimResponseStationStatus* SimResponseStationStatus::New() const {
  return new SimResponseStationStatus;
}

void SimResponseStationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    if (_has_bit(1)) {
      if (s_status_ != NULL) s_status_->::prt::StationStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimResponseStationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_s_status;
        break;
      }
      
      // required .prt.StationStatus s_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_s_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_s_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimResponseStationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimResponseStationStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required .prt.StationStatus s_status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->s_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimResponseStationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required .prt.StationStatus s_status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->s_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimResponseStationStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required .prt.StationStatus s_status = 2;
    if (has_s_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimResponseStationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimResponseStationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimResponseStationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimResponseStationStatus::MergeFrom(const SimResponseStationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      mutable_s_status()->::prt::StationStatus::MergeFrom(from.s_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimResponseStationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResponseStationStatus::CopyFrom(const SimResponseStationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResponseStationStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_s_status()) {
    if (!this->s_status().IsInitialized()) return false;
  }
  return true;
}

void SimResponseStationStatus::Swap(SimResponseStationStatus* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(s_status_, other->s_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimResponseStationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimResponseStationStatus_descriptor_;
  metadata.reflection = SimResponseStationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimResponseStationSummary::kMsgIDFieldNumber;
const int SimResponseStationSummary::kSSummaryFieldNumber;
#endif  // !_MSC_VER

SimResponseStationSummary::SimResponseStationSummary() {
  SharedCtor();
}

void SimResponseStationSummary::InitAsDefaultInstance() {
  s_summary_ = const_cast< ::prt::StationSummary*>(&::prt::StationSummary::default_instance());
}

SimResponseStationSummary::SimResponseStationSummary(const SimResponseStationSummary& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimResponseStationSummary::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  s_summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimResponseStationSummary::~SimResponseStationSummary() {
  SharedDtor();
}

void SimResponseStationSummary::SharedDtor() {
  if (this != default_instance_) {
    delete s_summary_;
  }
}

const ::google::protobuf::Descriptor* SimResponseStationSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimResponseStationSummary_descriptor_;
}

const SimResponseStationSummary& SimResponseStationSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimResponseStationSummary* SimResponseStationSummary::default_instance_ = NULL;

SimResponseStationSummary* SimResponseStationSummary::New() const {
  return new SimResponseStationSummary;
}

void SimResponseStationSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    if (_has_bit(1)) {
      if (s_summary_ != NULL) s_summary_->::prt::StationSummary::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimResponseStationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_s_summary;
        break;
      }
      
      // required .prt.StationSummary s_summary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_s_summary:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_s_summary()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimResponseStationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimResponseStationSummary::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required .prt.StationSummary s_summary = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->s_summary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimResponseStationSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required .prt.StationSummary s_summary = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->s_summary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimResponseStationSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required .prt.StationSummary s_summary = 2;
    if (has_s_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_summary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimResponseStationSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimResponseStationSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimResponseStationSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimResponseStationSummary::MergeFrom(const SimResponseStationSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      mutable_s_summary()->::prt::StationSummary::MergeFrom(from.s_summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimResponseStationSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResponseStationSummary::CopyFrom(const SimResponseStationSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResponseStationSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_s_summary()) {
    if (!this->s_summary().IsInitialized()) return false;
  }
  return true;
}

void SimResponseStationSummary::Swap(SimResponseStationSummary* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(s_summary_, other->s_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimResponseStationSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimResponseStationSummary_descriptor_;
  metadata.reflection = SimResponseStationSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimResponsePassengerStatus::kMsgIDFieldNumber;
const int SimResponsePassengerStatus::kPStatusFieldNumber;
#endif  // !_MSC_VER

SimResponsePassengerStatus::SimResponsePassengerStatus() {
  SharedCtor();
}

void SimResponsePassengerStatus::InitAsDefaultInstance() {
  p_status_ = const_cast< ::prt::PassengerStatus*>(&::prt::PassengerStatus::default_instance());
}

SimResponsePassengerStatus::SimResponsePassengerStatus(const SimResponsePassengerStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimResponsePassengerStatus::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  p_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimResponsePassengerStatus::~SimResponsePassengerStatus() {
  SharedDtor();
}

void SimResponsePassengerStatus::SharedDtor() {
  if (this != default_instance_) {
    delete p_status_;
  }
}

const ::google::protobuf::Descriptor* SimResponsePassengerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimResponsePassengerStatus_descriptor_;
}

const SimResponsePassengerStatus& SimResponsePassengerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimResponsePassengerStatus* SimResponsePassengerStatus::default_instance_ = NULL;

SimResponsePassengerStatus* SimResponsePassengerStatus::New() const {
  return new SimResponsePassengerStatus;
}

void SimResponsePassengerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    if (_has_bit(1)) {
      if (p_status_ != NULL) p_status_->::prt::PassengerStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimResponsePassengerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_p_status;
        break;
      }
      
      // required .prt.PassengerStatus p_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_p_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_p_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimResponsePassengerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimResponsePassengerStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required .prt.PassengerStatus p_status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->p_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimResponsePassengerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required .prt.PassengerStatus p_status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->p_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimResponsePassengerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required .prt.PassengerStatus p_status = 2;
    if (has_p_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimResponsePassengerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimResponsePassengerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimResponsePassengerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimResponsePassengerStatus::MergeFrom(const SimResponsePassengerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      mutable_p_status()->::prt::PassengerStatus::MergeFrom(from.p_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimResponsePassengerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResponsePassengerStatus::CopyFrom(const SimResponsePassengerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResponsePassengerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_p_status()) {
    if (!this->p_status().IsInitialized()) return false;
  }
  return true;
}

void SimResponsePassengerStatus::Swap(SimResponsePassengerStatus* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(p_status_, other->p_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimResponsePassengerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimResponsePassengerStatus_descriptor_;
  metadata.reflection = SimResponsePassengerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimResponseSwitchStatus::kMsgIDFieldNumber;
const int SimResponseSwitchStatus::kSwStatusFieldNumber;
#endif  // !_MSC_VER

SimResponseSwitchStatus::SimResponseSwitchStatus() {
  SharedCtor();
}

void SimResponseSwitchStatus::InitAsDefaultInstance() {
  sw_status_ = const_cast< ::prt::SwitchStatus*>(&::prt::SwitchStatus::default_instance());
}

SimResponseSwitchStatus::SimResponseSwitchStatus(const SimResponseSwitchStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimResponseSwitchStatus::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  sw_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimResponseSwitchStatus::~SimResponseSwitchStatus() {
  SharedDtor();
}

void SimResponseSwitchStatus::SharedDtor() {
  if (this != default_instance_) {
    delete sw_status_;
  }
}

const ::google::protobuf::Descriptor* SimResponseSwitchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimResponseSwitchStatus_descriptor_;
}

const SimResponseSwitchStatus& SimResponseSwitchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimResponseSwitchStatus* SimResponseSwitchStatus::default_instance_ = NULL;

SimResponseSwitchStatus* SimResponseSwitchStatus::New() const {
  return new SimResponseSwitchStatus;
}

void SimResponseSwitchStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    if (_has_bit(1)) {
      if (sw_status_ != NULL) sw_status_->::prt::SwitchStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimResponseSwitchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_sw_status;
        break;
      }
      
      // required .prt.SwitchStatus sw_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sw_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_sw_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimResponseSwitchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimResponseSwitchStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required .prt.SwitchStatus sw_status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->sw_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimResponseSwitchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required .prt.SwitchStatus sw_status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sw_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimResponseSwitchStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required .prt.SwitchStatus sw_status = 2;
    if (has_sw_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sw_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimResponseSwitchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimResponseSwitchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimResponseSwitchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimResponseSwitchStatus::MergeFrom(const SimResponseSwitchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      mutable_sw_status()->::prt::SwitchStatus::MergeFrom(from.sw_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimResponseSwitchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResponseSwitchStatus::CopyFrom(const SimResponseSwitchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResponseSwitchStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_sw_status()) {
    if (!this->sw_status().IsInitialized()) return false;
  }
  return true;
}

void SimResponseSwitchStatus::Swap(SimResponseSwitchStatus* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sw_status_, other->sw_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimResponseSwitchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimResponseSwitchStatus_descriptor_;
  metadata.reflection = SimResponseSwitchStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimResponseTrackSegmentStatus::kMsgIDFieldNumber;
const int SimResponseTrackSegmentStatus::kTsStatusFieldNumber;
#endif  // !_MSC_VER

SimResponseTrackSegmentStatus::SimResponseTrackSegmentStatus() {
  SharedCtor();
}

void SimResponseTrackSegmentStatus::InitAsDefaultInstance() {
  ts_status_ = const_cast< ::prt::TrackSegmentStatus*>(&::prt::TrackSegmentStatus::default_instance());
}

SimResponseTrackSegmentStatus::SimResponseTrackSegmentStatus(const SimResponseTrackSegmentStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimResponseTrackSegmentStatus::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  ts_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimResponseTrackSegmentStatus::~SimResponseTrackSegmentStatus() {
  SharedDtor();
}

void SimResponseTrackSegmentStatus::SharedDtor() {
  if (this != default_instance_) {
    delete ts_status_;
  }
}

const ::google::protobuf::Descriptor* SimResponseTrackSegmentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimResponseTrackSegmentStatus_descriptor_;
}

const SimResponseTrackSegmentStatus& SimResponseTrackSegmentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimResponseTrackSegmentStatus* SimResponseTrackSegmentStatus::default_instance_ = NULL;

SimResponseTrackSegmentStatus* SimResponseTrackSegmentStatus::New() const {
  return new SimResponseTrackSegmentStatus;
}

void SimResponseTrackSegmentStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    if (_has_bit(1)) {
      if (ts_status_ != NULL) ts_status_->::prt::TrackSegmentStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimResponseTrackSegmentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_ts_status;
        break;
      }
      
      // required .prt.TrackSegmentStatus ts_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ts_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ts_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimResponseTrackSegmentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimResponseTrackSegmentStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required .prt.TrackSegmentStatus ts_status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->ts_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimResponseTrackSegmentStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required .prt.TrackSegmentStatus ts_status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ts_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimResponseTrackSegmentStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required .prt.TrackSegmentStatus ts_status = 2;
    if (has_ts_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ts_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimResponseTrackSegmentStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimResponseTrackSegmentStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimResponseTrackSegmentStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimResponseTrackSegmentStatus::MergeFrom(const SimResponseTrackSegmentStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      mutable_ts_status()->::prt::TrackSegmentStatus::MergeFrom(from.ts_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimResponseTrackSegmentStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResponseTrackSegmentStatus::CopyFrom(const SimResponseTrackSegmentStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResponseTrackSegmentStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_ts_status()) {
    if (!this->ts_status().IsInitialized()) return false;
  }
  return true;
}

void SimResponseTrackSegmentStatus::Swap(SimResponseTrackSegmentStatus* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(ts_status_, other->ts_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimResponseTrackSegmentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimResponseTrackSegmentStatus_descriptor_;
  metadata.reflection = SimResponseTrackSegmentStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimResponseTotalStatus::kMsgIDFieldNumber;
const int SimResponseTotalStatus::kVStatusesFieldNumber;
const int SimResponseTotalStatus::kSStatusesFieldNumber;
const int SimResponseTotalStatus::kPStatusesFieldNumber;
const int SimResponseTotalStatus::kSwStatusesFieldNumber;
const int SimResponseTotalStatus::kTsStatusesFieldNumber;
#endif  // !_MSC_VER

SimResponseTotalStatus::SimResponseTotalStatus() {
  SharedCtor();
}

void SimResponseTotalStatus::InitAsDefaultInstance() {
}

SimResponseTotalStatus::SimResponseTotalStatus(const SimResponseTotalStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimResponseTotalStatus::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimResponseTotalStatus::~SimResponseTotalStatus() {
  SharedDtor();
}

void SimResponseTotalStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimResponseTotalStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimResponseTotalStatus_descriptor_;
}

const SimResponseTotalStatus& SimResponseTotalStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimResponseTotalStatus* SimResponseTotalStatus::default_instance_ = NULL;

SimResponseTotalStatus* SimResponseTotalStatus::New() const {
  return new SimResponseTotalStatus;
}

void SimResponseTotalStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
  }
  v_statuses_.Clear();
  s_statuses_.Clear();
  p_statuses_.Clear();
  sw_statuses_.Clear();
  ts_statuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimResponseTotalStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_v_statuses;
        break;
      }
      
      // repeated .prt.VehicleStatus v_statuses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_v_statuses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_v_statuses()));
        if (input->ExpectTag(18)) goto parse_v_statuses;
        if (input->ExpectTag(26)) goto parse_s_statuses;
        break;
      }
      
      // repeated .prt.StationStatus s_statuses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_s_statuses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_s_statuses()));
        if (input->ExpectTag(26)) goto parse_s_statuses;
        if (input->ExpectTag(34)) goto parse_p_statuses;
        break;
      }
      
      // repeated .prt.PassengerStatus p_statuses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_p_statuses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_p_statuses()));
        if (input->ExpectTag(34)) goto parse_p_statuses;
        if (input->ExpectTag(42)) goto parse_sw_statuses;
        break;
      }
      
      // repeated .prt.SwitchStatus sw_statuses = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sw_statuses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_sw_statuses()));
        if (input->ExpectTag(42)) goto parse_sw_statuses;
        if (input->ExpectTag(50)) goto parse_ts_statuses;
        break;
      }
      
      // repeated .prt.TrackSegmentStatus ts_statuses = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ts_statuses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_ts_statuses()));
        if (input->ExpectTag(50)) goto parse_ts_statuses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimResponseTotalStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimResponseTotalStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // repeated .prt.VehicleStatus v_statuses = 2;
  for (int i = 0; i < this->v_statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->v_statuses(i), output);
  }
  
  // repeated .prt.StationStatus s_statuses = 3;
  for (int i = 0; i < this->s_statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->s_statuses(i), output);
  }
  
  // repeated .prt.PassengerStatus p_statuses = 4;
  for (int i = 0; i < this->p_statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->p_statuses(i), output);
  }
  
  // repeated .prt.SwitchStatus sw_statuses = 5;
  for (int i = 0; i < this->sw_statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->sw_statuses(i), output);
  }
  
  // repeated .prt.TrackSegmentStatus ts_statuses = 6;
  for (int i = 0; i < this->ts_statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->ts_statuses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimResponseTotalStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // repeated .prt.VehicleStatus v_statuses = 2;
  for (int i = 0; i < this->v_statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->v_statuses(i), target);
  }
  
  // repeated .prt.StationStatus s_statuses = 3;
  for (int i = 0; i < this->s_statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->s_statuses(i), target);
  }
  
  // repeated .prt.PassengerStatus p_statuses = 4;
  for (int i = 0; i < this->p_statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->p_statuses(i), target);
  }
  
  // repeated .prt.SwitchStatus sw_statuses = 5;
  for (int i = 0; i < this->sw_statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sw_statuses(i), target);
  }
  
  // repeated .prt.TrackSegmentStatus ts_statuses = 6;
  for (int i = 0; i < this->ts_statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ts_statuses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimResponseTotalStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
  }
  // repeated .prt.VehicleStatus v_statuses = 2;
  total_size += 1 * this->v_statuses_size();
  for (int i = 0; i < this->v_statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->v_statuses(i));
  }
  
  // repeated .prt.StationStatus s_statuses = 3;
  total_size += 1 * this->s_statuses_size();
  for (int i = 0; i < this->s_statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->s_statuses(i));
  }
  
  // repeated .prt.PassengerStatus p_statuses = 4;
  total_size += 1 * this->p_statuses_size();
  for (int i = 0; i < this->p_statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->p_statuses(i));
  }
  
  // repeated .prt.SwitchStatus sw_statuses = 5;
  total_size += 1 * this->sw_statuses_size();
  for (int i = 0; i < this->sw_statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sw_statuses(i));
  }
  
  // repeated .prt.TrackSegmentStatus ts_statuses = 6;
  total_size += 1 * this->ts_statuses_size();
  for (int i = 0; i < this->ts_statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ts_statuses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimResponseTotalStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimResponseTotalStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimResponseTotalStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimResponseTotalStatus::MergeFrom(const SimResponseTotalStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  v_statuses_.MergeFrom(from.v_statuses_);
  s_statuses_.MergeFrom(from.s_statuses_);
  p_statuses_.MergeFrom(from.p_statuses_);
  sw_statuses_.MergeFrom(from.sw_statuses_);
  ts_statuses_.MergeFrom(from.ts_statuses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimResponseTotalStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimResponseTotalStatus::CopyFrom(const SimResponseTotalStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimResponseTotalStatus::IsInitialized() const {
  
  for (int i = 0; i < v_statuses_size(); i++) {
    if (!this->v_statuses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < s_statuses_size(); i++) {
    if (!this->s_statuses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < p_statuses_size(); i++) {
    if (!this->p_statuses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sw_statuses_size(); i++) {
    if (!this->sw_statuses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ts_statuses_size(); i++) {
    if (!this->ts_statuses(i).IsInitialized()) return false;
  }
  return true;
}

void SimResponseTotalStatus::Swap(SimResponseTotalStatus* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    v_statuses_.Swap(&other->v_statuses_);
    s_statuses_.Swap(&other->s_statuses_);
    p_statuses_.Swap(&other->p_statuses_);
    sw_statuses_.Swap(&other->sw_statuses_);
    ts_statuses_.Swap(&other->ts_statuses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimResponseTotalStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimResponseTotalStatus_descriptor_;
  metadata.reflection = SimResponseTotalStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimRequestSwitchCmd::kSwIDFieldNumber;
const int SimRequestSwitchCmd::kVIDFieldNumber;
const int SimRequestSwitchCmd::kTs1IDFieldNumber;
const int SimRequestSwitchCmd::kTs2IDFieldNumber;
#endif  // !_MSC_VER

SimRequestSwitchCmd::SimRequestSwitchCmd() {
  SharedCtor();
}

void SimRequestSwitchCmd::InitAsDefaultInstance() {
}

SimRequestSwitchCmd::SimRequestSwitchCmd(const SimRequestSwitchCmd& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimRequestSwitchCmd::SharedCtor() {
  _cached_size_ = 0;
  swid_ = 0;
  vid_ = 0;
  ts1id_ = 0;
  ts2id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimRequestSwitchCmd::~SimRequestSwitchCmd() {
  SharedDtor();
}

void SimRequestSwitchCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimRequestSwitchCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimRequestSwitchCmd_descriptor_;
}

const SimRequestSwitchCmd& SimRequestSwitchCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimRequestSwitchCmd* SimRequestSwitchCmd::default_instance_ = NULL;

SimRequestSwitchCmd* SimRequestSwitchCmd::New() const {
  return new SimRequestSwitchCmd;
}

void SimRequestSwitchCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    swid_ = 0;
    vid_ = 0;
    ts1id_ = 0;
    ts2id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimRequestSwitchCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 swID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &swid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ts1ID;
        break;
      }
      
      // required int32 ts1ID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ts1ID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ts1id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ts2ID;
        break;
      }
      
      // required int32 ts2ID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ts2ID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ts2id_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimRequestSwitchCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimRequestSwitchCmd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 swID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->swid(), output);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  // required int32 ts1ID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ts1id(), output);
  }
  
  // required int32 ts2ID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ts2id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimRequestSwitchCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 swID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->swid(), target);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  // required int32 ts1ID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ts1id(), target);
  }
  
  // required int32 ts2ID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ts2id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimRequestSwitchCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 swID = 1;
    if (has_swid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swid());
    }
    
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 ts1ID = 3;
    if (has_ts1id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts1id());
    }
    
    // required int32 ts2ID = 4;
    if (has_ts2id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts2id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimRequestSwitchCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimRequestSwitchCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimRequestSwitchCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimRequestSwitchCmd::MergeFrom(const SimRequestSwitchCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swid(from.swid());
    }
    if (from._has_bit(1)) {
      set_vid(from.vid());
    }
    if (from._has_bit(2)) {
      set_ts1id(from.ts1id());
    }
    if (from._has_bit(3)) {
      set_ts2id(from.ts2id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimRequestSwitchCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimRequestSwitchCmd::CopyFrom(const SimRequestSwitchCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimRequestSwitchCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SimRequestSwitchCmd::Swap(SimRequestSwitchCmd* other) {
  if (other != this) {
    std::swap(swid_, other->swid_);
    std::swap(vid_, other->vid_);
    std::swap(ts1id_, other->ts1id_);
    std::swap(ts2id_, other->ts2id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimRequestSwitchCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimRequestSwitchCmd_descriptor_;
  metadata.reflection = SimRequestSwitchCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyVehiclePosition::kMsgIDFieldNumber;
const int SimNotifyVehiclePosition::kVIDFieldNumber;
const int SimNotifyVehiclePosition::kTsIDFieldNumber;
const int SimNotifyVehiclePosition::kPosFieldNumber;
#endif  // !_MSC_VER

SimNotifyVehiclePosition::SimNotifyVehiclePosition() {
  SharedCtor();
}

void SimNotifyVehiclePosition::InitAsDefaultInstance() {
}

SimNotifyVehiclePosition::SimNotifyVehiclePosition(const SimNotifyVehiclePosition& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyVehiclePosition::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  vid_ = 0;
  tsid_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyVehiclePosition::~SimNotifyVehiclePosition() {
  SharedDtor();
}

void SimNotifyVehiclePosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyVehiclePosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyVehiclePosition_descriptor_;
}

const SimNotifyVehiclePosition& SimNotifyVehiclePosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyVehiclePosition* SimNotifyVehiclePosition::default_instance_ = NULL;

SimNotifyVehiclePosition* SimNotifyVehiclePosition::New() const {
  return new SimNotifyVehiclePosition;
}

void SimNotifyVehiclePosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    vid_ = 0;
    tsid_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyVehiclePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_tsID;
        break;
      }
      
      // required int32 tsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tsID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }
      
      // required int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pos_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyVehiclePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyVehiclePosition::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  // required int32 tsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tsid(), output);
  }
  
  // required int32 pos = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyVehiclePosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  // required int32 tsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tsid(), target);
  }
  
  // required int32 pos = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyVehiclePosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 tsID = 3;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
    // required int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyVehiclePosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyVehiclePosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyVehiclePosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyVehiclePosition::MergeFrom(const SimNotifyVehiclePosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_vid(from.vid());
    }
    if (from._has_bit(2)) {
      set_tsid(from.tsid());
    }
    if (from._has_bit(3)) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyVehiclePosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyVehiclePosition::CopyFrom(const SimNotifyVehiclePosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyVehiclePosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void SimNotifyVehiclePosition::Swap(SimNotifyVehiclePosition* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(vid_, other->vid_);
    std::swap(tsid_, other->tsid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyVehiclePosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyVehiclePosition_descriptor_;
  metadata.reflection = SimNotifyVehiclePosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyTime::kMsgIDFieldNumber;
const int SimNotifyTime::kTimeFieldNumber;
#endif  // !_MSC_VER

SimNotifyTime::SimNotifyTime() {
  SharedCtor();
}

void SimNotifyTime::InitAsDefaultInstance() {
}

SimNotifyTime::SimNotifyTime(const SimNotifyTime& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyTime::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyTime::~SimNotifyTime() {
  SharedDtor();
}

void SimNotifyTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyTime_descriptor_;
}

const SimNotifyTime& SimNotifyTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyTime* SimNotifyTime::default_instance_ = NULL;

SimNotifyTime* SimNotifyTime::New() const {
  return new SimNotifyTime;
}

void SimNotifyTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyTime::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyTime::MergeFrom(const SimNotifyTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyTime::CopyFrom(const SimNotifyTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void SimNotifyTime::Swap(SimNotifyTime* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyTime_descriptor_;
  metadata.reflection = SimNotifyTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyVehicleArrive::kVStatusFieldNumber;
#endif  // !_MSC_VER

SimNotifyVehicleArrive::SimNotifyVehicleArrive() {
  SharedCtor();
}

void SimNotifyVehicleArrive::InitAsDefaultInstance() {
  v_status_ = const_cast< ::prt::VehicleStatus*>(&::prt::VehicleStatus::default_instance());
}

SimNotifyVehicleArrive::SimNotifyVehicleArrive(const SimNotifyVehicleArrive& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyVehicleArrive::SharedCtor() {
  _cached_size_ = 0;
  v_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyVehicleArrive::~SimNotifyVehicleArrive() {
  SharedDtor();
}

void SimNotifyVehicleArrive::SharedDtor() {
  if (this != default_instance_) {
    delete v_status_;
  }
}

const ::google::protobuf::Descriptor* SimNotifyVehicleArrive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyVehicleArrive_descriptor_;
}

const SimNotifyVehicleArrive& SimNotifyVehicleArrive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyVehicleArrive* SimNotifyVehicleArrive::default_instance_ = NULL;

SimNotifyVehicleArrive* SimNotifyVehicleArrive::New() const {
  return new SimNotifyVehicleArrive;
}

void SimNotifyVehicleArrive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyVehicleArrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .prt.VehicleStatus v_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_v_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyVehicleArrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyVehicleArrive::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .prt.VehicleStatus v_status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->v_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyVehicleArrive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .prt.VehicleStatus v_status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->v_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyVehicleArrive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .prt.VehicleStatus v_status = 1;
    if (has_v_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyVehicleArrive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyVehicleArrive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyVehicleArrive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyVehicleArrive::MergeFrom(const SimNotifyVehicleArrive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_v_status()->::prt::VehicleStatus::MergeFrom(from.v_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyVehicleArrive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyVehicleArrive::CopyFrom(const SimNotifyVehicleArrive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyVehicleArrive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_v_status()) {
    if (!this->v_status().IsInitialized()) return false;
  }
  return true;
}

void SimNotifyVehicleArrive::Swap(SimNotifyVehicleArrive* other) {
  if (other != this) {
    std::swap(v_status_, other->v_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyVehicleArrive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyVehicleArrive_descriptor_;
  metadata.reflection = SimNotifyVehicleArrive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyVehicleExit::kVStatusFieldNumber;
#endif  // !_MSC_VER

SimNotifyVehicleExit::SimNotifyVehicleExit() {
  SharedCtor();
}

void SimNotifyVehicleExit::InitAsDefaultInstance() {
  v_status_ = const_cast< ::prt::VehicleStatus*>(&::prt::VehicleStatus::default_instance());
}

SimNotifyVehicleExit::SimNotifyVehicleExit(const SimNotifyVehicleExit& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyVehicleExit::SharedCtor() {
  _cached_size_ = 0;
  v_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyVehicleExit::~SimNotifyVehicleExit() {
  SharedDtor();
}

void SimNotifyVehicleExit::SharedDtor() {
  if (this != default_instance_) {
    delete v_status_;
  }
}

const ::google::protobuf::Descriptor* SimNotifyVehicleExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyVehicleExit_descriptor_;
}

const SimNotifyVehicleExit& SimNotifyVehicleExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyVehicleExit* SimNotifyVehicleExit::default_instance_ = NULL;

SimNotifyVehicleExit* SimNotifyVehicleExit::New() const {
  return new SimNotifyVehicleExit;
}

void SimNotifyVehicleExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (v_status_ != NULL) v_status_->::prt::VehicleStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyVehicleExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .prt.VehicleStatus v_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_v_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyVehicleExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyVehicleExit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .prt.VehicleStatus v_status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->v_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyVehicleExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .prt.VehicleStatus v_status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->v_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyVehicleExit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .prt.VehicleStatus v_status = 1;
    if (has_v_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyVehicleExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyVehicleExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyVehicleExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyVehicleExit::MergeFrom(const SimNotifyVehicleExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_v_status()->::prt::VehicleStatus::MergeFrom(from.v_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyVehicleExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyVehicleExit::CopyFrom(const SimNotifyVehicleExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyVehicleExit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_v_status()) {
    if (!this->v_status().IsInitialized()) return false;
  }
  return true;
}

void SimNotifyVehicleExit::Swap(SimNotifyVehicleExit* other) {
  if (other != this) {
    std::swap(v_status_, other->v_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyVehicleExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyVehicleExit_descriptor_;
  metadata.reflection = SimNotifyVehicleExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyVehicleReadyLoad::kVIDFieldNumber;
const int SimNotifyVehicleReadyLoad::kSIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyVehicleReadyLoad::SimNotifyVehicleReadyLoad() {
  SharedCtor();
}

void SimNotifyVehicleReadyLoad::InitAsDefaultInstance() {
}

SimNotifyVehicleReadyLoad::SimNotifyVehicleReadyLoad(const SimNotifyVehicleReadyLoad& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyVehicleReadyLoad::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyVehicleReadyLoad::~SimNotifyVehicleReadyLoad() {
  SharedDtor();
}

void SimNotifyVehicleReadyLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyVehicleReadyLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyVehicleReadyLoad_descriptor_;
}

const SimNotifyVehicleReadyLoad& SimNotifyVehicleReadyLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyVehicleReadyLoad* SimNotifyVehicleReadyLoad::default_instance_ = NULL;

SimNotifyVehicleReadyLoad* SimNotifyVehicleReadyLoad::New() const {
  return new SimNotifyVehicleReadyLoad;
}

void SimNotifyVehicleReadyLoad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyVehicleReadyLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyVehicleReadyLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyVehicleReadyLoad::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyVehicleReadyLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyVehicleReadyLoad::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyVehicleReadyLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyVehicleReadyLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyVehicleReadyLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyVehicleReadyLoad::MergeFrom(const SimNotifyVehicleReadyLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyVehicleReadyLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyVehicleReadyLoad::CopyFrom(const SimNotifyVehicleReadyLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyVehicleReadyLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimNotifyVehicleReadyLoad::Swap(SimNotifyVehicleReadyLoad* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyVehicleReadyLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyVehicleReadyLoad_descriptor_;
  metadata.reflection = SimNotifyVehicleReadyLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyVehicleCollision::kV1IDFieldNumber;
const int SimNotifyVehicleCollision::kV2IDFieldNumber;
const int SimNotifyVehicleCollision::kLocTypeFieldNumber;
const int SimNotifyVehicleCollision::kLocIDFieldNumber;
const int SimNotifyVehicleCollision::kPosFieldNumber;
const int SimNotifyVehicleCollision::kDeltaVFieldNumber;
const int SimNotifyVehicleCollision::kRearendFieldNumber;
const int SimNotifyVehicleCollision::kSideswipeFieldNumber;
#endif  // !_MSC_VER

SimNotifyVehicleCollision::SimNotifyVehicleCollision() {
  SharedCtor();
}

void SimNotifyVehicleCollision::InitAsDefaultInstance() {
}

SimNotifyVehicleCollision::SimNotifyVehicleCollision(const SimNotifyVehicleCollision& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyVehicleCollision::SharedCtor() {
  _cached_size_ = 0;
  v1id_ = 0;
  v2id_ = 0;
  loc_type_ = 0;
  locid_ = 0;
  pos_ = 0;
  delta_v_ = 0;
  rearend_ = false;
  sideswipe_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyVehicleCollision::~SimNotifyVehicleCollision() {
  SharedDtor();
}

void SimNotifyVehicleCollision::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyVehicleCollision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyVehicleCollision_descriptor_;
}

const SimNotifyVehicleCollision& SimNotifyVehicleCollision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyVehicleCollision* SimNotifyVehicleCollision::default_instance_ = NULL;

SimNotifyVehicleCollision* SimNotifyVehicleCollision::New() const {
  return new SimNotifyVehicleCollision;
}

void SimNotifyVehicleCollision::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v1id_ = 0;
    v2id_ = 0;
    loc_type_ = 0;
    locid_ = 0;
    pos_ = 0;
    delta_v_ = 0;
    rearend_ = false;
    sideswipe_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyVehicleCollision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 v1ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &v1id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_v2ID;
        break;
      }
      
      // required int32 v2ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v2ID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &v2id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_loc_type;
        break;
      }
      
      // required .prt.LocationType loc_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_loc_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (prt::LocationType_IsValid(value)) {
          set_loc_type(static_cast< prt::LocationType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(32)) goto parse_locID;
        break;
      }
      
      // required int32 locID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_locID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &locid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }
      
      // required int32 pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pos_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_delta_v;
        break;
      }
      
      // required int32 delta_v = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_delta_v:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &delta_v_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_rearend;
        break;
      }
      
      // optional bool rearend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rearend:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &rearend_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_sideswipe;
        break;
      }
      
      // optional bool sideswipe = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sideswipe:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &sideswipe_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyVehicleCollision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyVehicleCollision::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 v1ID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v1id(), output);
  }
  
  // required int32 v2ID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v2id(), output);
  }
  
  // required .prt.LocationType loc_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->loc_type(), output);
  }
  
  // required int32 locID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->locid(), output);
  }
  
  // required int32 pos = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos(), output);
  }
  
  // required int32 delta_v = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delta_v(), output);
  }
  
  // optional bool rearend = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rearend(), output);
  }
  
  // optional bool sideswipe = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sideswipe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyVehicleCollision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 v1ID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v1id(), target);
  }
  
  // required int32 v2ID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v2id(), target);
  }
  
  // required .prt.LocationType loc_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->loc_type(), target);
  }
  
  // required int32 locID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->locid(), target);
  }
  
  // required int32 pos = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos(), target);
  }
  
  // required int32 delta_v = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delta_v(), target);
  }
  
  // optional bool rearend = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->rearend(), target);
  }
  
  // optional bool sideswipe = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->sideswipe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyVehicleCollision::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 v1ID = 1;
    if (has_v1id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v1id());
    }
    
    // required int32 v2ID = 2;
    if (has_v2id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v2id());
    }
    
    // required .prt.LocationType loc_type = 3;
    if (has_loc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loc_type());
    }
    
    // required int32 locID = 4;
    if (has_locid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locid());
    }
    
    // required int32 pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // required int32 delta_v = 6;
    if (has_delta_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_v());
    }
    
    // optional bool rearend = 7;
    if (has_rearend()) {
      total_size += 1 + 1;
    }
    
    // optional bool sideswipe = 8;
    if (has_sideswipe()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyVehicleCollision::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyVehicleCollision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyVehicleCollision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyVehicleCollision::MergeFrom(const SimNotifyVehicleCollision& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_v1id(from.v1id());
    }
    if (from._has_bit(1)) {
      set_v2id(from.v2id());
    }
    if (from._has_bit(2)) {
      set_loc_type(from.loc_type());
    }
    if (from._has_bit(3)) {
      set_locid(from.locid());
    }
    if (from._has_bit(4)) {
      set_pos(from.pos());
    }
    if (from._has_bit(5)) {
      set_delta_v(from.delta_v());
    }
    if (from._has_bit(6)) {
      set_rearend(from.rearend());
    }
    if (from._has_bit(7)) {
      set_sideswipe(from.sideswipe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyVehicleCollision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyVehicleCollision::CopyFrom(const SimNotifyVehicleCollision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyVehicleCollision::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SimNotifyVehicleCollision::Swap(SimNotifyVehicleCollision* other) {
  if (other != this) {
    std::swap(v1id_, other->v1id_);
    std::swap(v2id_, other->v2id_);
    std::swap(loc_type_, other->loc_type_);
    std::swap(locid_, other->locid_);
    std::swap(pos_, other->pos_);
    std::swap(delta_v_, other->delta_v_);
    std::swap(rearend_, other->rearend_);
    std::swap(sideswipe_, other->sideswipe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyVehicleCollision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyVehicleCollision_descriptor_;
  metadata.reflection = SimNotifyVehicleCollision_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyPassengerLoadStart::kVIDFieldNumber;
const int SimNotifyPassengerLoadStart::kSIDFieldNumber;
const int SimNotifyPassengerLoadStart::kPIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyPassengerLoadStart::SimNotifyPassengerLoadStart() {
  SharedCtor();
}

void SimNotifyPassengerLoadStart::InitAsDefaultInstance() {
}

SimNotifyPassengerLoadStart::SimNotifyPassengerLoadStart(const SimNotifyPassengerLoadStart& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyPassengerLoadStart::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyPassengerLoadStart::~SimNotifyPassengerLoadStart() {
  SharedDtor();
}

void SimNotifyPassengerLoadStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyPassengerLoadStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyPassengerLoadStart_descriptor_;
}

const SimNotifyPassengerLoadStart& SimNotifyPassengerLoadStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyPassengerLoadStart* SimNotifyPassengerLoadStart::default_instance_ = NULL;

SimNotifyPassengerLoadStart* SimNotifyPassengerLoadStart::New() const {
  return new SimNotifyPassengerLoadStart;
}

void SimNotifyPassengerLoadStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyPassengerLoadStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pID;
        break;
      }
      
      // required int32 pID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyPassengerLoadStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyPassengerLoadStart::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyPassengerLoadStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyPassengerLoadStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 pID = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyPassengerLoadStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyPassengerLoadStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyPassengerLoadStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyPassengerLoadStart::MergeFrom(const SimNotifyPassengerLoadStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyPassengerLoadStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyPassengerLoadStart::CopyFrom(const SimNotifyPassengerLoadStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyPassengerLoadStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimNotifyPassengerLoadStart::Swap(SimNotifyPassengerLoadStart* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyPassengerLoadStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyPassengerLoadStart_descriptor_;
  metadata.reflection = SimNotifyPassengerLoadStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyPassengerLoadEnd::kVIDFieldNumber;
const int SimNotifyPassengerLoadEnd::kSIDFieldNumber;
const int SimNotifyPassengerLoadEnd::kPIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyPassengerLoadEnd::SimNotifyPassengerLoadEnd() {
  SharedCtor();
}

void SimNotifyPassengerLoadEnd::InitAsDefaultInstance() {
}

SimNotifyPassengerLoadEnd::SimNotifyPassengerLoadEnd(const SimNotifyPassengerLoadEnd& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyPassengerLoadEnd::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyPassengerLoadEnd::~SimNotifyPassengerLoadEnd() {
  SharedDtor();
}

void SimNotifyPassengerLoadEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyPassengerLoadEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyPassengerLoadEnd_descriptor_;
}

const SimNotifyPassengerLoadEnd& SimNotifyPassengerLoadEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyPassengerLoadEnd* SimNotifyPassengerLoadEnd::default_instance_ = NULL;

SimNotifyPassengerLoadEnd* SimNotifyPassengerLoadEnd::New() const {
  return new SimNotifyPassengerLoadEnd;
}

void SimNotifyPassengerLoadEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyPassengerLoadEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pID;
        break;
      }
      
      // required int32 pID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyPassengerLoadEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyPassengerLoadEnd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyPassengerLoadEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyPassengerLoadEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 pID = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyPassengerLoadEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyPassengerLoadEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyPassengerLoadEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyPassengerLoadEnd::MergeFrom(const SimNotifyPassengerLoadEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyPassengerLoadEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyPassengerLoadEnd::CopyFrom(const SimNotifyPassengerLoadEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyPassengerLoadEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimNotifyPassengerLoadEnd::Swap(SimNotifyPassengerLoadEnd* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyPassengerLoadEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyPassengerLoadEnd_descriptor_;
  metadata.reflection = SimNotifyPassengerLoadEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyPassengerUnloadStart::kVIDFieldNumber;
const int SimNotifyPassengerUnloadStart::kSIDFieldNumber;
const int SimNotifyPassengerUnloadStart::kPIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyPassengerUnloadStart::SimNotifyPassengerUnloadStart() {
  SharedCtor();
}

void SimNotifyPassengerUnloadStart::InitAsDefaultInstance() {
}

SimNotifyPassengerUnloadStart::SimNotifyPassengerUnloadStart(const SimNotifyPassengerUnloadStart& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyPassengerUnloadStart::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyPassengerUnloadStart::~SimNotifyPassengerUnloadStart() {
  SharedDtor();
}

void SimNotifyPassengerUnloadStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyPassengerUnloadStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyPassengerUnloadStart_descriptor_;
}

const SimNotifyPassengerUnloadStart& SimNotifyPassengerUnloadStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyPassengerUnloadStart* SimNotifyPassengerUnloadStart::default_instance_ = NULL;

SimNotifyPassengerUnloadStart* SimNotifyPassengerUnloadStart::New() const {
  return new SimNotifyPassengerUnloadStart;
}

void SimNotifyPassengerUnloadStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyPassengerUnloadStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pID;
        break;
      }
      
      // required int32 pID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyPassengerUnloadStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyPassengerUnloadStart::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyPassengerUnloadStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyPassengerUnloadStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 pID = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyPassengerUnloadStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyPassengerUnloadStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyPassengerUnloadStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyPassengerUnloadStart::MergeFrom(const SimNotifyPassengerUnloadStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyPassengerUnloadStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyPassengerUnloadStart::CopyFrom(const SimNotifyPassengerUnloadStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyPassengerUnloadStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimNotifyPassengerUnloadStart::Swap(SimNotifyPassengerUnloadStart* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyPassengerUnloadStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyPassengerUnloadStart_descriptor_;
  metadata.reflection = SimNotifyPassengerUnloadStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyPassengerUnloadEnd::kVIDFieldNumber;
const int SimNotifyPassengerUnloadEnd::kSIDFieldNumber;
const int SimNotifyPassengerUnloadEnd::kPIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyPassengerUnloadEnd::SimNotifyPassengerUnloadEnd() {
  SharedCtor();
}

void SimNotifyPassengerUnloadEnd::InitAsDefaultInstance() {
}

SimNotifyPassengerUnloadEnd::SimNotifyPassengerUnloadEnd(const SimNotifyPassengerUnloadEnd& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyPassengerUnloadEnd::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyPassengerUnloadEnd::~SimNotifyPassengerUnloadEnd() {
  SharedDtor();
}

void SimNotifyPassengerUnloadEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyPassengerUnloadEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyPassengerUnloadEnd_descriptor_;
}

const SimNotifyPassengerUnloadEnd& SimNotifyPassengerUnloadEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyPassengerUnloadEnd* SimNotifyPassengerUnloadEnd::default_instance_ = NULL;

SimNotifyPassengerUnloadEnd* SimNotifyPassengerUnloadEnd::New() const {
  return new SimNotifyPassengerUnloadEnd;
}

void SimNotifyPassengerUnloadEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyPassengerUnloadEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pID;
        break;
      }
      
      // required int32 pID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyPassengerUnloadEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyPassengerUnloadEnd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyPassengerUnloadEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyPassengerUnloadEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 pID = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyPassengerUnloadEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyPassengerUnloadEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyPassengerUnloadEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyPassengerUnloadEnd::MergeFrom(const SimNotifyPassengerUnloadEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyPassengerUnloadEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyPassengerUnloadEnd::CopyFrom(const SimNotifyPassengerUnloadEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyPassengerUnloadEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimNotifyPassengerUnloadEnd::Swap(SimNotifyPassengerUnloadEnd* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyPassengerUnloadEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyPassengerUnloadEnd_descriptor_;
  metadata.reflection = SimNotifyPassengerUnloadEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyPassengerDelivered::kVIDFieldNumber;
const int SimNotifyPassengerDelivered::kSIDFieldNumber;
const int SimNotifyPassengerDelivered::kPIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyPassengerDelivered::SimNotifyPassengerDelivered() {
  SharedCtor();
}

void SimNotifyPassengerDelivered::InitAsDefaultInstance() {
}

SimNotifyPassengerDelivered::SimNotifyPassengerDelivered(const SimNotifyPassengerDelivered& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyPassengerDelivered::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyPassengerDelivered::~SimNotifyPassengerDelivered() {
  SharedDtor();
}

void SimNotifyPassengerDelivered::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyPassengerDelivered::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyPassengerDelivered_descriptor_;
}

const SimNotifyPassengerDelivered& SimNotifyPassengerDelivered::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyPassengerDelivered* SimNotifyPassengerDelivered::default_instance_ = NULL;

SimNotifyPassengerDelivered* SimNotifyPassengerDelivered::New() const {
  return new SimNotifyPassengerDelivered;
}

void SimNotifyPassengerDelivered::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyPassengerDelivered::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pID;
        break;
      }
      
      // required int32 pID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyPassengerDelivered::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyPassengerDelivered::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyPassengerDelivered::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyPassengerDelivered::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 pID = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyPassengerDelivered::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyPassengerDelivered* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyPassengerDelivered*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyPassengerDelivered::MergeFrom(const SimNotifyPassengerDelivered& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyPassengerDelivered::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyPassengerDelivered::CopyFrom(const SimNotifyPassengerDelivered& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyPassengerDelivered::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimNotifyPassengerDelivered::Swap(SimNotifyPassengerDelivered* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyPassengerDelivered::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyPassengerDelivered_descriptor_;
  metadata.reflection = SimNotifyPassengerDelivered_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyPassengerMisdelivered::kVIDFieldNumber;
const int SimNotifyPassengerMisdelivered::kSIDFieldNumber;
const int SimNotifyPassengerMisdelivered::kPIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyPassengerMisdelivered::SimNotifyPassengerMisdelivered() {
  SharedCtor();
}

void SimNotifyPassengerMisdelivered::InitAsDefaultInstance() {
}

SimNotifyPassengerMisdelivered::SimNotifyPassengerMisdelivered(const SimNotifyPassengerMisdelivered& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyPassengerMisdelivered::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyPassengerMisdelivered::~SimNotifyPassengerMisdelivered() {
  SharedDtor();
}

void SimNotifyPassengerMisdelivered::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyPassengerMisdelivered::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyPassengerMisdelivered_descriptor_;
}

const SimNotifyPassengerMisdelivered& SimNotifyPassengerMisdelivered::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyPassengerMisdelivered* SimNotifyPassengerMisdelivered::default_instance_ = NULL;

SimNotifyPassengerMisdelivered* SimNotifyPassengerMisdelivered::New() const {
  return new SimNotifyPassengerMisdelivered;
}

void SimNotifyPassengerMisdelivered::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyPassengerMisdelivered::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pID;
        break;
      }
      
      // required int32 pID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyPassengerMisdelivered::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyPassengerMisdelivered::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyPassengerMisdelivered::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // required int32 pID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyPassengerMisdelivered::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 pID = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyPassengerMisdelivered::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyPassengerMisdelivered* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyPassengerMisdelivered*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyPassengerMisdelivered::MergeFrom(const SimNotifyPassengerMisdelivered& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
    if (from._has_bit(2)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyPassengerMisdelivered::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyPassengerMisdelivered::CopyFrom(const SimNotifyPassengerMisdelivered& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyPassengerMisdelivered::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimNotifyPassengerMisdelivered::Swap(SimNotifyPassengerMisdelivered* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyPassengerMisdelivered::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyPassengerMisdelivered_descriptor_;
  metadata.reflection = SimNotifyPassengerMisdelivered_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyStationReadyLaunch::kVIDFieldNumber;
const int SimNotifyStationReadyLaunch::kSIDFieldNumber;
const int SimNotifyStationReadyLaunch::kPIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyStationReadyLaunch::SimNotifyStationReadyLaunch() {
  SharedCtor();
}

void SimNotifyStationReadyLaunch::InitAsDefaultInstance() {
}

SimNotifyStationReadyLaunch::SimNotifyStationReadyLaunch(const SimNotifyStationReadyLaunch& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyStationReadyLaunch::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyStationReadyLaunch::~SimNotifyStationReadyLaunch() {
  SharedDtor();
}

void SimNotifyStationReadyLaunch::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyStationReadyLaunch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyStationReadyLaunch_descriptor_;
}

const SimNotifyStationReadyLaunch& SimNotifyStationReadyLaunch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyStationReadyLaunch* SimNotifyStationReadyLaunch::default_instance_ = NULL;

SimNotifyStationReadyLaunch* SimNotifyStationReadyLaunch::New() const {
  return new SimNotifyStationReadyLaunch;
}

void SimNotifyStationReadyLaunch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
  }
  pid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyStationReadyLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_pID;
        break;
      }
      
      // repeated int32 pID = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pID:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_pid(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyStationReadyLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyStationReadyLaunch::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  // repeated int32 pID = 3 [packed = true];
  if (this->pid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pid_cached_byte_size_);
  }
  for (int i = 0; i < this->pid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyStationReadyLaunch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  // repeated int32 pID = 3 [packed = true];
  if (this->pid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyStationReadyLaunch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  // repeated int32 pID = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->pid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _pid_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyStationReadyLaunch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyStationReadyLaunch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyStationReadyLaunch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyStationReadyLaunch::MergeFrom(const SimNotifyStationReadyLaunch& from) {
  GOOGLE_CHECK_NE(&from, this);
  pid_.MergeFrom(from.pid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyStationReadyLaunch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyStationReadyLaunch::CopyFrom(const SimNotifyStationReadyLaunch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyStationReadyLaunch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimNotifyStationReadyLaunch::Swap(SimNotifyStationReadyLaunch* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    pid_.Swap(&other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyStationReadyLaunch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyStationReadyLaunch_descriptor_;
  metadata.reflection = SimNotifyStationReadyLaunch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNotifyStationUnreadyLaunch::kVIDFieldNumber;
const int SimNotifyStationUnreadyLaunch::kSIDFieldNumber;
#endif  // !_MSC_VER

SimNotifyStationUnreadyLaunch::SimNotifyStationUnreadyLaunch() {
  SharedCtor();
}

void SimNotifyStationUnreadyLaunch::InitAsDefaultInstance() {
}

SimNotifyStationUnreadyLaunch::SimNotifyStationUnreadyLaunch(const SimNotifyStationUnreadyLaunch& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimNotifyStationUnreadyLaunch::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNotifyStationUnreadyLaunch::~SimNotifyStationUnreadyLaunch() {
  SharedDtor();
}

void SimNotifyStationUnreadyLaunch::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimNotifyStationUnreadyLaunch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNotifyStationUnreadyLaunch_descriptor_;
}

const SimNotifyStationUnreadyLaunch& SimNotifyStationUnreadyLaunch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimNotifyStationUnreadyLaunch* SimNotifyStationUnreadyLaunch::default_instance_ = NULL;

SimNotifyStationUnreadyLaunch* SimNotifyStationUnreadyLaunch::New() const {
  return new SimNotifyStationUnreadyLaunch;
}

void SimNotifyStationUnreadyLaunch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNotifyStationUnreadyLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_sID;
        break;
      }
      
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNotifyStationUnreadyLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimNotifyStationUnreadyLaunch::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNotifyStationUnreadyLaunch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 sID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNotifyStationUnreadyLaunch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimNotifyStationUnreadyLaunch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNotifyStationUnreadyLaunch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNotifyStationUnreadyLaunch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNotifyStationUnreadyLaunch::MergeFrom(const SimNotifyStationUnreadyLaunch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNotifyStationUnreadyLaunch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNotifyStationUnreadyLaunch::CopyFrom(const SimNotifyStationUnreadyLaunch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNotifyStationUnreadyLaunch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimNotifyStationUnreadyLaunch::Swap(SimNotifyStationUnreadyLaunch* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNotifyStationUnreadyLaunch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNotifyStationUnreadyLaunch_descriptor_;
  metadata.reflection = SimNotifyStationUnreadyLaunch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventTrackSegmentDisabled::kTsIDFieldNumber;
#endif  // !_MSC_VER

SimEventTrackSegmentDisabled::SimEventTrackSegmentDisabled() {
  SharedCtor();
}

void SimEventTrackSegmentDisabled::InitAsDefaultInstance() {
}

SimEventTrackSegmentDisabled::SimEventTrackSegmentDisabled(const SimEventTrackSegmentDisabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventTrackSegmentDisabled::SharedCtor() {
  _cached_size_ = 0;
  tsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventTrackSegmentDisabled::~SimEventTrackSegmentDisabled() {
  SharedDtor();
}

void SimEventTrackSegmentDisabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventTrackSegmentDisabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventTrackSegmentDisabled_descriptor_;
}

const SimEventTrackSegmentDisabled& SimEventTrackSegmentDisabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventTrackSegmentDisabled* SimEventTrackSegmentDisabled::default_instance_ = NULL;

SimEventTrackSegmentDisabled* SimEventTrackSegmentDisabled::New() const {
  return new SimEventTrackSegmentDisabled;
}

void SimEventTrackSegmentDisabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventTrackSegmentDisabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventTrackSegmentDisabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventTrackSegmentDisabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 tsID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventTrackSegmentDisabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tsID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventTrackSegmentDisabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tsID = 2;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventTrackSegmentDisabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventTrackSegmentDisabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventTrackSegmentDisabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventTrackSegmentDisabled::MergeFrom(const SimEventTrackSegmentDisabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tsid(from.tsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventTrackSegmentDisabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventTrackSegmentDisabled::CopyFrom(const SimEventTrackSegmentDisabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventTrackSegmentDisabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventTrackSegmentDisabled::Swap(SimEventTrackSegmentDisabled* other) {
  if (other != this) {
    std::swap(tsid_, other->tsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventTrackSegmentDisabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventTrackSegmentDisabled_descriptor_;
  metadata.reflection = SimEventTrackSegmentDisabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventTrackSegmentReenabled::kTsIDFieldNumber;
#endif  // !_MSC_VER

SimEventTrackSegmentReenabled::SimEventTrackSegmentReenabled() {
  SharedCtor();
}

void SimEventTrackSegmentReenabled::InitAsDefaultInstance() {
}

SimEventTrackSegmentReenabled::SimEventTrackSegmentReenabled(const SimEventTrackSegmentReenabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventTrackSegmentReenabled::SharedCtor() {
  _cached_size_ = 0;
  tsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventTrackSegmentReenabled::~SimEventTrackSegmentReenabled() {
  SharedDtor();
}

void SimEventTrackSegmentReenabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventTrackSegmentReenabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventTrackSegmentReenabled_descriptor_;
}

const SimEventTrackSegmentReenabled& SimEventTrackSegmentReenabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventTrackSegmentReenabled* SimEventTrackSegmentReenabled::default_instance_ = NULL;

SimEventTrackSegmentReenabled* SimEventTrackSegmentReenabled::New() const {
  return new SimEventTrackSegmentReenabled;
}

void SimEventTrackSegmentReenabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventTrackSegmentReenabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventTrackSegmentReenabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventTrackSegmentReenabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 tsID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventTrackSegmentReenabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tsID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventTrackSegmentReenabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tsID = 2;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventTrackSegmentReenabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventTrackSegmentReenabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventTrackSegmentReenabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventTrackSegmentReenabled::MergeFrom(const SimEventTrackSegmentReenabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tsid(from.tsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventTrackSegmentReenabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventTrackSegmentReenabled::CopyFrom(const SimEventTrackSegmentReenabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventTrackSegmentReenabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventTrackSegmentReenabled::Swap(SimEventTrackSegmentReenabled* other) {
  if (other != this) {
    std::swap(tsid_, other->tsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventTrackSegmentReenabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventTrackSegmentReenabled_descriptor_;
  metadata.reflection = SimEventTrackSegmentReenabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventSwitchDisabled::kSwIDFieldNumber;
#endif  // !_MSC_VER

SimEventSwitchDisabled::SimEventSwitchDisabled() {
  SharedCtor();
}

void SimEventSwitchDisabled::InitAsDefaultInstance() {
}

SimEventSwitchDisabled::SimEventSwitchDisabled(const SimEventSwitchDisabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventSwitchDisabled::SharedCtor() {
  _cached_size_ = 0;
  swid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventSwitchDisabled::~SimEventSwitchDisabled() {
  SharedDtor();
}

void SimEventSwitchDisabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventSwitchDisabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventSwitchDisabled_descriptor_;
}

const SimEventSwitchDisabled& SimEventSwitchDisabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventSwitchDisabled* SimEventSwitchDisabled::default_instance_ = NULL;

SimEventSwitchDisabled* SimEventSwitchDisabled::New() const {
  return new SimEventSwitchDisabled;
}

void SimEventSwitchDisabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    swid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventSwitchDisabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 swID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &swid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventSwitchDisabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventSwitchDisabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 swID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->swid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventSwitchDisabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 swID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->swid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventSwitchDisabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 swID = 2;
    if (has_swid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventSwitchDisabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventSwitchDisabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventSwitchDisabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventSwitchDisabled::MergeFrom(const SimEventSwitchDisabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swid(from.swid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventSwitchDisabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventSwitchDisabled::CopyFrom(const SimEventSwitchDisabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventSwitchDisabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventSwitchDisabled::Swap(SimEventSwitchDisabled* other) {
  if (other != this) {
    std::swap(swid_, other->swid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventSwitchDisabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventSwitchDisabled_descriptor_;
  metadata.reflection = SimEventSwitchDisabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventSwitchReenabled::kSwIDFieldNumber;
#endif  // !_MSC_VER

SimEventSwitchReenabled::SimEventSwitchReenabled() {
  SharedCtor();
}

void SimEventSwitchReenabled::InitAsDefaultInstance() {
}

SimEventSwitchReenabled::SimEventSwitchReenabled(const SimEventSwitchReenabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventSwitchReenabled::SharedCtor() {
  _cached_size_ = 0;
  swid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventSwitchReenabled::~SimEventSwitchReenabled() {
  SharedDtor();
}

void SimEventSwitchReenabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventSwitchReenabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventSwitchReenabled_descriptor_;
}

const SimEventSwitchReenabled& SimEventSwitchReenabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventSwitchReenabled* SimEventSwitchReenabled::default_instance_ = NULL;

SimEventSwitchReenabled* SimEventSwitchReenabled::New() const {
  return new SimEventSwitchReenabled;
}

void SimEventSwitchReenabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    swid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventSwitchReenabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 swID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &swid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventSwitchReenabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventSwitchReenabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 swID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->swid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventSwitchReenabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 swID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->swid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventSwitchReenabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 swID = 2;
    if (has_swid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventSwitchReenabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventSwitchReenabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventSwitchReenabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventSwitchReenabled::MergeFrom(const SimEventSwitchReenabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swid(from.swid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventSwitchReenabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventSwitchReenabled::CopyFrom(const SimEventSwitchReenabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventSwitchReenabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventSwitchReenabled::Swap(SimEventSwitchReenabled* other) {
  if (other != this) {
    std::swap(swid_, other->swid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventSwitchReenabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventSwitchReenabled_descriptor_;
  metadata.reflection = SimEventSwitchReenabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventStationDisabled::kSIDFieldNumber;
#endif  // !_MSC_VER

SimEventStationDisabled::SimEventStationDisabled() {
  SharedCtor();
}

void SimEventStationDisabled::InitAsDefaultInstance() {
}

SimEventStationDisabled::SimEventStationDisabled(const SimEventStationDisabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventStationDisabled::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventStationDisabled::~SimEventStationDisabled() {
  SharedDtor();
}

void SimEventStationDisabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventStationDisabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventStationDisabled_descriptor_;
}

const SimEventStationDisabled& SimEventStationDisabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventStationDisabled* SimEventStationDisabled::default_instance_ = NULL;

SimEventStationDisabled* SimEventStationDisabled::New() const {
  return new SimEventStationDisabled;
}

void SimEventStationDisabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventStationDisabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventStationDisabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventStationDisabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventStationDisabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventStationDisabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventStationDisabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventStationDisabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventStationDisabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventStationDisabled::MergeFrom(const SimEventStationDisabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventStationDisabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventStationDisabled::CopyFrom(const SimEventStationDisabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventStationDisabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventStationDisabled::Swap(SimEventStationDisabled* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventStationDisabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventStationDisabled_descriptor_;
  metadata.reflection = SimEventStationDisabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventStationReenabled::kSIDFieldNumber;
#endif  // !_MSC_VER

SimEventStationReenabled::SimEventStationReenabled() {
  SharedCtor();
}

void SimEventStationReenabled::InitAsDefaultInstance() {
}

SimEventStationReenabled::SimEventStationReenabled(const SimEventStationReenabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventStationReenabled::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventStationReenabled::~SimEventStationReenabled() {
  SharedDtor();
}

void SimEventStationReenabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventStationReenabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventStationReenabled_descriptor_;
}

const SimEventStationReenabled& SimEventStationReenabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventStationReenabled* SimEventStationReenabled::default_instance_ = NULL;

SimEventStationReenabled* SimEventStationReenabled::New() const {
  return new SimEventStationReenabled;
}

void SimEventStationReenabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventStationReenabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventStationReenabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventStationReenabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventStationReenabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventStationReenabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventStationReenabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventStationReenabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventStationReenabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventStationReenabled::MergeFrom(const SimEventStationReenabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventStationReenabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventStationReenabled::CopyFrom(const SimEventStationReenabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventStationReenabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventStationReenabled::Swap(SimEventStationReenabled* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventStationReenabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventStationReenabled_descriptor_;
  metadata.reflection = SimEventStationReenabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventVehicleDisabled::kVIDFieldNumber;
#endif  // !_MSC_VER

SimEventVehicleDisabled::SimEventVehicleDisabled() {
  SharedCtor();
}

void SimEventVehicleDisabled::InitAsDefaultInstance() {
}

SimEventVehicleDisabled::SimEventVehicleDisabled(const SimEventVehicleDisabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventVehicleDisabled::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventVehicleDisabled::~SimEventVehicleDisabled() {
  SharedDtor();
}

void SimEventVehicleDisabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventVehicleDisabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventVehicleDisabled_descriptor_;
}

const SimEventVehicleDisabled& SimEventVehicleDisabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventVehicleDisabled* SimEventVehicleDisabled::default_instance_ = NULL;

SimEventVehicleDisabled* SimEventVehicleDisabled::New() const {
  return new SimEventVehicleDisabled;
}

void SimEventVehicleDisabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventVehicleDisabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventVehicleDisabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventVehicleDisabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventVehicleDisabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventVehicleDisabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventVehicleDisabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventVehicleDisabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventVehicleDisabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventVehicleDisabled::MergeFrom(const SimEventVehicleDisabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventVehicleDisabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventVehicleDisabled::CopyFrom(const SimEventVehicleDisabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventVehicleDisabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventVehicleDisabled::Swap(SimEventVehicleDisabled* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventVehicleDisabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventVehicleDisabled_descriptor_;
  metadata.reflection = SimEventVehicleDisabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventVehicleReenabled::kVIDFieldNumber;
#endif  // !_MSC_VER

SimEventVehicleReenabled::SimEventVehicleReenabled() {
  SharedCtor();
}

void SimEventVehicleReenabled::InitAsDefaultInstance() {
}

SimEventVehicleReenabled::SimEventVehicleReenabled(const SimEventVehicleReenabled& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventVehicleReenabled::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventVehicleReenabled::~SimEventVehicleReenabled() {
  SharedDtor();
}

void SimEventVehicleReenabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventVehicleReenabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventVehicleReenabled_descriptor_;
}

const SimEventVehicleReenabled& SimEventVehicleReenabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventVehicleReenabled* SimEventVehicleReenabled::default_instance_ = NULL;

SimEventVehicleReenabled* SimEventVehicleReenabled::New() const {
  return new SimEventVehicleReenabled;
}

void SimEventVehicleReenabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventVehicleReenabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventVehicleReenabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventVehicleReenabled::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventVehicleReenabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventVehicleReenabled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventVehicleReenabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventVehicleReenabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventVehicleReenabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventVehicleReenabled::MergeFrom(const SimEventVehicleReenabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventVehicleReenabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventVehicleReenabled::CopyFrom(const SimEventVehicleReenabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventVehicleReenabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventVehicleReenabled::Swap(SimEventVehicleReenabled* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventVehicleReenabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventVehicleReenabled_descriptor_;
  metadata.reflection = SimEventVehicleReenabled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventPassengerCreated::kPStatusFieldNumber;
#endif  // !_MSC_VER

SimEventPassengerCreated::SimEventPassengerCreated() {
  SharedCtor();
}

void SimEventPassengerCreated::InitAsDefaultInstance() {
  p_status_ = const_cast< ::prt::PassengerStatus*>(&::prt::PassengerStatus::default_instance());
}

SimEventPassengerCreated::SimEventPassengerCreated(const SimEventPassengerCreated& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventPassengerCreated::SharedCtor() {
  _cached_size_ = 0;
  p_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventPassengerCreated::~SimEventPassengerCreated() {
  SharedDtor();
}

void SimEventPassengerCreated::SharedDtor() {
  if (this != default_instance_) {
    delete p_status_;
  }
}

const ::google::protobuf::Descriptor* SimEventPassengerCreated::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventPassengerCreated_descriptor_;
}

const SimEventPassengerCreated& SimEventPassengerCreated::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventPassengerCreated* SimEventPassengerCreated::default_instance_ = NULL;

SimEventPassengerCreated* SimEventPassengerCreated::New() const {
  return new SimEventPassengerCreated;
}

void SimEventPassengerCreated::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (p_status_ != NULL) p_status_->::prt::PassengerStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventPassengerCreated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .prt.PassengerStatus p_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_p_status()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventPassengerCreated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventPassengerCreated::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .prt.PassengerStatus p_status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->p_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventPassengerCreated::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .prt.PassengerStatus p_status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->p_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventPassengerCreated::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .prt.PassengerStatus p_status = 1;
    if (has_p_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventPassengerCreated::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventPassengerCreated* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventPassengerCreated*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventPassengerCreated::MergeFrom(const SimEventPassengerCreated& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_p_status()->::prt::PassengerStatus::MergeFrom(from.p_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventPassengerCreated::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventPassengerCreated::CopyFrom(const SimEventPassengerCreated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventPassengerCreated::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_p_status()) {
    if (!this->p_status().IsInitialized()) return false;
  }
  return true;
}

void SimEventPassengerCreated::Swap(SimEventPassengerCreated* other) {
  if (other != this) {
    std::swap(p_status_, other->p_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventPassengerCreated::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventPassengerCreated_descriptor_;
  metadata.reflection = SimEventPassengerCreated_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimEventPassengerChangedest::kPIDFieldNumber;
#endif  // !_MSC_VER

SimEventPassengerChangedest::SimEventPassengerChangedest() {
  SharedCtor();
}

void SimEventPassengerChangedest::InitAsDefaultInstance() {
}

SimEventPassengerChangedest::SimEventPassengerChangedest(const SimEventPassengerChangedest& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimEventPassengerChangedest::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimEventPassengerChangedest::~SimEventPassengerChangedest() {
  SharedDtor();
}

void SimEventPassengerChangedest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimEventPassengerChangedest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimEventPassengerChangedest_descriptor_;
}

const SimEventPassengerChangedest& SimEventPassengerChangedest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimEventPassengerChangedest* SimEventPassengerChangedest::default_instance_ = NULL;

SimEventPassengerChangedest* SimEventPassengerChangedest::New() const {
  return new SimEventPassengerChangedest;
}

void SimEventPassengerChangedest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimEventPassengerChangedest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimEventPassengerChangedest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimEventPassengerChangedest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 pID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimEventPassengerChangedest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimEventPassengerChangedest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pID = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimEventPassengerChangedest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimEventPassengerChangedest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimEventPassengerChangedest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimEventPassengerChangedest::MergeFrom(const SimEventPassengerChangedest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimEventPassengerChangedest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimEventPassengerChangedest::CopyFrom(const SimEventPassengerChangedest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventPassengerChangedest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimEventPassengerChangedest::Swap(SimEventPassengerChangedest* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimEventPassengerChangedest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimEventPassengerChangedest_descriptor_;
  metadata.reflection = SimEventPassengerChangedest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgHdrInvalidSeparator::kMsgIDFieldNumber;
const int SimMsgHdrInvalidSeparator::kMsgSepFieldNumber;
#endif  // !_MSC_VER

SimMsgHdrInvalidSeparator::SimMsgHdrInvalidSeparator() {
  SharedCtor();
}

void SimMsgHdrInvalidSeparator::InitAsDefaultInstance() {
}

SimMsgHdrInvalidSeparator::SimMsgHdrInvalidSeparator(const SimMsgHdrInvalidSeparator& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgHdrInvalidSeparator::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  msg_sep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgHdrInvalidSeparator::~SimMsgHdrInvalidSeparator() {
  SharedDtor();
}

void SimMsgHdrInvalidSeparator::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgHdrInvalidSeparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgHdrInvalidSeparator_descriptor_;
}

const SimMsgHdrInvalidSeparator& SimMsgHdrInvalidSeparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgHdrInvalidSeparator* SimMsgHdrInvalidSeparator::default_instance_ = NULL;

SimMsgHdrInvalidSeparator* SimMsgHdrInvalidSeparator::New() const {
  return new SimMsgHdrInvalidSeparator;
}

void SimMsgHdrInvalidSeparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    msg_sep_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgHdrInvalidSeparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_msg_sep;
        break;
      }
      
      // required int32 msg_sep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msg_sep:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msg_sep_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgHdrInvalidSeparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgHdrInvalidSeparator::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 msg_sep = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_sep(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgHdrInvalidSeparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 msg_sep = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_sep(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgHdrInvalidSeparator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 msg_sep = 2;
    if (has_msg_sep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_sep());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgHdrInvalidSeparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgHdrInvalidSeparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgHdrInvalidSeparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgHdrInvalidSeparator::MergeFrom(const SimMsgHdrInvalidSeparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_msg_sep(from.msg_sep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgHdrInvalidSeparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgHdrInvalidSeparator::CopyFrom(const SimMsgHdrInvalidSeparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgHdrInvalidSeparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimMsgHdrInvalidSeparator::Swap(SimMsgHdrInvalidSeparator* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msg_sep_, other->msg_sep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgHdrInvalidSeparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgHdrInvalidSeparator_descriptor_;
  metadata.reflection = SimMsgHdrInvalidSeparator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgHdrInvalidType::kMsgIDFieldNumber;
const int SimMsgHdrInvalidType::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

SimMsgHdrInvalidType::SimMsgHdrInvalidType() {
  SharedCtor();
}

void SimMsgHdrInvalidType::InitAsDefaultInstance() {
}

SimMsgHdrInvalidType::SimMsgHdrInvalidType(const SimMsgHdrInvalidType& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgHdrInvalidType::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgHdrInvalidType::~SimMsgHdrInvalidType() {
  SharedDtor();
}

void SimMsgHdrInvalidType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgHdrInvalidType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgHdrInvalidType_descriptor_;
}

const SimMsgHdrInvalidType& SimMsgHdrInvalidType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgHdrInvalidType* SimMsgHdrInvalidType::default_instance_ = NULL;

SimMsgHdrInvalidType* SimMsgHdrInvalidType::New() const {
  return new SimMsgHdrInvalidType;
}

void SimMsgHdrInvalidType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    msg_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgHdrInvalidType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }
      
      // required int32 msg_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msg_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msg_type_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgHdrInvalidType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgHdrInvalidType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 msg_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgHdrInvalidType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 msg_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgHdrInvalidType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 msg_type = 2;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgHdrInvalidType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgHdrInvalidType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgHdrInvalidType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgHdrInvalidType::MergeFrom(const SimMsgHdrInvalidType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_msg_type(from.msg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgHdrInvalidType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgHdrInvalidType::CopyFrom(const SimMsgHdrInvalidType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgHdrInvalidType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimMsgHdrInvalidType::Swap(SimMsgHdrInvalidType* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgHdrInvalidType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgHdrInvalidType_descriptor_;
  metadata.reflection = SimMsgHdrInvalidType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgHdrInvalidID::kMsgIDFieldNumber;
#endif  // !_MSC_VER

SimMsgHdrInvalidID::SimMsgHdrInvalidID() {
  SharedCtor();
}

void SimMsgHdrInvalidID::InitAsDefaultInstance() {
}

SimMsgHdrInvalidID::SimMsgHdrInvalidID(const SimMsgHdrInvalidID& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgHdrInvalidID::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgHdrInvalidID::~SimMsgHdrInvalidID() {
  SharedDtor();
}

void SimMsgHdrInvalidID::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgHdrInvalidID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgHdrInvalidID_descriptor_;
}

const SimMsgHdrInvalidID& SimMsgHdrInvalidID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgHdrInvalidID* SimMsgHdrInvalidID::default_instance_ = NULL;

SimMsgHdrInvalidID* SimMsgHdrInvalidID::New() const {
  return new SimMsgHdrInvalidID;
}

void SimMsgHdrInvalidID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgHdrInvalidID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgHdrInvalidID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgHdrInvalidID::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgHdrInvalidID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgHdrInvalidID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgHdrInvalidID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgHdrInvalidID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgHdrInvalidID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgHdrInvalidID::MergeFrom(const SimMsgHdrInvalidID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgHdrInvalidID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgHdrInvalidID::CopyFrom(const SimMsgHdrInvalidID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgHdrInvalidID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimMsgHdrInvalidID::Swap(SimMsgHdrInvalidID* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgHdrInvalidID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgHdrInvalidID_descriptor_;
  metadata.reflection = SimMsgHdrInvalidID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgHdrInvalidTime::kMsgIDFieldNumber;
const int SimMsgHdrInvalidTime::kMsgTimeFieldNumber;
#endif  // !_MSC_VER

SimMsgHdrInvalidTime::SimMsgHdrInvalidTime() {
  SharedCtor();
}

void SimMsgHdrInvalidTime::InitAsDefaultInstance() {
}

SimMsgHdrInvalidTime::SimMsgHdrInvalidTime(const SimMsgHdrInvalidTime& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgHdrInvalidTime::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  msg_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgHdrInvalidTime::~SimMsgHdrInvalidTime() {
  SharedDtor();
}

void SimMsgHdrInvalidTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgHdrInvalidTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgHdrInvalidTime_descriptor_;
}

const SimMsgHdrInvalidTime& SimMsgHdrInvalidTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgHdrInvalidTime* SimMsgHdrInvalidTime::default_instance_ = NULL;

SimMsgHdrInvalidTime* SimMsgHdrInvalidTime::New() const {
  return new SimMsgHdrInvalidTime;
}

void SimMsgHdrInvalidTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    msg_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgHdrInvalidTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_msg_time;
        break;
      }
      
      // required int32 msg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msg_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msg_time_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgHdrInvalidTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgHdrInvalidTime::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 msg_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgHdrInvalidTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 msg_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgHdrInvalidTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 msg_time = 2;
    if (has_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgHdrInvalidTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgHdrInvalidTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgHdrInvalidTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgHdrInvalidTime::MergeFrom(const SimMsgHdrInvalidTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_msg_time(from.msg_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgHdrInvalidTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgHdrInvalidTime::CopyFrom(const SimMsgHdrInvalidTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgHdrInvalidTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimMsgHdrInvalidTime::Swap(SimMsgHdrInvalidTime* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msg_time_, other->msg_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgHdrInvalidTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgHdrInvalidTime_descriptor_;
  metadata.reflection = SimMsgHdrInvalidTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgHdrInvalidSize::kMsgIDFieldNumber;
const int SimMsgHdrInvalidSize::kMsgSizeFieldNumber;
#endif  // !_MSC_VER

SimMsgHdrInvalidSize::SimMsgHdrInvalidSize() {
  SharedCtor();
}

void SimMsgHdrInvalidSize::InitAsDefaultInstance() {
}

SimMsgHdrInvalidSize::SimMsgHdrInvalidSize(const SimMsgHdrInvalidSize& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgHdrInvalidSize::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  msg_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgHdrInvalidSize::~SimMsgHdrInvalidSize() {
  SharedDtor();
}

void SimMsgHdrInvalidSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgHdrInvalidSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgHdrInvalidSize_descriptor_;
}

const SimMsgHdrInvalidSize& SimMsgHdrInvalidSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgHdrInvalidSize* SimMsgHdrInvalidSize::default_instance_ = NULL;

SimMsgHdrInvalidSize* SimMsgHdrInvalidSize::New() const {
  return new SimMsgHdrInvalidSize;
}

void SimMsgHdrInvalidSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    msg_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgHdrInvalidSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_msg_size;
        break;
      }
      
      // required int32 msg_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msg_size:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msg_size_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgHdrInvalidSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgHdrInvalidSize::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 msg_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgHdrInvalidSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 msg_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgHdrInvalidSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 msg_size = 2;
    if (has_msg_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgHdrInvalidSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgHdrInvalidSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgHdrInvalidSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgHdrInvalidSize::MergeFrom(const SimMsgHdrInvalidSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_msg_size(from.msg_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgHdrInvalidSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgHdrInvalidSize::CopyFrom(const SimMsgHdrInvalidSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgHdrInvalidSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimMsgHdrInvalidSize::Swap(SimMsgHdrInvalidSize* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgHdrInvalidSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgHdrInvalidSize_descriptor_;
  metadata.reflection = SimMsgHdrInvalidSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgBodyInvalidID::kMsgIDFieldNumber;
const int SimMsgBodyInvalidID::kLocTypeFieldNumber;
const int SimMsgBodyInvalidID::kLocIDFieldNumber;
#endif  // !_MSC_VER

SimMsgBodyInvalidID::SimMsgBodyInvalidID() {
  SharedCtor();
}

void SimMsgBodyInvalidID::InitAsDefaultInstance() {
}

SimMsgBodyInvalidID::SimMsgBodyInvalidID(const SimMsgBodyInvalidID& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgBodyInvalidID::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  loc_type_ = 0;
  locid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgBodyInvalidID::~SimMsgBodyInvalidID() {
  SharedDtor();
}

void SimMsgBodyInvalidID::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgBodyInvalidID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgBodyInvalidID_descriptor_;
}

const SimMsgBodyInvalidID& SimMsgBodyInvalidID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgBodyInvalidID* SimMsgBodyInvalidID::default_instance_ = NULL;

SimMsgBodyInvalidID* SimMsgBodyInvalidID::New() const {
  return new SimMsgBodyInvalidID;
}

void SimMsgBodyInvalidID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    loc_type_ = 0;
    locid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgBodyInvalidID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_loc_type;
        break;
      }
      
      // required .prt.LocationType loc_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_loc_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (prt::LocationType_IsValid(value)) {
          set_loc_type(static_cast< prt::LocationType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(24)) goto parse_locID;
        break;
      }
      
      // required int32 locID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_locID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &locid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgBodyInvalidID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgBodyInvalidID::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required .prt.LocationType loc_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->loc_type(), output);
  }
  
  // required int32 locID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->locid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgBodyInvalidID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required .prt.LocationType loc_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->loc_type(), target);
  }
  
  // required int32 locID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->locid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgBodyInvalidID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required .prt.LocationType loc_type = 2;
    if (has_loc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loc_type());
    }
    
    // required int32 locID = 3;
    if (has_locid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgBodyInvalidID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgBodyInvalidID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgBodyInvalidID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgBodyInvalidID::MergeFrom(const SimMsgBodyInvalidID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_loc_type(from.loc_type());
    }
    if (from._has_bit(2)) {
      set_locid(from.locid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgBodyInvalidID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgBodyInvalidID::CopyFrom(const SimMsgBodyInvalidID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgBodyInvalidID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SimMsgBodyInvalidID::Swap(SimMsgBodyInvalidID* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(loc_type_, other->loc_type_);
    std::swap(locid_, other->locid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgBodyInvalidID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgBodyInvalidID_descriptor_;
  metadata.reflection = SimMsgBodyInvalidID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgBodyInvalidAccel::kMsgIDFieldNumber;
const int SimMsgBodyInvalidAccel::kAccelFieldNumber;
#endif  // !_MSC_VER

SimMsgBodyInvalidAccel::SimMsgBodyInvalidAccel() {
  SharedCtor();
}

void SimMsgBodyInvalidAccel::InitAsDefaultInstance() {
}

SimMsgBodyInvalidAccel::SimMsgBodyInvalidAccel(const SimMsgBodyInvalidAccel& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgBodyInvalidAccel::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  accel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgBodyInvalidAccel::~SimMsgBodyInvalidAccel() {
  SharedDtor();
}

void SimMsgBodyInvalidAccel::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgBodyInvalidAccel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgBodyInvalidAccel_descriptor_;
}

const SimMsgBodyInvalidAccel& SimMsgBodyInvalidAccel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgBodyInvalidAccel* SimMsgBodyInvalidAccel::default_instance_ = NULL;

SimMsgBodyInvalidAccel* SimMsgBodyInvalidAccel::New() const {
  return new SimMsgBodyInvalidAccel;
}

void SimMsgBodyInvalidAccel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    accel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgBodyInvalidAccel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_accel;
        break;
      }
      
      // required int32 accel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &accel_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgBodyInvalidAccel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgBodyInvalidAccel::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 accel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgBodyInvalidAccel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 accel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->accel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgBodyInvalidAccel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 accel = 2;
    if (has_accel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgBodyInvalidAccel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgBodyInvalidAccel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgBodyInvalidAccel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgBodyInvalidAccel::MergeFrom(const SimMsgBodyInvalidAccel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_accel(from.accel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgBodyInvalidAccel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgBodyInvalidAccel::CopyFrom(const SimMsgBodyInvalidAccel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgBodyInvalidAccel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimMsgBodyInvalidAccel::Swap(SimMsgBodyInvalidAccel* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(accel_, other->accel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgBodyInvalidAccel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgBodyInvalidAccel_descriptor_;
  metadata.reflection = SimMsgBodyInvalidAccel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimMsgBodyInvalidJerk::kMsgIDFieldNumber;
const int SimMsgBodyInvalidJerk::kJerkFieldNumber;
#endif  // !_MSC_VER

SimMsgBodyInvalidJerk::SimMsgBodyInvalidJerk() {
  SharedCtor();
}

void SimMsgBodyInvalidJerk::InitAsDefaultInstance() {
}

SimMsgBodyInvalidJerk::SimMsgBodyInvalidJerk(const SimMsgBodyInvalidJerk& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimMsgBodyInvalidJerk::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0;
  jerk_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimMsgBodyInvalidJerk::~SimMsgBodyInvalidJerk() {
  SharedDtor();
}

void SimMsgBodyInvalidJerk::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimMsgBodyInvalidJerk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimMsgBodyInvalidJerk_descriptor_;
}

const SimMsgBodyInvalidJerk& SimMsgBodyInvalidJerk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SimMsgBodyInvalidJerk* SimMsgBodyInvalidJerk::default_instance_ = NULL;

SimMsgBodyInvalidJerk* SimMsgBodyInvalidJerk::New() const {
  return new SimMsgBodyInvalidJerk;
}

void SimMsgBodyInvalidJerk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0;
    jerk_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimMsgBodyInvalidJerk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_jerk;
        break;
      }
      
      // required int32 jerk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_jerk:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &jerk_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimMsgBodyInvalidJerk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimMsgBodyInvalidJerk::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgid(), output);
  }
  
  // required int32 jerk = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jerk(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimMsgBodyInvalidJerk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgid(), target);
  }
  
  // required int32 jerk = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jerk(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimMsgBodyInvalidJerk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
    // required int32 jerk = 2;
    if (has_jerk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jerk());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimMsgBodyInvalidJerk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimMsgBodyInvalidJerk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimMsgBodyInvalidJerk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimMsgBodyInvalidJerk::MergeFrom(const SimMsgBodyInvalidJerk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msgid(from.msgid());
    }
    if (from._has_bit(1)) {
      set_jerk(from.jerk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimMsgBodyInvalidJerk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMsgBodyInvalidJerk::CopyFrom(const SimMsgBodyInvalidJerk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMsgBodyInvalidJerk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimMsgBodyInvalidJerk::Swap(SimMsgBodyInvalidJerk* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(jerk_, other->jerk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimMsgBodyInvalidJerk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimMsgBodyInvalidJerk_descriptor_;
  metadata.reflection = SimMsgBodyInvalidJerk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VehicleStatus::kVIDFieldNumber;
const int VehicleStatus::kNoseLocTypeFieldNumber;
const int VehicleStatus::kNoseLocIDFieldNumber;
const int VehicleStatus::kNosePosFieldNumber;
const int VehicleStatus::kTailLocTypeFieldNumber;
const int VehicleStatus::kTailLocIDFieldNumber;
const int VehicleStatus::kTailPosFieldNumber;
const int VehicleStatus::kVelFieldNumber;
const int VehicleStatus::kAccelFieldNumber;
const int VehicleStatus::kPassengerIDFieldNumber;
const int VehicleStatus::kHeadwayFieldNumber;
#endif  // !_MSC_VER

VehicleStatus::VehicleStatus() {
  SharedCtor();
}

void VehicleStatus::InitAsDefaultInstance() {
}

VehicleStatus::VehicleStatus(const VehicleStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void VehicleStatus::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  nose_loc_type_ = 0;
  nose_locid_ = 0;
  nose_pos_ = 0;
  tail_loc_type_ = 0;
  tail_locid_ = 0;
  tail_pos_ = 0;
  vel_ = 0;
  accel_ = 0;
  headway_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleStatus::~VehicleStatus() {
  SharedDtor();
}

void VehicleStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VehicleStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleStatus_descriptor_;
}

const VehicleStatus& VehicleStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

VehicleStatus* VehicleStatus::default_instance_ = NULL;

VehicleStatus* VehicleStatus::New() const {
  return new VehicleStatus;
}

void VehicleStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    nose_loc_type_ = 0;
    nose_locid_ = 0;
    nose_pos_ = 0;
    tail_loc_type_ = 0;
    tail_locid_ = 0;
    tail_pos_ = 0;
    vel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accel_ = 0;
    headway_ = 0;
  }
  passengerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nose_loc_type;
        break;
      }
      
      // required .prt.LocationType nose_loc_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nose_loc_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (prt::LocationType_IsValid(value)) {
          set_nose_loc_type(static_cast< prt::LocationType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(24)) goto parse_nose_locID;
        break;
      }
      
      // required int32 nose_locID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nose_locID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nose_locid_));
        _set_bit(2);
        if (input->ExpectTag(37)) goto parse_nose_pos;
        break;
      }
      
      // required float nose_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_nose_pos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &nose_pos_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_tail_loc_type;
        break;
      }
      
      // required .prt.LocationType tail_loc_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tail_loc_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (prt::LocationType_IsValid(value)) {
          set_tail_loc_type(static_cast< prt::LocationType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_tail_locID;
        break;
      }
      
      // required int32 tail_locID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tail_locID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tail_locid_));
        _set_bit(5);
        if (input->ExpectTag(61)) goto parse_tail_pos;
        break;
      }
      
      // required float tail_pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_tail_pos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &tail_pos_));
        _set_bit(6);
        if (input->ExpectTag(69)) goto parse_vel;
        break;
      }
      
      // required float vel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_vel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &vel_));
        _set_bit(7);
        if (input->ExpectTag(77)) goto parse_accel;
        break;
      }
      
      // required float accel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_accel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &accel_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_passengerID;
        break;
      }
      
      // repeated int32 passengerID = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_passengerID:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_passengerid(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(96)) goto parse_headway;
        break;
      }
      
      // optional int32 headway = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_headway:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &headway_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VehicleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VehicleStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required .prt.LocationType nose_loc_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nose_loc_type(), output);
  }
  
  // required int32 nose_locID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nose_locid(), output);
  }
  
  // required float nose_pos = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->nose_pos(), output);
  }
  
  // required .prt.LocationType tail_loc_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tail_loc_type(), output);
  }
  
  // required int32 tail_locID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tail_locid(), output);
  }
  
  // required float tail_pos = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tail_pos(), output);
  }
  
  // required float vel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->vel(), output);
  }
  
  // required float accel = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->accel(), output);
  }
  
  // repeated int32 passengerID = 10 [packed = true];
  if (this->passengerid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_passengerid_cached_byte_size_);
  }
  for (int i = 0; i < this->passengerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->passengerid(i), output);
  }
  
  // optional int32 headway = 12;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->headway(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VehicleStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required .prt.LocationType nose_loc_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->nose_loc_type(), target);
  }
  
  // required int32 nose_locID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nose_locid(), target);
  }
  
  // required float nose_pos = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->nose_pos(), target);
  }
  
  // required .prt.LocationType tail_loc_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tail_loc_type(), target);
  }
  
  // required int32 tail_locID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tail_locid(), target);
  }
  
  // required float tail_pos = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tail_pos(), target);
  }
  
  // required float vel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->vel(), target);
  }
  
  // required float accel = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->accel(), target);
  }
  
  // repeated int32 passengerID = 10 [packed = true];
  if (this->passengerid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _passengerid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->passengerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->passengerid(i), target);
  }
  
  // optional int32 headway = 12;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->headway(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VehicleStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required .prt.LocationType nose_loc_type = 2;
    if (has_nose_loc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nose_loc_type());
    }
    
    // required int32 nose_locID = 3;
    if (has_nose_locid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nose_locid());
    }
    
    // required float nose_pos = 4;
    if (has_nose_pos()) {
      total_size += 1 + 4;
    }
    
    // required .prt.LocationType tail_loc_type = 5;
    if (has_tail_loc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tail_loc_type());
    }
    
    // required int32 tail_locID = 6;
    if (has_tail_locid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tail_locid());
    }
    
    // required float tail_pos = 7;
    if (has_tail_pos()) {
      total_size += 1 + 4;
    }
    
    // required float vel = 8;
    if (has_vel()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float accel = 9;
    if (has_accel()) {
      total_size += 1 + 4;
    }
    
    // optional int32 headway = 12;
    if (has_headway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headway());
    }
    
  }
  // repeated int32 passengerID = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->passengerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passengerid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _passengerid_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VehicleStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleStatus::MergeFrom(const VehicleStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  passengerid_.MergeFrom(from.passengerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_nose_loc_type(from.nose_loc_type());
    }
    if (from._has_bit(2)) {
      set_nose_locid(from.nose_locid());
    }
    if (from._has_bit(3)) {
      set_nose_pos(from.nose_pos());
    }
    if (from._has_bit(4)) {
      set_tail_loc_type(from.tail_loc_type());
    }
    if (from._has_bit(5)) {
      set_tail_locid(from.tail_locid());
    }
    if (from._has_bit(6)) {
      set_tail_pos(from.tail_pos());
    }
    if (from._has_bit(7)) {
      set_vel(from.vel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_accel(from.accel());
    }
    if (from._has_bit(10)) {
      set_headway(from.headway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleStatus::CopyFrom(const VehicleStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void VehicleStatus::Swap(VehicleStatus* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(nose_loc_type_, other->nose_loc_type_);
    std::swap(nose_locid_, other->nose_locid_);
    std::swap(nose_pos_, other->nose_pos_);
    std::swap(tail_loc_type_, other->tail_loc_type_);
    std::swap(tail_locid_, other->tail_locid_);
    std::swap(tail_pos_, other->tail_pos_);
    std::swap(vel_, other->vel_);
    std::swap(accel_, other->accel_);
    passengerid_.Swap(&other->passengerid_);
    std::swap(headway_, other->headway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleStatus_descriptor_;
  metadata.reflection = VehicleStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StationSummary::_default_label_;
#ifndef _MSC_VER
const int StationSummary::kSIDFieldNumber;
const int StationSummary::kLabelFieldNumber;
const int StationSummary::kLoadedReadyLaunchFieldNumber;
const int StationSummary::kUnloadedReadyLaunchFieldNumber;
const int StationSummary::kPIDFieldNumber;
const int StationSummary::kNextAcceptTimeFieldNumber;
const int StationSummary::kVehiclesNeededFieldNumber;
#endif  // !_MSC_VER

StationSummary::StationSummary() {
  SharedCtor();
}

void StationSummary::InitAsDefaultInstance() {
}

StationSummary::StationSummary(const StationSummary& from) {
  SharedCtor();
  MergeFrom(from);
}

void StationSummary::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  label_ = const_cast< ::std::string*>(&_default_label_);
  next_accept_time_ = 0;
  vehicles_needed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationSummary::~StationSummary() {
  SharedDtor();
}

void StationSummary::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StationSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationSummary_descriptor_;
}

const StationSummary& StationSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

StationSummary* StationSummary::default_instance_ = NULL;

StationSummary* StationSummary::New() const {
  return new StationSummary;
}

void StationSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (_has_bit(1)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    next_accept_time_ = 0;
    vehicles_needed_ = 0;
  }
  loaded_ready_launch_.Clear();
  unloaded_ready_launch_.Clear();
  pid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_loaded_ready_launch;
        break;
      }
      
      // repeated int32 loaded_ready_launch = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_loaded_ready_launch:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_loaded_ready_launch(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(34)) goto parse_unloaded_ready_launch;
        break;
      }
      
      // repeated int32 unloaded_ready_launch = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unloaded_ready_launch:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_unloaded_ready_launch(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(42)) goto parse_pID;
        break;
      }
      
      // repeated int32 pID = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pID:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_pid(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(48)) goto parse_next_accept_time;
        break;
      }
      
      // required int32 next_accept_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_next_accept_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &next_accept_time_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_vehicles_needed;
        break;
      }
      
      // required int32 vehicles_needed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vehicles_needed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vehicles_needed_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StationSummary::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // repeated int32 loaded_ready_launch = 3 [packed = true];
  if (this->loaded_ready_launch_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_loaded_ready_launch_cached_byte_size_);
  }
  for (int i = 0; i < this->loaded_ready_launch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->loaded_ready_launch(i), output);
  }
  
  // repeated int32 unloaded_ready_launch = 4 [packed = true];
  if (this->unloaded_ready_launch_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_unloaded_ready_launch_cached_byte_size_);
  }
  for (int i = 0; i < this->unloaded_ready_launch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->unloaded_ready_launch(i), output);
  }
  
  // repeated int32 pID = 5 [packed = true];
  if (this->pid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pid_cached_byte_size_);
  }
  for (int i = 0; i < this->pid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pid(i), output);
  }
  
  // required int32 next_accept_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->next_accept_time(), output);
  }
  
  // required int32 vehicles_needed = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vehicles_needed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // repeated int32 loaded_ready_launch = 3 [packed = true];
  if (this->loaded_ready_launch_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _loaded_ready_launch_cached_byte_size_, target);
  }
  for (int i = 0; i < this->loaded_ready_launch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->loaded_ready_launch(i), target);
  }
  
  // repeated int32 unloaded_ready_launch = 4 [packed = true];
  if (this->unloaded_ready_launch_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _unloaded_ready_launch_cached_byte_size_, target);
  }
  for (int i = 0; i < this->unloaded_ready_launch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->unloaded_ready_launch(i), target);
  }
  
  // repeated int32 pID = 5 [packed = true];
  if (this->pid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pid(i), target);
  }
  
  // required int32 next_accept_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->next_accept_time(), target);
  }
  
  // required int32 vehicles_needed = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vehicles_needed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sID = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // required int32 next_accept_time = 6;
    if (has_next_accept_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_accept_time());
    }
    
    // required int32 vehicles_needed = 7;
    if (has_vehicles_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vehicles_needed());
    }
    
  }
  // repeated int32 loaded_ready_launch = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->loaded_ready_launch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->loaded_ready_launch(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _loaded_ready_launch_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int32 unloaded_ready_launch = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->unloaded_ready_launch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unloaded_ready_launch(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _unloaded_ready_launch_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int32 pID = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->pid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _pid_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StationSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationSummary::MergeFrom(const StationSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  loaded_ready_launch_.MergeFrom(from.loaded_ready_launch_);
  unloaded_ready_launch_.MergeFrom(from.unloaded_ready_launch_);
  pid_.MergeFrom(from.pid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_label(from.label());
    }
    if (from._has_bit(5)) {
      set_next_accept_time(from.next_accept_time());
    }
    if (from._has_bit(6)) {
      set_vehicles_needed(from.vehicles_needed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationSummary::CopyFrom(const StationSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  
  return true;
}

void StationSummary::Swap(StationSummary* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(label_, other->label_);
    loaded_ready_launch_.Swap(&other->loaded_ready_launch_);
    unloaded_ready_launch_.Swap(&other->unloaded_ready_launch_);
    pid_.Swap(&other->pid_);
    std::swap(next_accept_time_, other->next_accept_time_);
    std::swap(vehicles_needed_, other->vehicles_needed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationSummary_descriptor_;
  metadata.reflection = StationSummary_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StationStatus::_default_label_;
#ifndef _MSC_VER
const int StationStatus::kSIDFieldNumber;
const int StationStatus::kLabelFieldNumber;
const int StationStatus::kPlatformStatusFieldNumber;
const int StationStatus::kPIDFieldNumber;
const int StationStatus::kVAdvTimeFieldNumber;
const int StationStatus::kPolicyFieldNumber;
#endif  // !_MSC_VER

StationStatus::StationStatus() {
  SharedCtor();
}

void StationStatus::InitAsDefaultInstance() {
}

StationStatus::StationStatus(const StationStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void StationStatus::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  label_ = const_cast< ::std::string*>(&_default_label_);
  v_adv_time_ = 0;
  policy_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationStatus::~StationStatus() {
  SharedDtor();
}

void StationStatus::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationStatus_descriptor_;
}

const StationStatus& StationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

StationStatus* StationStatus::default_instance_ = NULL;

StationStatus* StationStatus::New() const {
  return new StationStatus;
}

void StationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    if (_has_bit(1)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    v_adv_time_ = 0;
    policy_ = 1;
  }
  platform_status_.Clear();
  pid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &sid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_platform_status;
        break;
      }
      
      // repeated .prt.PlatformStatus platform_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_platform_status:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_platform_status()));
        if (input->ExpectTag(26)) goto parse_platform_status;
        if (input->ExpectTag(34)) goto parse_pID;
        break;
      }
      
      // repeated int32 pID = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pID:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_pid(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectTag(40)) goto parse_v_adv_time;
        break;
      }
      
      // required int32 v_adv_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_v_adv_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &v_adv_time_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_policy;
        break;
      }
      
      // required .prt.StationPolicy policy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_policy:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (prt::StationPolicy_IsValid(value)) {
          set_policy(static_cast< prt::StationPolicy >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StationStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 sID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // repeated .prt.PlatformStatus platform_status = 3;
  for (int i = 0; i < this->platform_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->platform_status(i), output);
  }
  
  // repeated int32 pID = 4 [packed = true];
  if (this->pid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pid_cached_byte_size_);
  }
  for (int i = 0; i < this->pid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pid(i), output);
  }
  
  // required int32 v_adv_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->v_adv_time(), output);
  }
  
  // required .prt.StationPolicy policy = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->policy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // repeated .prt.PlatformStatus platform_status = 3;
  for (int i = 0; i < this->platform_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->platform_status(i), target);
  }
  
  // repeated int32 pID = 4 [packed = true];
  if (this->pid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pid(i), target);
  }
  
  // required int32 v_adv_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->v_adv_time(), target);
  }
  
  // required .prt.StationPolicy policy = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->policy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sID = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // required int32 v_adv_time = 5;
    if (has_v_adv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v_adv_time());
    }
    
    // required .prt.StationPolicy policy = 6;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->policy());
    }
    
  }
  // repeated .prt.PlatformStatus platform_status = 3;
  total_size += 1 * this->platform_status_size();
  for (int i = 0; i < this->platform_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->platform_status(i));
  }
  
  // repeated int32 pID = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->pid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _pid_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationStatus::MergeFrom(const StationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  platform_status_.MergeFrom(from.platform_status_);
  pid_.MergeFrom(from.pid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sid(from.sid());
    }
    if (from._has_bit(1)) {
      set_label(from.label());
    }
    if (from._has_bit(4)) {
      set_v_adv_time(from.v_adv_time());
    }
    if (from._has_bit(5)) {
      set_policy(from.policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationStatus::CopyFrom(const StationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;
  
  for (int i = 0; i < platform_status_size(); i++) {
    if (!this->platform_status(i).IsInitialized()) return false;
  }
  return true;
}

void StationStatus::Swap(StationStatus* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(label_, other->label_);
    platform_status_.Swap(&other->platform_status_);
    pid_.Swap(&other->pid_);
    std::swap(v_adv_time_, other->v_adv_time_);
    std::swap(policy_, other->policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationStatus_descriptor_;
  metadata.reflection = StationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlatformStatus::kPlatIDFieldNumber;
const int PlatformStatus::kTsIDFieldNumber;
const int PlatformStatus::kUnloadingFieldNumber;
const int PlatformStatus::kLoadingFieldNumber;
const int PlatformStatus::kBerthsFieldNumber;
#endif  // !_MSC_VER

PlatformStatus::PlatformStatus() {
  SharedCtor();
}

void PlatformStatus::InitAsDefaultInstance() {
}

PlatformStatus::PlatformStatus(const PlatformStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void PlatformStatus::SharedCtor() {
  _cached_size_ = 0;
  platid_ = 0;
  tsid_ = 0;
  unloading_ = false;
  loading_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlatformStatus::~PlatformStatus() {
  SharedDtor();
}

void PlatformStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PlatformStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatformStatus_descriptor_;
}

const PlatformStatus& PlatformStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

PlatformStatus* PlatformStatus::default_instance_ = NULL;

PlatformStatus* PlatformStatus::New() const {
  return new PlatformStatus;
}

void PlatformStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    platid_ = 0;
    tsid_ = 0;
    unloading_ = false;
    loading_ = false;
  }
  berths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlatformStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 platID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &platid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_tsID;
        break;
      }
      
      // required int32 tsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tsID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_unloading;
        break;
      }
      
      // required bool unloading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unloading:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &unloading_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_loading;
        break;
      }
      
      // required bool loading = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_loading:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &loading_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_berths;
        break;
      }
      
      // repeated .prt.BerthStatus berths = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_berths:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_berths()));
        if (input->ExpectTag(42)) goto parse_berths;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlatformStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PlatformStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 platID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platid(), output);
  }
  
  // required int32 tsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsid(), output);
  }
  
  // required bool unloading = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unloading(), output);
  }
  
  // required bool loading = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->loading(), output);
  }
  
  // repeated .prt.BerthStatus berths = 5;
  for (int i = 0; i < this->berths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->berths(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlatformStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 platID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platid(), target);
  }
  
  // required int32 tsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tsid(), target);
  }
  
  // required bool unloading = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unloading(), target);
  }
  
  // required bool loading = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->loading(), target);
  }
  
  // repeated .prt.BerthStatus berths = 5;
  for (int i = 0; i < this->berths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->berths(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlatformStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 platID = 1;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }
    
    // required int32 tsID = 2;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
    // required bool unloading = 3;
    if (has_unloading()) {
      total_size += 1 + 1;
    }
    
    // required bool loading = 4;
    if (has_loading()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .prt.BerthStatus berths = 5;
  total_size += 1 * this->berths_size();
  for (int i = 0; i < this->berths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->berths(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PlatformStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlatformStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlatformStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlatformStatus::MergeFrom(const PlatformStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  berths_.MergeFrom(from.berths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_platid(from.platid());
    }
    if (from._has_bit(1)) {
      set_tsid(from.tsid());
    }
    if (from._has_bit(2)) {
      set_unloading(from.unloading());
    }
    if (from._has_bit(3)) {
      set_loading(from.loading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlatformStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformStatus::CopyFrom(const PlatformStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < berths_size(); i++) {
    if (!this->berths(i).IsInitialized()) return false;
  }
  return true;
}

void PlatformStatus::Swap(PlatformStatus* other) {
  if (other != this) {
    std::swap(platid_, other->platid_);
    std::swap(tsid_, other->tsid_);
    std::swap(unloading_, other->unloading_);
    std::swap(loading_, other->loading_);
    berths_.Swap(&other->berths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlatformStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlatformStatus_descriptor_;
  metadata.reflection = PlatformStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BerthStatus::kBIDFieldNumber;
const int BerthStatus::kVIDFieldNumber;
const int BerthStatus::kBusyFieldNumber;
#endif  // !_MSC_VER

BerthStatus::BerthStatus() {
  SharedCtor();
}

void BerthStatus::InitAsDefaultInstance() {
}

BerthStatus::BerthStatus(const BerthStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void BerthStatus::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  vid_ = 0;
  busy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BerthStatus::~BerthStatus() {
  SharedDtor();
}

void BerthStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BerthStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BerthStatus_descriptor_;
}

const BerthStatus& BerthStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

BerthStatus* BerthStatus::default_instance_ = NULL;

BerthStatus* BerthStatus::New() const {
  return new BerthStatus;
}

void BerthStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bid_ = 0;
    vid_ = 0;
    busy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BerthStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &bid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_vID;
        break;
      }
      
      // required int32 vID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_busy;
        break;
      }
      
      // required bool busy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_busy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &busy_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BerthStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BerthStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 bID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }
  
  // required bool busy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->busy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BerthStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }
  
  // required int32 vID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }
  
  // required bool busy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->busy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BerthStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bID = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }
    
    // required int32 vID = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required bool busy = 3;
    if (has_busy()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BerthStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BerthStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BerthStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BerthStatus::MergeFrom(const BerthStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bid(from.bid());
    }
    if (from._has_bit(1)) {
      set_vid(from.vid());
    }
    if (from._has_bit(2)) {
      set_busy(from.busy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BerthStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BerthStatus::CopyFrom(const BerthStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BerthStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BerthStatus::Swap(BerthStatus* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(vid_, other->vid_);
    std::swap(busy_, other->busy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BerthStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BerthStatus_descriptor_;
  metadata.reflection = BerthStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PassengerStatus::_default_label_;
#ifndef _MSC_VER
const int PassengerStatus::kPIDFieldNumber;
const int PassengerStatus::kLabelFieldNumber;
const int PassengerStatus::kLocTypeFieldNumber;
const int PassengerStatus::kLocIDFieldNumber;
const int PassengerStatus::kSrcStationIDFieldNumber;
const int PassengerStatus::kDestStationIDFieldNumber;
const int PassengerStatus::kWeightFieldNumber;
const int PassengerStatus::kWaitTimeFieldNumber;
const int PassengerStatus::kTravelTimeFieldNumber;
const int PassengerStatus::kTripCompleteFieldNumber;
const int PassengerStatus::kTripSuccessFieldNumber;
#endif  // !_MSC_VER

PassengerStatus::PassengerStatus() {
  SharedCtor();
}

void PassengerStatus::InitAsDefaultInstance() {
}

PassengerStatus::PassengerStatus(const PassengerStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void PassengerStatus::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  label_ = const_cast< ::std::string*>(&_default_label_);
  loc_type_ = 0;
  locid_ = 0;
  src_stationid_ = 0;
  dest_stationid_ = 0;
  weight_ = 0;
  wait_time_ = 0;
  travel_time_ = 0;
  trip_complete_ = false;
  trip_success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassengerStatus::~PassengerStatus() {
  SharedDtor();
}

void PassengerStatus::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PassengerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassengerStatus_descriptor_;
}

const PassengerStatus& PassengerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

PassengerStatus* PassengerStatus::default_instance_ = NULL;

PassengerStatus* PassengerStatus::New() const {
  return new PassengerStatus;
}

void PassengerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    if (_has_bit(1)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    loc_type_ = 0;
    locid_ = 0;
    src_stationid_ = 0;
    dest_stationid_ = 0;
    weight_ = 0;
    wait_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    travel_time_ = 0;
    trip_complete_ = false;
    trip_success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassengerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_loc_type;
        break;
      }
      
      // required .prt.LocationType loc_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_loc_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (prt::LocationType_IsValid(value)) {
          set_loc_type(static_cast< prt::LocationType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(32)) goto parse_locID;
        break;
      }
      
      // required int32 locID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_locID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &locid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_src_stationID;
        break;
      }
      
      // required int32 src_stationID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_src_stationID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &src_stationid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_dest_stationID;
        break;
      }
      
      // required int32 dest_stationID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dest_stationID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dest_stationid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_weight;
        break;
      }
      
      // optional int32 weight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_weight:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &weight_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_wait_time;
        break;
      }
      
      // optional int32 wait_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wait_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wait_time_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_travel_time;
        break;
      }
      
      // optional int32 travel_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_travel_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &travel_time_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_trip_complete;
        break;
      }
      
      // optional bool trip_complete = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_trip_complete:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &trip_complete_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_trip_success;
        break;
      }
      
      // optional bool trip_success = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_trip_success:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &trip_success_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassengerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PassengerStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 pID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // required .prt.LocationType loc_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->loc_type(), output);
  }
  
  // required int32 locID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->locid(), output);
  }
  
  // required int32 src_stationID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->src_stationid(), output);
  }
  
  // required int32 dest_stationID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dest_stationid(), output);
  }
  
  // optional int32 weight = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->weight(), output);
  }
  
  // optional int32 wait_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wait_time(), output);
  }
  
  // optional int32 travel_time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->travel_time(), output);
  }
  
  // optional bool trip_complete = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->trip_complete(), output);
  }
  
  // optional bool trip_success = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->trip_success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassengerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // required .prt.LocationType loc_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->loc_type(), target);
  }
  
  // required int32 locID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->locid(), target);
  }
  
  // required int32 src_stationID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->src_stationid(), target);
  }
  
  // required int32 dest_stationID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dest_stationid(), target);
  }
  
  // optional int32 weight = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->weight(), target);
  }
  
  // optional int32 wait_time = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wait_time(), target);
  }
  
  // optional int32 travel_time = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->travel_time(), target);
  }
  
  // optional bool trip_complete = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->trip_complete(), target);
  }
  
  // optional bool trip_success = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->trip_success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassengerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pID = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // required .prt.LocationType loc_type = 3;
    if (has_loc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loc_type());
    }
    
    // required int32 locID = 4;
    if (has_locid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locid());
    }
    
    // required int32 src_stationID = 5;
    if (has_src_stationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_stationid());
    }
    
    // required int32 dest_stationID = 6;
    if (has_dest_stationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_stationid());
    }
    
    // optional int32 weight = 7;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }
    
    // optional int32 wait_time = 8;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 travel_time = 9;
    if (has_travel_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->travel_time());
    }
    
    // optional bool trip_complete = 10;
    if (has_trip_complete()) {
      total_size += 1 + 1;
    }
    
    // optional bool trip_success = 11;
    if (has_trip_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PassengerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassengerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassengerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassengerStatus::MergeFrom(const PassengerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pid(from.pid());
    }
    if (from._has_bit(1)) {
      set_label(from.label());
    }
    if (from._has_bit(2)) {
      set_loc_type(from.loc_type());
    }
    if (from._has_bit(3)) {
      set_locid(from.locid());
    }
    if (from._has_bit(4)) {
      set_src_stationid(from.src_stationid());
    }
    if (from._has_bit(5)) {
      set_dest_stationid(from.dest_stationid());
    }
    if (from._has_bit(6)) {
      set_weight(from.weight());
    }
    if (from._has_bit(7)) {
      set_wait_time(from.wait_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_travel_time(from.travel_time());
    }
    if (from._has_bit(9)) {
      set_trip_complete(from.trip_complete());
    }
    if (from._has_bit(10)) {
      set_trip_success(from.trip_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassengerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassengerStatus::CopyFrom(const PassengerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassengerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  
  return true;
}

void PassengerStatus::Swap(PassengerStatus* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(label_, other->label_);
    std::swap(loc_type_, other->loc_type_);
    std::swap(locid_, other->locid_);
    std::swap(src_stationid_, other->src_stationid_);
    std::swap(dest_stationid_, other->dest_stationid_);
    std::swap(weight_, other->weight_);
    std::swap(wait_time_, other->wait_time_);
    std::swap(travel_time_, other->travel_time_);
    std::swap(trip_complete_, other->trip_complete_);
    std::swap(trip_success_, other->trip_success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassengerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassengerStatus_descriptor_;
  metadata.reflection = PassengerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoutingEntry::kVIDFieldNumber;
const int RoutingEntry::kTsIDFieldNumber;
const int RoutingEntry::kMsgIDFieldNumber;
#endif  // !_MSC_VER

RoutingEntry::RoutingEntry() {
  SharedCtor();
}

void RoutingEntry::InitAsDefaultInstance() {
}

RoutingEntry::RoutingEntry(const RoutingEntry& from) {
  SharedCtor();
  MergeFrom(from);
}

void RoutingEntry::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  tsid_ = 0;
  msgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutingEntry::~RoutingEntry() {
  SharedDtor();
}

void RoutingEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RoutingEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingEntry_descriptor_;
}

const RoutingEntry& RoutingEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

RoutingEntry* RoutingEntry::default_instance_ = NULL;

RoutingEntry* RoutingEntry::New() const {
  return new RoutingEntry;
}

void RoutingEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    tsid_ = 0;
    msgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoutingEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_tsID;
        break;
      }
      
      // required int32 tsID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tsID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_msgID;
        break;
      }
      
      // optional int32 msgID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_msgID:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &msgid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoutingEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RoutingEntry::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 vID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }
  
  // required int32 tsID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsid(), output);
  }
  
  // optional int32 msgID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoutingEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }
  
  // required int32 tsID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tsid(), target);
  }
  
  // optional int32 msgID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoutingEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vID = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }
    
    // required int32 tsID = 2;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
    // optional int32 msgID = 3;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RoutingEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoutingEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoutingEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoutingEntry::MergeFrom(const RoutingEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vid(from.vid());
    }
    if (from._has_bit(1)) {
      set_tsid(from.tsid());
    }
    if (from._has_bit(2)) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoutingEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingEntry::CopyFrom(const RoutingEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RoutingEntry::Swap(RoutingEntry* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(tsid_, other->tsid_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoutingEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutingEntry_descriptor_;
  metadata.reflection = RoutingEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SwitchStatus::_default_label_;
#ifndef _MSC_VER
const int SwitchStatus::kSwIDFieldNumber;
const int SwitchStatus::kLabelFieldNumber;
const int SwitchStatus::kEntryFieldNumber;
#endif  // !_MSC_VER

SwitchStatus::SwitchStatus() {
  SharedCtor();
}

void SwitchStatus::InitAsDefaultInstance() {
}

SwitchStatus::SwitchStatus(const SwitchStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void SwitchStatus::SharedCtor() {
  _cached_size_ = 0;
  swid_ = 0;
  label_ = const_cast< ::std::string*>(&_default_label_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchStatus::~SwitchStatus() {
  SharedDtor();
}

void SwitchStatus::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SwitchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchStatus_descriptor_;
}

const SwitchStatus& SwitchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

SwitchStatus* SwitchStatus::default_instance_ = NULL;

SwitchStatus* SwitchStatus::New() const {
  return new SwitchStatus;
}

void SwitchStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    swid_ = 0;
    if (_has_bit(1)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 swID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &swid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_entry;
        break;
      }
      
      // repeated .prt.RoutingEntry entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_entry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_entry()));
        if (input->ExpectTag(26)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SwitchStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 swID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->swid(), output);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // repeated .prt.RoutingEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 swID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->swid(), target);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // repeated .prt.RoutingEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 swID = 1;
    if (has_swid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->swid());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  // repeated .prt.RoutingEntry entry = 3;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SwitchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchStatus::MergeFrom(const SwitchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swid(from.swid());
    }
    if (from._has_bit(1)) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchStatus::CopyFrom(const SwitchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void SwitchStatus::Swap(SwitchStatus* other) {
  if (other != this) {
    std::swap(swid_, other->swid_);
    std::swap(label_, other->label_);
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchStatus_descriptor_;
  metadata.reflection = SwitchStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TrackSegmentStatus::_default_label_;
#ifndef _MSC_VER
const int TrackSegmentStatus::kTsIDFieldNumber;
const int TrackSegmentStatus::kLabelFieldNumber;
const int TrackSegmentStatus::kMaxSpeedFieldNumber;
const int TrackSegmentStatus::kLengthFieldNumber;
const int TrackSegmentStatus::kVIDFieldNumber;
#endif  // !_MSC_VER

TrackSegmentStatus::TrackSegmentStatus() {
  SharedCtor();
}

void TrackSegmentStatus::InitAsDefaultInstance() {
}

TrackSegmentStatus::TrackSegmentStatus(const TrackSegmentStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void TrackSegmentStatus::SharedCtor() {
  _cached_size_ = 0;
  tsid_ = 0;
  label_ = const_cast< ::std::string*>(&_default_label_);
  max_speed_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackSegmentStatus::~TrackSegmentStatus() {
  SharedDtor();
}

void TrackSegmentStatus::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TrackSegmentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackSegmentStatus_descriptor_;
}

const TrackSegmentStatus& TrackSegmentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();  return *default_instance_;
}

TrackSegmentStatus* TrackSegmentStatus::default_instance_ = NULL;

TrackSegmentStatus* TrackSegmentStatus::New() const {
  return new TrackSegmentStatus;
}

void TrackSegmentStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tsid_ = 0;
    if (_has_bit(1)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    max_speed_ = 0;
    length_ = 0;
  }
  vid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackSegmentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tsID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tsid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_max_speed;
        break;
      }
      
      // required int32 max_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_speed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &max_speed_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }
      
      // required int32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_length:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &length_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_vID;
        break;
      }
      
      // repeated int32 vID = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_vID:
        {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit =
              input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            ::google::protobuf::int32 value;
            DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
                  input, &value));
            add_vid(value);
          }
          input->PopLimit(limit);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackSegmentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TrackSegmentStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 tsID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tsid(), output);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // required int32 max_speed = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_speed(), output);
  }
  
  // required int32 length = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }
  
  // repeated int32 vID = 5 [packed = true];
  if (this->vid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vid_cached_byte_size_);
  }
  for (int i = 0; i < this->vid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->vid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackSegmentStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tsID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tsid(), target);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // required int32 max_speed = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_speed(), target);
  }
  
  // required int32 length = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }
  
  // repeated int32 vID = 5 [packed = true];
  if (this->vid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->vid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackSegmentStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tsID = 1;
    if (has_tsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsid());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // required int32 max_speed = 3;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_speed());
    }
    
    // required int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
  }
  // repeated int32 vID = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _vid_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TrackSegmentStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackSegmentStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackSegmentStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackSegmentStatus::MergeFrom(const TrackSegmentStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  vid_.MergeFrom(from.vid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tsid(from.tsid());
    }
    if (from._has_bit(1)) {
      set_label(from.label());
    }
    if (from._has_bit(2)) {
      set_max_speed(from.max_speed());
    }
    if (from._has_bit(3)) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackSegmentStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackSegmentStatus::CopyFrom(const TrackSegmentStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackSegmentStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void TrackSegmentStatus::Swap(TrackSegmentStatus* other) {
  if (other != this) {
    std::swap(tsid_, other->tsid_);
    std::swap(label_, other->label_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(length_, other->length_);
    vid_.Swap(&other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackSegmentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackSegmentStatus_descriptor_;
  metadata.reflection = TrackSegmentStatus_reflection_;
  return metadata;
}


}  // namespace prt
