<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml" title="Attributes" layout="vertical" showStatusBar="false"
	width="450" height="700"
	initialize="initVehicleModels();">
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import __AS3__.vec.Vector;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var vehicleModelCollection:ArrayCollection;
			public var vmCollection:ArrayCollection;
			
			private function initVehicleModels():void {
				vehicleModelCollection = new ArrayCollection(Globals.vehicleModels.modelNames);
								
				vmCollection = new ArrayCollection(Globals.vehicleModels.modelNames);
				vmCollection.addItem("New Model");				
			}
			
			private function onVehicleModelsSelection(event:Event):void {
				trace('onVehicleModelsSelection');
				var model:VehicleModel;
				if (event.currentTarget.selectedItem == "New Model") {
					model = new VehicleModel("",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
				} else {
					model = Globals.vehicleModels.getModelByName(event.currentTarget.selectedItem)
				}
				fillVehicleModelsForm(model);
				vmSave.enabled = false;
				vmSave.label = "Save Changes";
			}

			private function onVehicleModelsNameChange(event:Event):void {
				trace('onVehicleModelsNameChange');
				var name:String = Utility.stripWS(vmName.text);
				if (name.length == 0) {
					vmSave.label = "Save"
					vmSave.enabled = false;
					return;
				}
				
				// Check if name is already in use
				for each (var existingName:String in vmCollection) {
					if (name == existingName) {
						vmSave.label = "Save Changes";
						return;
					}
				}
				
				// Otherwise name is new...
				vmSave.enabled = true;
				vmSave.label = "Save New"					
			}
			
			private function onVehicleModelsDeleteButton(event:Event):void {
				trace('onVehicleModelsDeleteButton');
				var name:String = vmComboBox.selectedItem as String;
				if (name != 'New Model') {
					// Check that the model is not the currently selected model for placing new vehicles.
					if (name == Globals.vehicles.modelName) {
						Alert.show(name + " is the currently selected model for creating new vehicles and cannot be deleted.",
						           "Cannot Delete", 0, this)
						return;
					}
					
					// Check that no vehicles are using the model before deleting it.
					var modelInUseCount:int = 0;
					for each (var v:Vehicle in Globals.vehicles.vehicles) {
						if (name == v.modelName) {
							modelInUseCount += 1
						}
					}
					if (modelInUseCount) {
						Alert.show("There are " + modelInUseCount.toString() + " vehicles using the " + name + " model in this scenario. " 
								    + "The vehicles must be removed before the model can be deleted.", "Cannot Delete", 0, this)
						return;
					}
					
					Globals.vehicleModels.removeModelByName(name);
					vehicleModelCollection.removeItemAt(vehicleModelCollection.getItemIndex(name));					
					vmCollection.removeItemAt(vmCollection.getItemIndex(name));
					vmComboBox.selectedIndex = -1;
					setVehicleModelFormEnabled(false);								
				}					
			}

			private function onVehicleModelsSaveButton(event:Event):void {
				trace('onVehicleModelsSaveButton');
				var name:String = Utility.stripWS(vmName.text);
				var model:VehicleModel = Globals.vehicleModels.getModelByName(name);
				// If the name is new, create a new VehicleModel
				if (model == null) {
					model = new VehicleModel(
									name,
									vmLength.value,
									vmCapacity.value,
									vmMass.value,
									vmJerkMaxNorm.value,
									-vmJerkMinNorm.value,
									vmJerkMaxEmerg.value,
									-vmJerkMinEmerg.value,
									vmAccelMaxNorm.value,
									-vmAccelMinNorm.value,
									vmAccelMaxEmerg.value,
									-vmAccelMinEmerg.value,
									vmVelMaxNorm.value,
									0,
									vmVelMaxEmerg.value,
									0,
									vmFrontalArea.value,
									vmDragCoefficient.value,
									vmPowertrainEfficiency.value,
									vmRegenerativeBreakingEfficiency.value
								)
					Globals.vehicleModels.models.push(model);
					vmCollection.addItemAt(model.modelName, vmCollection.length-1);
					vehicleModelCollection.addItem(model.modelName);							
				}
				
				// Update the existing model with the form data.
				else {
					model.modelName = name;
					model.length = vmLength.value;
					model.passengerCapacity = vmCapacity.value;
					model.mass = vmMass.value;
					model.jerkMaxNorm = vmJerkMaxNorm.value;
					model.jerkMinNorm = -vmJerkMinNorm.value;
					model.jerkMaxEmerg = vmJerkMaxEmerg.value;
					model.jerkMinEmerg = -vmJerkMinEmerg.value;
					model.accelMaxNorm = vmAccelMaxNorm.value;
					model.accelMinNorm = -vmAccelMinNorm.value;
					model.accelMaxEmerg = vmAccelMaxEmerg.value;
					model.accelMinEmerg = -vmAccelMinEmerg.value;
					model.velMaxNorm = vmVelMaxNorm.value;
					model.velMinNorm = 0;
					model.velMaxEmerg = vmVelMaxEmerg.value;
					model.velMinEmerg = 0;
					model.frontalArea = vmFrontalArea.value;
					model.dragCoefficient = vmDragCoefficient.value;
					model.powertrainEfficiency = vmPowertrainEfficiency.value;
					model.regenerativeBrakingEfficiency = vmRegenerativeBreakingEfficiency.value;
				}
				
				// Disable the save button so that it's clear that the button press was responded to.
				vmSave.enabled = false;
			}
			
			private function fillVehicleModelsForm(model:VehicleModel):void {
				vmName.text = model.modelName;
				vmLength.value = model.length;
				vmCapacity.value = model.passengerCapacity;
				vmMass.value = model.mass;
				vmVelMaxNorm.value = model.velMaxNorm;
				vmAccelMaxNorm.value = model.accelMaxNorm;
				vmAccelMinNorm.value = -model.accelMinNorm;
				vmJerkMaxNorm.value = model.jerkMaxNorm;
				vmJerkMinNorm.value = -model.jerkMinNorm;
				vmVelMaxEmerg.value = model.velMaxEmerg;
				vmAccelMaxEmerg.value = model.accelMaxEmerg;
				vmAccelMinEmerg.value = -model.accelMinEmerg;
				vmJerkMaxEmerg.value = model.jerkMaxEmerg;
				vmJerkMinEmerg.value = -model.jerkMinEmerg;
				vmFrontalArea.value = model.frontalArea;
				vmDragCoefficient.value = model.dragCoefficient;
				vmPowertrainEfficiency.value = model.powertrainEfficiency;
				vmRegenerativeBreakingEfficiency.value = model.regenerativeBrakingEfficiency;
				
				setVehicleModelFormEnabled(true);
			}
			
			private function setVehicleModelFormEnabled(b:Boolean):void {
				vmName.enabled = b;
				vmLength.enabled = b;
				vmCapacity.enabled = b;
				vmMass.enabled = b;
				vmVelMaxNorm.enabled = b;
				vmAccelMaxNorm.enabled = b;
				vmAccelMinNorm.enabled = b;
				vmJerkMaxNorm.enabled = b;
				vmJerkMinNorm.enabled = b;
				vmVelMaxEmerg.enabled = b;
				vmAccelMaxEmerg.enabled = b;
				vmAccelMinEmerg.enabled = b;
				vmJerkMaxEmerg.enabled = b;
				vmJerkMinEmerg.enabled = b;
				vmFrontalArea.enabled = b;
				vmDragCoefficient.enabled = b;
				vmPowertrainEfficiency.enabled = b;
				vmRegenerativeBreakingEfficiency.enabled = b;				
			}
			
//			private function updateConversionLabels():void {
//	
//			}
			
		]]>
	</mx:Script>

	<mx:TabNavigator id="tn" color="0x323232" width="100%" height="100%">
		<mx:VBox label="Track">
            <mx:Form id="trackForm">
            	<mx:FormHeading label="General" fontStyle="italic" fontSize="10"/>
            
                <mx:FormItem label="Label (optional):" toolTip="For documentation purposes only. Need not be unique.">
                    <mx:TextInput id="trackLabel" text=""
                    	change="Globals.tracks.label = trackLabel.text;"
                    	initialize="trackLabel.text = Globals.tracks.label;"/>
                </mx:FormItem>
                
                <mx:FormItem label="Bidirectional:" toolTip="Two tracks along the same corridor, in opposite directions.">
                	<mx:CheckBox id="trackBidirectional"
                		change="Globals.tracks.bidirectional = trackBidirectional.selected;"
                		initialize="trackBidirectional.selected = Globals.tracks.bidirectional;"/>
                </mx:FormItem>

        		<mx:FormItem label="Height: " toolTip="Height of the track above ground level.">
            		<mx:NumericStepper id="trackOffset" minimum="-100" maximum="100" stepSize="0.5"
            		                   change="Globals.tracks.offset = trackOffset.value"
	        		                   initialize="trackOffset.value = Globals.tracks.offset;" />
        		</mx:FormItem>        	

            	<mx:FormHeading label="Straight Track" fontStyle="italic" fontSize="10" paddingTop="5"/>
            	
                <mx:FormItem label="Max Speed:" toolTip="Speed limit for straight track." >
                    <mx:NumericStepper id="straightMaxSpeedStepper" minimum="0.5" maximum="150" stepSize="0.5"
                    	change="Globals.tracks.straightMaxSpeed = straightMaxSpeedStepper.value;"
                    	initialize="straightMaxSpeedStepper.value = Globals.tracks.straightMaxSpeed;"/>

                </mx:FormItem>
				
				<mx:FormHeading label="Curved Track" fontStyle="italic" fontSize="10" paddingTop="5"/>
					
				<mx:FormItem label="Max Speed:" toolTip="Speed limit for curved track." >
					<mx:NumericStepper id="curveMaxSpeedStepper" minimum="0.5" maximum="150" stepSize="0.5"
						change="Globals.tracks.curveMaxSpeed = curveMaxSpeedStepper.value;"
						initialize="curveMaxSpeedStepper.value = Globals.tracks.curveMaxSpeed;" />							
				</mx:FormItem>
																
				<mx:FormItem label="Radius:" toolTip="Radius of the curve.">
					<mx:HBox>
						<mx:NumericStepper id="curveRadius" minimum="0" maximum="999" stepSize="5"
										   change="Globals.tracks.radius = curveRadius.value"
										   initialize="curveRadius.value = Globals.tracks.radius;"/>
						<mx:Label text= "accel: {(Globals.tracks.curveMaxSpeed * Globals.tracks.curveMaxSpeed / Globals.tracks.radius / 9.8).toFixed(2) + ' g'}"
								  fontStyle="italic" paddingBottom="5"
						          toolTip="a = v^2 / r   The lateral acceleration in the curve, assuming that it is not banked. Recommended to not exceed 0.35g for passenger comfort." />
					</mx:HBox>	
   				</mx:FormItem>
				
				<mx:FormHeading label="Interchanges" fontStyle="italic" fontSize="10" paddingTop="5"/>
				
				<mx:FormItem label="Ramp Offset:" toolTip="Distance separating an offramp from the main line.">					
					<mx:NumericStepper id="rampOffsetStepper" minimum="0.5" maximum="50" stepSize="0.5"
									   change="Globals.tracks.rampOffset = rampOffsetStepper.value;"
									   initialize="rampOffsetStepper.value = Globals.tracks.rampOffset;"/>						 
				</mx:FormItem>
				
				<mx:FormItem label="Deceleration Length:"
							 toolTip="Length of the straight, deceleration segment of a connecting ramp.">
					<mx:NumericStepper id="decelStepper" minimum="0" maximum="999" stepSize="1"
									   change="Globals.tracks.decelLength = decelStepper.value;"
									   initialize="decelStepper.value = Globals.tracks.decelLength;"/>
				</mx:FormItem>

				<mx:FormItem label="Acceleration Length:"
							 toolTip="Length of the straight, acceleration segment of a connecting ramp.">
					<mx:NumericStepper id="accelStepper" minimum="0" maximum="999" stepSize="1"
									   change="Globals.tracks.accelLength = accelStepper.value;"
									   initialize="accelStepper.value = Globals.tracks.accelLength;"/>
				</mx:FormItem>

				<mx:FormItem label="Max S-Curve Speed:"
				             toolTip="Maximum speed in the S-Curves used for exiting and entering the main line." >
					<mx:NumericStepper id="sCurveSpeedStepper" minimum="0.5" maximum="200" stepSize="0.5"
					                   change="Globals.tracks.sCurveMaxSpeed = sCurveSpeedStepper.value;"
					                   initialize="sCurveSpeedStepper.value = Globals.tracks.sCurveMaxSpeed;" />
				</mx:FormItem>

				<mx:FormItem label="S-Curve Radius:"
				             toolTip="Radius for the two curves that form the S-curve. Should be large enough that a vehicle may navigate the S-curve at full speed without excessive lateral acceleration." >
				    <mx:HBox>
						<mx:NumericStepper id="sCurveRadiusStepper" minimum="1" maximum="999" stepSize="1"
										   change="Globals.tracks.sCurveRadius = sCurveRadiusStepper.value;"
										   initialize="sCurveRadiusStepper.value = Globals.tracks.sCurveRadius;" />				    	
						<mx:Label text= "accel: {(Globals.tracks.sCurveMaxSpeed * Globals.tracks.sCurveMaxSpeed / Globals.tracks.sCurveRadius / 9.8).toFixed(2) + ' g'}"
														  fontStyle="italic" paddingBottom="5"
												          toolTip="a = v^2 / r   The lateral acceleration in the curve, assuming that it is not banked. Recommended to not exceed 0.35g for passenger comfort." />				    </mx:HBox>
				</mx:FormItem>								
				
				<mx:FormItem label="Max Turn Speed:"
				             toolTip="Maximum speed in turn segment." >
					<mx:NumericStepper id="turnSpeedStepper" minimum="0.5" maximum="200" stepSize="0.5"
					                   change="Globals.tracks.turnMaxSpeed = turnSpeedStepper.value;"
					                   initialize="turnSpeedStepper.value = Globals.tracks.turnMaxSpeed;" />
				</mx:FormItem>

				<mx:FormItem label="Turn Radius:"
							 toolTip="Radius for the turn segment of a connecting ramp." >
					<mx:HBox>
						<mx:NumericStepper id="turnRadiusStepper" minimum="1" maximum="999" stepSize="1" 
										   change="Globals.tracks.turnRadius = turnRadiusStepper.value;"
										   initialize="turnRadiusStepper.value = Globals.tracks.turnRadius;" />						
						<mx:Label text= "accel: {(Globals.tracks.turnMaxSpeed * Globals.tracks.turnMaxSpeed / Globals.tracks.turnRadius / 9.8).toFixed(2) + ' g'}"
														  fontStyle="italic" paddingBottom="5"
												          toolTip="a = v^2 / r   The lateral acceleration in the curve, assuming that it is not banked. Recommended to not exceed 0.35g for passenger comfort." />					</mx:HBox>
				</mx:FormItem>				
            </mx:Form>
		</mx:VBox>
				
		<mx:VBox label="Stations">
            <mx:Form id="stationForm" >	                	                                        
                <mx:FormItem label="Label (optional):" toolTip="For documentation purposes only. Need not be unique.">
                    <mx:TextInput id="stationLabel" text=""
                    	change="Globals.stations.label = stationLabel.text;"
                    	initialize="stationLabel.text = Globals.stations.label;"/>
                </mx:FormItem>
                
                <mx:FormItem label="Reverse:" toolTip="Connect to the 'reverse' segment of a bidirectional track.">
                	<mx:CheckBox id="stationReverse"
                		change="Globals.stations.reverse = stationReverse.selected;"
                		initialize="stationReverse.selected = Globals.stations.reverse;"/>
                </mx:FormItem>
                
                <mx:FormItem id="stationMaxSpeedForm" label="Max Speed:" toolTip="Station speed limit">
                	<mx:NumericStepper id="stationMaxSpeed" minimum="0" maximum="150" stepSize="0.5"
                    	change="Globals.stations.maxSpeed = stationMaxSpeed.value;"
                    	initialize="stationMaxSpeed.value = Globals.stations.maxSpeed;"/>
                </mx:FormItem>
                
                <mx:FormItem label="Station Offset:" toolTip="How far away from the main line the station lies.">
                	<mx:NumericStepper id="stationLateralOffset" minimum="0.5" maximum="50" stepSize="0.5"
                	        change="Globals.stations.lateralOffset = stationLateralOffset.value;"
                	        initialize="stationLateralOffset.value = Globals.stations.lateralOffset;" />
                </mx:FormItem>
                
                <mx:FormItem label="Accel/Decel Length:"
                	         toolTip="Length of track required to bring vehicle down to station entrance speed, or up to line speed (whichever is greater).">
                	<mx:NumericStepper id="stationAccelLength" minimum="2" maximum="500" stepSize="0.5"
                	        change="Globals.stations.accelLength = stationAccelLength.value;"
                	        initialize="stationAccelLength.value = Globals.stations.accelLength;" />                	 		 
                </mx:FormItem>
                
                <mx:FormItem label="Slot Length:" toolTip="Per slot length">
                	<mx:NumericStepper id="stationSlotLength" minimum="0" maximum="200" stepSize="0.5"
                		change="Globals.stations.slotLength = stationSlotLength.value;"
                		initialize="stationSlotLength.value = Globals.stations.slotLength;" />
                </mx:FormItem>
                                
                <mx:FormItem label="Queue Slots:" toolTip="Number of slots for vehicles waiting to unload. Assumed to be inline with the rest of the station's track.">
                    <mx:NumericStepper id="stationQueueSlots" minimum="0" maximum="100" stepSize="1"
                    	change="Globals.stations.queueSlots = stationQueueSlots.value;"
                    	initialize="stationQueueSlots.value = Globals.stations.queueSlots;" />                    	
                </mx:FormItem>
                
                <mx:FormItem label="Unload Slots:" toolTip="Number of independent unloading berths.">
                        <mx:NumericStepper id="stationUnloadSlots" minimum="0" maximum="100" stepSize="1"
                    	change="Globals.stations.unloadSlots = stationUnloadSlots.value;"
                    	initialize="stationUnloadSlots.value = Globals.stations.unloadSlots;" />  
                </mx:FormItem>
                
                <mx:FormItem label="Loading Slots:" toolTip="Number of independent loading berths.">
                    <mx:NumericStepper id="stationLoadSlots" minimum="0" maximum="100" stepSize="1" 
                    	change="Globals.stations.loadSlots = stationLoadSlots.value;"
                    	initialize="stationLoadSlots.value = Globals.stations.loadSlots;" /> 
                </mx:FormItem>
                
                <!--
                <mx:FormItem label="Storage Slots:" toolTip="Number of offline storage berths.">
                    <mx:NumericStepper id="stationStorageSlots" minimum="0" maximum="1000" stepSize="1" 
                    	change="Globals.stations.storage_slots = stationStorageSlots.value;"
                    	initialize="Globals.stations.storage_slots = stationStorageSlots.value;" /> 
                </mx:FormItem>
                -->
                
                <mx:FormItem label="Coverage Radius:" toolTip="The expected coverage area for this station.">
                    <mx:NumericStepper id="stationRadius" minimum="0" maximum="1000000" stepSize="1"
                    	change="Globals.stations.coverageRadius = stationRadius.value;"
                    	initialize="stationRadius.value = Globals.stations.coverageRadius;" /> 
                </mx:FormItem>
                
                <mx:FormItem label="Peak Hourly Usage:" toolTip="The number of passengers during the busiest hour. Currently has no effect.">
                	<mx:NumericStepper id="stationPeakHour" minimum="0" maximum="100000" stepSize="1"
                		change="Globals.stations.peakHour = stationPeakHour.value;"
                		initialize="stationPeakHour.value = Globals.stations.peakHour;" />
                </mx:FormItem>

                <mx:FormItem label="Daily Usage:" toolTip="The number of passengers per day. Currently has no effect.">
                	<mx:NumericStepper id="stationDaily" minimum="0" maximum="1000000" stepSize="1"
                		change="Globals.stations.daily = stationDaily.value;"
                		initialize="stationDaily.value = Globals.stations.daily;" />
                </mx:FormItem>

            </mx:Form>
		</mx:VBox>
		
		<mx:VBox label="Vehicles">
            <mx:Form id="vehicleForm" >
                <mx:FormItem label="Label (optional):">
                    <mx:TextInput id="vehicleLabel"
                    	change="Globals.vehicles.label = vehicleLabel.text;"
                    	initialize="vehicleLabel.text = Globals.vehicles.label;"/>
                </mx:FormItem>

				<mx:FormItem label="Vehicle Model">
					<mx:ComboBox id="vehicleModelComboBox" dataProvider="{vehicleModelCollection}"
						change="Globals.vehicles.modelName = event.currentTarget.selectedItem;" />	
				</mx:FormItem>

                <mx:FormItem label="Reverse Direction:">
                	<mx:CheckBox id="vehicleReverseDirection"
                		initialize="vehicleReverseDirection.selected = Globals.vehicles.reverseDir;"
                		change="Globals.vehicles.reverseDir = vehicleReverseDirection.selected;"/>                	
                </mx:FormItem>

            	<mx:FormItem label="Initial Velocity" >
            		<mx:NumericStepper id="vehicleInitialVelocity" minimum="0" maximum="999" stepSize="0.1"
            			value="{Globals.vehicles.velocity}"
            			change="Globals.vehicles.velocity = vehicleInitialVelocity.value;" />
            	</mx:FormItem>
            	
            </mx:Form>
		</mx:VBox>

		<mx:VBox label="Vehicle Models">
			<mx:Form>
				<mx:FormItem label="Choose Model:">
					<mx:HBox>
						<mx:ComboBox id="vmComboBox" dataProvider="{vmCollection}" prompt="Select One..."
							change="onVehicleModelsSelection(event)"/>
						<mx:Button label="Delete" click="onVehicleModelsDeleteButton(event)"/>
					</mx:HBox>					
				</mx:FormItem>
				
				<mx:FormItem label="Model Name:">
					<mx:TextInput id="vmName" editable="true" text="" enabled="false"
						change="onVehicleModelsNameChange(event);"/>
				</mx:FormItem>
				
				<mx:FormItem label="Length:">
					<mx:HBox>
						<mx:NumericStepper id="vmLength" minimum="0" maximum="99999" stepSize="0.1" enabled="false"
							toolTip="Exterior vehicle length, in meters"
							change="vmSave.enabled = true;"
							valueCommit="vmLengthFt.text = (vmLength.value*3.28).toFixed(1) + ' ft'"/>
						<mx:Label id="vmLengthFt" text="x.x ft" fontStyle="italic" />						
					</mx:HBox>
				</mx:FormItem>
				
				<mx:FormItem label="Capacity:">
					<mx:HBox>
						<mx:NumericStepper id="vmCapacity" minimum="0" maximum="99999" stepSize="1" enabled="false"
							change="vmSave.enabled = true;"
							toolTip="Maximum number of passengers" />
						<mx:Label text="passengers" fontStyle="italic"/>									
					</mx:HBox>
				</mx:FormItem>
				
				<mx:FormItem label="Mass:">
					<mx:HBox>
						<mx:NumericStepper id="vmMass" minimum="0" maximum="99999" stepSize="1" enabled="false"
							toolTip="Vehicle mass when empty of passengers and cargo, in kg"
							change="vmSave.enabled = true;" 
							valueCommit="vmMassLbs.text = int(vmMass.value*2.2) + ' lbs'" />
						<mx:Label id="vmMassLbs" text="x lbs" fontStyle="italic" />
					</mx:HBox>
				</mx:FormItem>				
			
				<mx:FormHeading label="Comfort Limits" fontStyle="italic" fontSize="10" paddingTop="5"/>
								
				<mx:FormItem label="Max Speed">
					<mx:HBox>
						<mx:NumericStepper id="vmVelMaxNorm" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max speed for regular use when passengers are on board. Note that the track or controller may impose lower limits. Measured in meters/second."
							change="vmSave.enabled = true;"							
							valueCommit="vmVelMaxNormMPH.text = (vmVelMaxNorm.value*3.6).toFixed(1)+' kph '+'('+(vmVelMaxNorm.value*2.2369).toFixed(1)+' mph)';" />
						<mx:Label id="vmVelMaxNormMPH" text="x.x kph (x.x mph)" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>				
				
				<mx:FormItem label="Max Acceleration">
					<mx:HBox>
						<mx:NumericStepper id="vmAccelMaxNorm" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max acceleration for regular use when passengers are on board. Measured in m/s^2."
							change="vmSave.enabled = true;"  
							valueCommit="vmAccelMaxNormGs.text = (vmAccelMaxNorm.value/9.8).toFixed(1) + ' g';" />
						<mx:Label id="vmAccelMaxNormGs" text="x.x g" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>
				
				<mx:FormItem label="Max Deceleration">
					<mx:HBox>
						<mx:NumericStepper id="vmAccelMinNorm" minimum="0" maximum="999" stepSize="0.1" enabled="false" 
							toolTip="Max deceleration for regular use when passengers are on board. Measured in m/s^2."
							change="vmSave.enabled = true;"
							valueCommit="vmAccelMinNormGs.text = (vmAccelMinNorm.value/9.8).toFixed(1) + ' g';" />
						<mx:Label id="vmAccelMinNormGs" text="x.x g" fontStyle="italic" />
					</mx:HBox>
				</mx:FormItem>

				<mx:FormItem label="Max Accel Jerk">
					<mx:HBox>
						<mx:NumericStepper id="vmJerkMaxNorm" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max jerk allowed when accelerating during regular use when passengers are on board. Measured in m/s^3."
							change="vmSave.enabled = true;"
							valueCommit="vmJerkMaxNormGs.text = (vmJerkMaxNorm.value/9.8).toFixed(1) + ' g';" />
						<mx:Label id="vmJerkMaxNormGs" text="x.x g/sec" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>

				<mx:FormItem label="Max Decel Jerk">
					<mx:HBox>
						<mx:NumericStepper id="vmJerkMinNorm" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max jerk allowed when decelerating during regular use when passengers are on board. Measured in m/s^3." 
							change="vmSave.enabled = true;"
							valueCommit="vmJerkMinNormGs.text = (vmJerkMinNorm.value/9.8).toFixed(1) + ' g';" />
						<mx:Label id="vmJerkMinNormGs" text="x.x g/sec" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>

				<mx:FormHeading label="Hardware Limits" fontStyle="italic" fontSize="10" paddingTop="5"/>
								
				<mx:FormItem label="Max Speed">
					<mx:HBox>
						<mx:NumericStepper id="vmVelMaxEmerg" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max speed when passengers are not on board or during emergency maneuvers. Measured in m/s." 
							change="vmSave.enabled = true;"
							valueCommit="vmVelMaxEmergMPH.text = (vmVelMaxEmerg.value*3.6).toFixed(1)+' kph '+'('+(vmVelMaxEmerg.value*2.2369).toFixed(1)+' mph)';" />
					    <mx:Label id="vmVelMaxEmergMPH" text="x.x kph (x.x mph)" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>				
				
				<mx:FormItem label="Max Acceleration">
					<mx:HBox>
						<mx:NumericStepper id="vmAccelMaxEmerg" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max acceleration when passengers are not on board or during emergency maneuvers. Measured in m/s^2."
							change="vmSave.enabled = true;"
							valueCommit="vmAccelMaxEmergGs.text = (vmAccelMaxEmerg.value/9.8).toFixed(1) + ' g';" />
						<mx:Label id="vmAccelMaxEmergGs" text="x.x g" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>
				
				<mx:FormItem label="Max Deceleration">
					<mx:HBox>
						<mx:NumericStepper id="vmAccelMinEmerg" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max deceleration when passengers are not on board or during emergency maneuvers. Measured in m/s^2." 
							change="vmSave.enabled = true;"
							valueCommit="vmAccelMinEmergGs.text = (vmAccelMinEmerg.value/9.8).toFixed(1) + ' g';" />
						<mx:Label id="vmAccelMinEmergGs" text="x.x g" fontStyle="italic" />
					</mx:HBox>
				</mx:FormItem>

				<mx:FormItem label="Max Accel Jerk">
					<mx:HBox>
						<mx:NumericStepper id="vmJerkMaxEmerg" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max jerk allowed when accelerating without passengers on board or during emergency maneuvers. Measured in m/s^3." 
							change="vmSave.enabled = true;"
							valueCommit="vmJerkMaxEmergGs.text = (vmJerkMaxEmerg.value/9.8).toFixed(1) + ' g/s';" />
						<mx:Label id="vmJerkMaxEmergGs" text="x.x g/sec" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>

				<mx:FormItem label="Max Decel Jerk">
					<mx:HBox>
						<mx:NumericStepper id="vmJerkMinEmerg" minimum="0" maximum="999" stepSize="0.1" enabled="false"
							toolTip="Max jerk allowed when decelerating without passengers on board or during emergency maneuvers. Measured in m/s^3." 
							change="vmSave.enabled = true;"
							valueCommit="vmJerkMinEmergGs.text = (vmJerkMinEmerg.value/9.8).toFixed(1) + ' g/s';" />
						<mx:Label id="vmJerkMinEmergGs" text="x.x g/sec" fontStyle="italic" />
					</mx:HBox>					
				</mx:FormItem>

				<mx:FormHeading label="Energy Usage" fontStyle="italic" fontSize="10" paddingTop="5"/>
				
				<mx:FormItem label="Air Resistance">
					<mx:HBox>
						<mx:Label text="Area:"/>
						<mx:NumericStepper id="vmFrontalArea" minimum="0" maximum="999" stepSize="0.01" enabled="false"
							toolTip="Measure of frontal area, in sq. meters" 
							change="vmSave.enabled = true;" />
						<mx:Spacer/>
						<mx:Label text="Cd:" />
						<mx:NumericStepper id="vmDragCoefficient" minimum="0" maximum="1" stepSize="0.01" enabled="false"
							toolTip="Coefficient of Drag. Unitless" 
							change="vmSave.enabled = true;" />						
					</mx:HBox>
					
				</mx:FormItem>
				
				<mx:FormItem label="Powertrain Efficiency">
					<mx:NumericStepper id="vmPowertrainEfficiency" minimum="0" maximum="100" stepSize="0.1" enabled="false"
					    toolTip="Average percent. 100 indicates no energy losses."
					    change="vmSave.enabled = true;" />
				</mx:FormItem>
				
				<mx:FormItem label="Regen. Braking">					
					<mx:NumericStepper id="vmRegenerativeBreakingEfficiency" minimum="0" maximum="100" stepSize="0.1" enabled="false"
						toolTip="Average percent of energy recovered through regenerative breaking. 100 indicates that all kinetic energy is recovered during braking."
						change="vmSave.enabled = true;" />
					
				</mx:FormItem>								
			</mx:Form>
			
			<mx:HBox width="100%">
				<mx:Spacer width="300" />
				<mx:Button id="vmSave" label="Save" enabled="false"
					click="onVehicleModelsSaveButton(event);"/>	
			</mx:HBox>
						
		</mx:VBox>

	</mx:TabNavigator>
	
</mx:Window>

