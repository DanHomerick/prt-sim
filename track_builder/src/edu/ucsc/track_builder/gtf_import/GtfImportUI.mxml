<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="550" height="400"
	       paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"
	       title="Google Transit Feed Importer" backgroundColor="0xFFFFFF" showStatusBar="false">

	<mx:ViewStack id="viewStack" width="100%" height="100%">
		<mx:VBox id="page1">
			<mx:TextArea id="feedLabel_pg1" text="" borderStyle="outset" borderThickness="1" width="300" height="25" editable="false" fontStyle="italic"
				                        initialize="feedLabel_pg1.text = 'Feed Directory: ' + feedDir.nativePath;"/>
			
			<mx:Label text="Choose Routes" fontWeight="bold" fontStyle="italic"/>	
		    <mx:DataGrid id="routeChooser" width="100%" height="70%" rowCount="5" horizontalScrollPolicy="auto" selectedIndex="0" 
		    	                           allowMultipleSelection="true" allowDragSelection="true" initialize="initRoutesGrid()">
		        <mx:columns>
		            <mx:DataGridColumn dataField="typeStr" headerText="Type" width="100"/>
		            <mx:DataGridColumn dataField="short" headerText="ShortID" width="60"/>
		            <mx:DataGridColumn dataField="long" headerText="LongID" width="200"/>
		            <mx:DataGridColumn dataField="desc" headerText="Description" width="100"/>
		        </mx:columns>
		    </mx:DataGrid>
		    
		    <mx:HBox width="100%" horizontalAlign="right" paddingRight="10">
		    	<mx:Button label="Select All" click="selectAllRoutes()" />	
		    </mx:HBox>
	
			<mx:HBox width="100%" horizontalAlign="right" paddingRight="10">
				 <mx:Button label="Cancel" click="this.close()" />
				 <mx:Button label="Back" enabled="false" />
				 <mx:Button label="Next" click="viewStack.selectedChild=page2;
				                                if (dateChooser != null) {initCalendar()}; // called in case the user goes 'next, back, next'" />
			</mx:HBox>
		</mx:VBox>
	
		<mx:VBox id="page2">
			<mx:TextArea id="feedLabel_pg2" text="" borderStyle="outset" borderThickness="1" width="300" height="25" editable="false" fontStyle="italic"
				                        initialize="feedLabel_pg2.text = 'Feed Directory: ' + feedDir.nativePath;"/>
	
			<mx:Label text="Choose Date/Time" fontWeight="bold" fontStyle="italic"/>
			<mx:DateChooser id="dateChooser" initialize="initCalendar()"/>
			
			<mx:Grid>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="Hour" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:Label text="Minute" />
					</mx:GridItem>
				</mx:GridRow>
				
				<mx:GridRow>
					<mx:GridItem>
						<mx:NumericStepper id="hourChooser" minimum="0" maximum="36" stepSize="1" value="7" />
					</mx:GridItem>
					<mx:GridItem>
						<mx:NumericStepper id="minuteChooser" minimum="0" maximum="59" stepSize="1" value="0" />
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
			
		    <mx:HBox width="100%" horizontalAlign="right" paddingRight="10">
				 <mx:Button label="Cancel" click="this.close()" />
				 <mx:Button label="Back" click="viewStack.selectedChild=page1" />
				 <mx:Button label="Finished" click="beginImport();
				                                    this.nativeWindow.close();" />
		    </mx:HBox>
		    
		    <!-- This doesn't work. The import is CPU intensive, and there's no practical way to force a screen
		         refresh. As a result, the progress bar isn't updated until the import completes. A potential
		         workaround would require restructuring the import to be event driven, such that each section of
		         work dispatches an event on completion, with the event triggering the execution of the next section.
		         Not worth it.
		    <mx:ProgressBar id='progressBar' labelPlacement="bottom" themeColor="#F20D7A" visible="true"
		                    label='Testing ...' direction="right" mode="event" width="100%" />
		      -->	    

		</mx:VBox>		
	</mx:ViewStack>
	
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import mx.controls.Alert;
			
			public var feedDir:File;
			public var importer:GtfImporter;
		
			public function setFeedDir(dir:File):void {
				feedDir = dir;				
				importer = new GtfImporter(dir);
			}
		
			public function selectAllRoutes():void {
				var indices:Array = new Array();
				var length:Number = routeChooser.dataProvider.length;
				for (var i:int=0; i < length; ++i) {
					indices.push(i);
				}
				routeChooser.selectedIndices = indices;
			}		
			
			public function initRoutesGrid():void {
				try {
					var routesVec:Vector.<Route> = importer.getRoutes();
					var routesArray:Array = new Array();
					for each (var route:Route in routesVec) {
						routesArray.push(route);
					} 
					routeChooser.dataProvider = routesArray;
				} catch (gtfErr:GtfImportError) {
					Alert.show(gtfErr.message);
					this.close();
				} catch (e:Error) {
					Alert.show(e.message);
					this.close();
				}
			}
			
			public function initCalendar():void {
				var services:Object = importer.getServicesFromRoutes(routeChooser.selectedItems);				
				dateChooser.selectableRange = getSelectableRange(services);
				dateChooser.disabledDays = getDisabledDays(services);
				dateChooser.showToday = false;
				
				/* Default calendar to today, or closest day in range. */
				var now:Date = new Date();
				if (dateChooser.selectableRange.rangeStart.time > now.time) {
					dateChooser.selectedDate = dateChooser.selectableRange.rangeStart;
				} else if (dateChooser.selectableRange.rangeEnd.time < now.time) {
					dateChooser.selectedDate = dateChooser.selectableRange.rangeEnd;
				} else {
					dateChooser.selectedDate = now;
				}
			}
			
			/** 
			 * @param services An Object used as a dictionary. Contains existing Service instances, keyed by service_id.
			 * @return An Object containing two properties, <code>rangeStart</code> and <code>rangeEnd</code>,
			 *         suitable for use with <code>DateChooser.selectableRange</code>.*/
			public function getSelectableRange(services:Object):Object {
				var rangeStart:Date;
				var rangeEnd:Date;
				for each (var service:Service in services) {
					if (rangeStart == null || service.start.time < rangeStart.time) {
						rangeStart = ObjectUtil.copy(service.start) as Date; 
					}
					if (rangeEnd == null || service.end.time > rangeEnd.time) {
						rangeEnd = ObjectUtil.copy(service.end) as Date;
					}
				}
				return {'rangeStart':rangeStart, 'rangeEnd':rangeEnd};
			}
			
			
			/**
			 * @param services An Object used as a dictionary. Contains existing Service instances, keyed by service_id.
			 * @return An Array of disabled days, suitable for use with <code>DateChooser.disabledDays</code>.
			 */
			public function getDisabledDays(services:Object):Array {
				var enabled:Vector.<Boolean> = new Vector.<Boolean>(7, true); 			
				for each (var service:Service in services) {
					// enable days on which there is regular service
					for (var i:uint=0; i < 7; ++i) {
						enabled[i] = enabled[i] || service.avail[i];					
					}
					
					// also enable days in which some service is offered by exception
					for each (var incl_excep:Date in service.incl_exceptions) {
						enabled[incl_excep.day] = true;
					}
				}				
				
				var disabled:Array = new Array();
				for (i=0; i < 7; ++i) {
					if (!enabled[i]) {
						disabled.push(i);
					}
				}
				return disabled;		
			}
			
			public function beginImport():void {
				var routes:Array = routeChooser.selectedItems;
				var date:Date = dateChooser.selectedDate;
				if (date == null) {
					Alert.show("A date must be selected.");
					return;
				}
				var time:Time = Time.fromHMS(hourChooser.value, minuteChooser.value, 0);
				
				var allServices:Object = importer.getServices();
				var selectedServices:Array = new Array();
				for each (var service:Service in allServices) {
					if (service.isAvailable(date)) {
						selectedServices.push(service);
					}
				}

//				importer.setProgressBar(progressBar);				
				importer.doImport(routes, selectedServices, date, time); 
			}			
		]]>
	</mx:Script>
		

</mx:Window>